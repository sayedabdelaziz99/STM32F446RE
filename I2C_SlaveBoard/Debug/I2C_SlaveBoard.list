
I2C_SlaveBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000acc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c90  08000c98  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c90  08000c90  00010c98  2**0
                  CONTENTS
  4 .ARM          00000000  08000c90  08000c90  00010c98  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c90  08000c98  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c90  08000c90  00010c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c94  08000c94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c98  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c98  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010c98  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b1a  00000000  00000000  00010cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c6  00000000  00000000  000127dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00012ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  00013060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021e5  00000000  00000000  000131c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021ab  00000000  00000000  000153a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000065d7  00000000  00000000  00017550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001db27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005c0  00000000  00000000  0001db78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000c78 	.word	0x08000c78

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000c78 	.word	0x08000c78

08000204 <I2C1_GPIOInit>:
SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
GPIO_CLKCNT(pGPIOx, ENABLE);
GPIO_Init(&SPIPins);
}

void I2C1_GPIOInit(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t ALTFN_Mode){
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
 8000210:	4613      	mov	r3, r2
 8000212:	70bb      	strb	r3, [r7, #2]
GPIO_Handle_t I2CPins;
I2CPins.pGPIOx = pGPIOx;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	60fb      	str	r3, [r7, #12]
I2CPins.GPIO_PinConfig.GPIO_PinNumber =  PinNumber;
 8000218:	78fb      	ldrb	r3, [r7, #3]
 800021a:	743b      	strb	r3, [r7, #16]
I2CPins.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_ALTFN;
 800021c:	2302      	movs	r3, #2
 800021e:	747b      	strb	r3, [r7, #17]
I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode   =  ALTFN_Mode;
 8000220:	78bb      	ldrb	r3, [r7, #2]
 8000222:	757b      	strb	r3, [r7, #21]
I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000224:	2301      	movs	r3, #1
 8000226:	753b      	strb	r3, [r7, #20]
I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_PIN_PU;
 8000228:	2301      	movs	r3, #1
 800022a:	74fb      	strb	r3, [r7, #19]
I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPOI_SPEED_HIGH;
 800022c:	2303      	movs	r3, #3
 800022e:	74bb      	strb	r3, [r7, #18]
GPIO_CLKCNT(pGPIOx, ENABLE);
 8000230:	2101      	movs	r1, #1
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 f814 	bl	8000260 <GPIO_CLKCNT>
pGPIOx->LCKR &= ~(1 << PinNumber);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	69db      	ldr	r3, [r3, #28]
 800023c:	78fa      	ldrb	r2, [r7, #3]
 800023e:	2101      	movs	r1, #1
 8000240:	fa01 f202 	lsl.w	r2, r1, r2
 8000244:	43d2      	mvns	r2, r2
 8000246:	401a      	ands	r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	61da      	str	r2, [r3, #28]
GPIO_Init(&I2CPins);
 800024c:	f107 030c 	add.w	r3, r7, #12
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f8eb 	bl	800042c <GPIO_Init>
}
 8000256:	bf00      	nop
 8000258:	3718      	adds	r7, #24
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <GPIO_CLKCNT>:
 *
 * @Note              -  none

 */
void GPIO_CLKCNT(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	460b      	mov	r3, r1
 800026a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800026c:	78fb      	ldrb	r3, [r7, #3]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d157      	bne.n	8000322 <GPIO_CLKCNT+0xc2>
	{
	  if(pGPIOx == GPIOA){GPIOA_CLKEN;}
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a59      	ldr	r2, [pc, #356]	; (80003dc <GPIO_CLKCNT+0x17c>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d106      	bne.n	8000288 <GPIO_CLKCNT+0x28>
 800027a:	4b59      	ldr	r3, [pc, #356]	; (80003e0 <GPIO_CLKCNT+0x180>)
 800027c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027e:	4a58      	ldr	r2, [pc, #352]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6313      	str	r3, [r2, #48]	; 0x30
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
	}
}
 8000286:	e0a3      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKEN;}
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a56      	ldr	r2, [pc, #344]	; (80003e4 <GPIO_CLKCNT+0x184>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d106      	bne.n	800029e <GPIO_CLKCNT+0x3e>
 8000290:	4b53      	ldr	r3, [pc, #332]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000294:	4a52      	ldr	r2, [pc, #328]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000296:	f043 0302 	orr.w	r3, r3, #2
 800029a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800029c:	e098      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKEN;}
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a51      	ldr	r2, [pc, #324]	; (80003e8 <GPIO_CLKCNT+0x188>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d106      	bne.n	80002b4 <GPIO_CLKCNT+0x54>
 80002a6:	4b4e      	ldr	r3, [pc, #312]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80002a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002aa:	4a4d      	ldr	r2, [pc, #308]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b2:	e08d      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKEN;}
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a4d      	ldr	r2, [pc, #308]	; (80003ec <GPIO_CLKCNT+0x18c>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d106      	bne.n	80002ca <GPIO_CLKCNT+0x6a>
 80002bc:	4b48      	ldr	r3, [pc, #288]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80002be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c0:	4a47      	ldr	r2, [pc, #284]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c8:	e082      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKEN;}
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a48      	ldr	r2, [pc, #288]	; (80003f0 <GPIO_CLKCNT+0x190>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_CLKCNT+0x80>
 80002d2:	4b43      	ldr	r3, [pc, #268]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80002d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d6:	4a42      	ldr	r2, [pc, #264]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80002d8:	f043 0310 	orr.w	r3, r3, #16
 80002dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002de:	e077      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKEN;}
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a44      	ldr	r2, [pc, #272]	; (80003f4 <GPIO_CLKCNT+0x194>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_CLKCNT+0x96>
 80002e8:	4b3d      	ldr	r3, [pc, #244]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ec:	4a3c      	ldr	r2, [pc, #240]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f4:	e06c      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKEN;}
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a3f      	ldr	r2, [pc, #252]	; (80003f8 <GPIO_CLKCNT+0x198>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_CLKCNT+0xac>
 80002fe:	4b38      	ldr	r3, [pc, #224]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	4a37      	ldr	r2, [pc, #220]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000308:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030a:	e061      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKEN;}
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a3b      	ldr	r2, [pc, #236]	; (80003fc <GPIO_CLKCNT+0x19c>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d15d      	bne.n	80003d0 <GPIO_CLKCNT+0x170>
 8000314:	4b32      	ldr	r3, [pc, #200]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000318:	4a31      	ldr	r2, [pc, #196]	; (80003e0 <GPIO_CLKCNT+0x180>)
 800031a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800031e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000320:	e056      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  if(pGPIOx == GPIOA){GPIOA_CLKDI;}
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a2d      	ldr	r2, [pc, #180]	; (80003dc <GPIO_CLKCNT+0x17c>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_CLKCNT+0xd8>
 800032a:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <GPIO_CLKCNT+0x180>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a2c      	ldr	r2, [pc, #176]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000330:	f023 0301 	bic.w	r3, r3, #1
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000336:	e04b      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKDI;}
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a2a      	ldr	r2, [pc, #168]	; (80003e4 <GPIO_CLKCNT+0x184>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_CLKCNT+0xee>
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000346:	f023 0302 	bic.w	r3, r3, #2
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	e040      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKDI;}
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a25      	ldr	r2, [pc, #148]	; (80003e8 <GPIO_CLKCNT+0x188>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_CLKCNT+0x104>
 8000356:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <GPIO_CLKCNT+0x180>)
 800035c:	f023 0304 	bic.w	r3, r3, #4
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000362:	e035      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKDI;}
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a21      	ldr	r2, [pc, #132]	; (80003ec <GPIO_CLKCNT+0x18c>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_CLKCNT+0x11a>
 800036c:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <GPIO_CLKCNT+0x180>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a1b      	ldr	r2, [pc, #108]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000372:	f023 0308 	bic.w	r3, r3, #8
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000378:	e02a      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <GPIO_CLKCNT+0x190>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_CLKCNT+0x130>
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a16      	ldr	r2, [pc, #88]	; (80003e0 <GPIO_CLKCNT+0x180>)
 8000388:	f023 0310 	bic.w	r3, r3, #16
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038e:	e01f      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <GPIO_CLKCNT+0x194>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_CLKCNT+0x146>
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <GPIO_CLKCNT+0x180>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <GPIO_CLKCNT+0x180>)
 800039e:	f023 0320 	bic.w	r3, r3, #32
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e014      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <GPIO_CLKCNT+0x198>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_CLKCNT+0x15c>
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a0b      	ldr	r2, [pc, #44]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80003b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e009      	b.n	80003d0 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a0f      	ldr	r2, [pc, #60]	; (80003fc <GPIO_CLKCNT+0x19c>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d105      	bne.n	80003d0 <GPIO_CLKCNT+0x170>
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <GPIO_CLKCNT+0x180>)
 80003ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40020000 	.word	0x40020000
 80003e0:	40023800 	.word	0x40023800
 80003e4:	40020400 	.word	0x40020400
 80003e8:	40020800 	.word	0x40020800
 80003ec:	40020c00 	.word	0x40020c00
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40021400 	.word	0x40021400
 80003f8:	40021800 	.word	0x40021800
 80003fc:	40021c00 	.word	0x40021c00

08000400 <GPIO_PORTCODE>:
 * @return            - the code of the given port
 *
 * @Note              -

 */
uint8_t GPIO_PORTCODE(GPIO_RegDef_t *pGPIOx){
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	uint8_t volatile portcode;
	uint32_t offset = (uint32_t)((uint32_t)pGPIOx - GPIOA_BASEADDR); /*calculate the offset from the base address*/
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 800040e:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000412:	60fb      	str	r3, [r7, #12]
	portcode = offset / 0x400;   /*portcode will range from 0 to 8 since the offset is a multiply of 400*/
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	0a9b      	lsrs	r3, r3, #10
 8000418:	b2db      	uxtb	r3, r3
 800041a:	72fb      	strb	r3, [r7, #11]
	return portcode;
 800041c:	7afb      	ldrb	r3, [r7, #11]
 800041e:	b2db      	uxtb	r3, r3
}
 8000420:	4618      	mov	r0, r3
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
	...

0800042c <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	2b03      	cmp	r3, #3
 800043e:	d820      	bhi.n	8000482 <GPIO_Init+0x56>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	795b      	ldrb	r3, [r3, #5]
 8000444:	461a      	mov	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	791b      	ldrb	r3, [r3, #4]
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	2103      	movs	r1, #3
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	43db      	mvns	r3, r3
 8000466:	4619      	mov	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	400a      	ands	r2, r1
 800046e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	6819      	ldr	r1, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	697a      	ldr	r2, [r7, #20]
 800047c:	430a      	orrs	r2, r1
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	e084      	b.n	800058c <GPIO_Init+0x160>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	795b      	ldrb	r3, [r3, #5]
 8000486:	2b04      	cmp	r3, #4
 8000488:	d11d      	bne.n	80004c6 <GPIO_Init+0x9a>
			/*configure the falling edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6812      	ldr	r2, [r2, #0]
 8000494:	601a      	str	r2, [r3, #0]
			EXTI ->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000496:	4b89      	ldr	r3, [pc, #548]	; (80006bc <GPIO_Init+0x290>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	7912      	ldrb	r2, [r2, #4]
 800049e:	4611      	mov	r1, r2
 80004a0:	2201      	movs	r2, #1
 80004a2:	408a      	lsls	r2, r1
 80004a4:	43d2      	mvns	r2, r2
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a84      	ldr	r2, [pc, #528]	; (80006bc <GPIO_Init+0x290>)
 80004aa:	400b      	ands	r3, r1
 80004ac:	6093      	str	r3, [r2, #8]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ae:	4b83      	ldr	r3, [pc, #524]	; (80006bc <GPIO_Init+0x290>)
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	7912      	ldrb	r2, [r2, #4]
 80004b6:	4611      	mov	r1, r2
 80004b8:	2201      	movs	r2, #1
 80004ba:	408a      	lsls	r2, r1
 80004bc:	4611      	mov	r1, r2
 80004be:	4a7f      	ldr	r2, [pc, #508]	; (80006bc <GPIO_Init+0x290>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	60d3      	str	r3, [r2, #12]
 80004c4:	e03d      	b.n	8000542 <GPIO_Init+0x116>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	795b      	ldrb	r3, [r3, #5]
 80004ca:	2b05      	cmp	r3, #5
 80004cc:	d11d      	bne.n	800050a <GPIO_Init+0xde>
			/*configure the rising edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	6812      	ldr	r2, [r2, #0]
 80004d8:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004da:	4b78      	ldr	r3, [pc, #480]	; (80006bc <GPIO_Init+0x290>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	7912      	ldrb	r2, [r2, #4]
 80004e2:	4611      	mov	r1, r2
 80004e4:	2201      	movs	r2, #1
 80004e6:	408a      	lsls	r2, r1
 80004e8:	43d2      	mvns	r2, r2
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a73      	ldr	r2, [pc, #460]	; (80006bc <GPIO_Init+0x290>)
 80004ee:	400b      	ands	r3, r1
 80004f0:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f2:	4b72      	ldr	r3, [pc, #456]	; (80006bc <GPIO_Init+0x290>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	4611      	mov	r1, r2
 8000502:	4a6e      	ldr	r2, [pc, #440]	; (80006bc <GPIO_Init+0x290>)
 8000504:	430b      	orrs	r3, r1
 8000506:	6093      	str	r3, [r2, #8]
 8000508:	e01b      	b.n	8000542 <GPIO_Init+0x116>
		}
		else{
			/*configure the falling and rising edge trigger registers*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	6812      	ldr	r2, [r2, #0]
 8000514:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000516:	4b69      	ldr	r3, [pc, #420]	; (80006bc <GPIO_Init+0x290>)
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	7912      	ldrb	r2, [r2, #4]
 800051e:	4611      	mov	r1, r2
 8000520:	2201      	movs	r2, #1
 8000522:	408a      	lsls	r2, r1
 8000524:	4611      	mov	r1, r2
 8000526:	4a65      	ldr	r2, [pc, #404]	; (80006bc <GPIO_Init+0x290>)
 8000528:	430b      	orrs	r3, r1
 800052a:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052c:	4b63      	ldr	r3, [pc, #396]	; (80006bc <GPIO_Init+0x290>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	4611      	mov	r1, r2
 800053c:	4a5f      	ldr	r2, [pc, #380]	; (80006bc <GPIO_Init+0x290>)
 800053e:	430b      	orrs	r3, r1
 8000540:	6093      	str	r3, [r2, #8]
		}

		/*configure the gpio port selection(SYSCONFIG_EXTI register)*/
		uint8_t tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;  /*which EXTICR to configure*/
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	089b      	lsrs	r3, r3, #2
 8000548:	74fb      	strb	r3, [r7, #19]
		uint8_t tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;  /*which Field of the EXTICR to configure*/
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	f003 0303 	and.w	r3, r3, #3
 8000552:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_PORTCODE(pGPIOHandle->pGPIOx);          /*the code that represents the port whoes pin is goning to trigger the interrupt*/
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff51 	bl	8000400 <GPIO_PORTCODE>
 800055e:	4603      	mov	r3, r0
 8000560:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[tmp1] = (portcode << tmp2 * 4);                  /*every field is four bits wide so  we multiply by 4*/
 8000562:	7c7a      	ldrb	r2, [r7, #17]
 8000564:	7cbb      	ldrb	r3, [r7, #18]
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	fa02 f103 	lsl.w	r1, r2, r3
 800056c:	4a54      	ldr	r2, [pc, #336]	; (80006c0 <GPIO_Init+0x294>)
 800056e:	7cfb      	ldrb	r3, [r7, #19]
 8000570:	3302      	adds	r3, #2
 8000572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/*configure the exti interrupt delivery(interrupt mask register)*/
		EXTI ->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000576:	4b51      	ldr	r3, [pc, #324]	; (80006bc <GPIO_Init+0x290>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a4d      	ldr	r2, [pc, #308]	; (80006bc <GPIO_Init+0x290>)
 8000588:	430b      	orrs	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	799b      	ldrb	r3, [r3, #6]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	689a      	ldr	r2, [r3, #8]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2103      	movs	r1, #3
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	400a      	ands	r2, r1
 80005ba:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6899      	ldr	r1, [r3, #8]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	79db      	ldrb	r3, [r3, #7]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68da      	ldr	r2, [r3, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	2103      	movs	r1, #3
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	400a      	ands	r2, r1
 80005fa:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	68d9      	ldr	r1, [r3, #12]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	430a      	orrs	r2, r1
 800060a:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7a1b      	ldrb	r3, [r3, #8]
 8000610:	461a      	mov	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	4619      	mov	r1, r3
 8000628:	2301      	movs	r3, #1
 800062a:	408b      	lsls	r3, r1
 800062c:	43db      	mvns	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	400a      	ands	r2, r1
 8000636:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6859      	ldr	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	430a      	orrs	r2, r1
 8000646:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	795b      	ldrb	r3, [r3, #5]
 800064c:	2b02      	cmp	r3, #2
 800064e:	d131      	bne.n	80006b4 <GPIO_Init+0x288>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	f003 0307 	and.w	r3, r3, #7
 8000660:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	7c3a      	ldrb	r2, [r7, #16]
 8000668:	3208      	adds	r2, #8
 800066a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	220f      	movs	r2, #15
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	43db      	mvns	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	7c3a      	ldrb	r2, [r7, #16]
 8000682:	4001      	ands	r1, r0
 8000684:	3208      	adds	r2, #8
 8000686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	7c3a      	ldrb	r2, [r7, #16]
 8000690:	3208      	adds	r2, #8
 8000692:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7a5b      	ldrb	r3, [r3, #9]
 800069a:	461a      	mov	r2, r3
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7c3a      	ldrb	r2, [r7, #16]
 80006ac:	4301      	orrs	r1, r0
 80006ae:	3208      	adds	r2, #8
 80006b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40013c00 	.word	0x40013c00
 80006c0:	40013800 	.word	0x40013800

080006c4 <I2C_Enable>:
static void I2C_MasterHandleTXEInterrupt(I2C_Handle *pI2CHandle );
static uint8_t I2C_GenerateDataReceiving(I2C_type *pI2Cx);

static void I2C_GenerateStartCondition(I2C_type *pI2Cx);
uint16_t count = 0;
void I2C_Enable(I2C_type *pI2Cx, uint8_t EnorDi){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE){
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d106      	bne.n	80006e4 <I2C_Enable+0x20>
      pI2Cx ->CR1 |= (1 << I2C_CR1_PE);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f043 0201 	orr.w	r2, r3, #1
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	601a      	str	r2, [r3, #0]
	}
	else{
		pI2Cx ->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 80006e2:	e005      	b.n	80006f0 <I2C_Enable+0x2c>
		pI2Cx ->CR1 &= ~(1 << I2C_CR1_PE);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f023 0201 	bic.w	r2, r3, #1
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
	...

080006fc <I2C_CLKCNT>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_CLKCNT(I2C_type *pI2Cx, uint8_t EnorDi){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d120      	bne.n	8000750 <I2C_CLKCNT+0x54>
		if(pI2Cx == I2C1){I2C1_CLKEN();}
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a22      	ldr	r2, [pc, #136]	; (800079c <I2C_CLKCNT+0xa0>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <I2C_CLKCNT+0x28>
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <I2C_CLKCNT+0xa4>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <I2C_CLKCNT+0xa4>)
 800071c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000720:	6413      	str	r3, [r2, #64]	; 0x40
		if(pI2Cx == I2C1){I2C1_CLKDI();}
		else if(pI2Cx == I2C2){I2C2_CLKDI();}
		else if(pI2Cx == I2C3){I2C3_CLKDI();}

	}
}
 8000722:	e035      	b.n	8000790 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C2){I2C2_CLKEN();}
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <I2C_CLKCNT+0xa8>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d106      	bne.n	800073a <I2C_CLKCNT+0x3e>
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <I2C_CLKCNT+0xa4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <I2C_CLKCNT+0xa4>)
 8000732:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000738:	e02a      	b.n	8000790 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C3){I2C3_CLKEN();}
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a1a      	ldr	r2, [pc, #104]	; (80007a8 <I2C_CLKCNT+0xac>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d126      	bne.n	8000790 <I2C_CLKCNT+0x94>
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <I2C_CLKCNT+0xa4>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <I2C_CLKCNT+0xa4>)
 8000748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800074e:	e01f      	b.n	8000790 <I2C_CLKCNT+0x94>
		if(pI2Cx == I2C1){I2C1_CLKDI();}
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <I2C_CLKCNT+0xa0>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <I2C_CLKCNT+0x6a>
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <I2C_CLKCNT+0xa4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <I2C_CLKCNT+0xa4>)
 800075e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000764:	e014      	b.n	8000790 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C2){I2C2_CLKDI();}
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <I2C_CLKCNT+0xa8>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d106      	bne.n	800077c <I2C_CLKCNT+0x80>
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <I2C_CLKCNT+0xa4>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <I2C_CLKCNT+0xa4>)
 8000774:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
}
 800077a:	e009      	b.n	8000790 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C3){I2C3_CLKDI();}
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <I2C_CLKCNT+0xac>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d105      	bne.n	8000790 <I2C_CLKCNT+0x94>
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <I2C_CLKCNT+0xa4>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <I2C_CLKCNT+0xa4>)
 800078a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40005400 	.word	0x40005400
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40005c00 	.word	0x40005c00
 80007a8:	40005800 	.word	0x40005800

080007ac <I2C_Init>:

void I2C_Init(I2C_Handle *pI2CHandle){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
* 4.Program the I2C_CR1 register to enable the peripheral
* 5.Set the START bit in the I2C_CR1 register to generate a Start condition
*/

/*reset the I2C first*/
  pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_SWRST);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007c2:	601a      	str	r2, [r3, #0]
  pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_SWRST);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80007d2:	601a      	str	r2, [r3, #0]

/*enabling the I2C peripheral*/
  I2C_Enable(pI2CHandle->pI2Cx, ENABLE);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2101      	movs	r1, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff72 	bl	80006c4 <I2C_Enable>

  uint32_t tmp;
/*configuring the freq field in CR2 first*/
  tmp = getSystemClock() / 1000000U;
 80007e0:	f000 f94a 	bl	8000a78 <getSystemClock>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4a5d      	ldr	r2, [pc, #372]	; (800095c <I2C_Init+0x1b0>)
 80007e8:	fba2 2303 	umull	r2, r3, r2, r3
 80007ec:	0c9b      	lsrs	r3, r3, #18
 80007ee:	617b      	str	r3, [r7, #20]
  pI2CHandle->pI2Cx->CR2 = (tmp & 0x3FU);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007fa:	605a      	str	r2, [r3, #4]

/*configuring the F/S if standard mode or fast mode then changing ccr value in CCR register*/
  /*configuring F/S*/
  if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SM){/*if it's standard mode*/
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	4a57      	ldr	r2, [pc, #348]	; (8000960 <I2C_Init+0x1b4>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d81c      	bhi.n	8000840 <I2C_Init+0x94>
	/*configure the mode*/
	pI2CHandle->pI2Cx->CCR &= ~(1 << I2C_CCR_F_S);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	69da      	ldr	r2, [r3, #28]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000814:	61da      	str	r2, [r3, #28]
	/*CCR = system clock / (2 * speed) */
	tmp = getSystemClock();
 8000816:	f000 f92f 	bl	8000a78 <getSystemClock>
 800081a:	6178      	str	r0, [r7, #20]
	uint32_t CCR_Value = tmp / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	fbb2 f3f3 	udiv	r3, r2, r3
 8000828:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->CCR |= (CCR_Value << I2C_CCR_CCR) & 0x3FU;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	69d9      	ldr	r1, [r3, #28]
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	430a      	orrs	r2, r1
 800083c:	61da      	str	r2, [r3, #28]
 800083e:	e042      	b.n	80008c6 <I2C_Init+0x11a>
  }
  else{/*fast mode*/
	/*configure the mode*/
	pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_F_S);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	69da      	ldr	r2, [r3, #28]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800084e:	61da      	str	r2, [r3, #28]
	/*configure the duty cycle*/
	tmp = (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY) & 0x1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->CCR |= tmp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	69d9      	ldr	r1, [r3, #28]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	430a      	orrs	r2, r1
 8000862:	61da      	str	r2, [r3, #28]
	/*configure the CCR field*/
	if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7a9b      	ldrb	r3, [r3, #10]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d115      	bne.n	8000898 <I2C_Init+0xec>
	  tmp = (getSystemClock() / (3 *pI2CHandle->I2C_Config.I2C_SCLSpeed)) & 0xFFFU;
 800086c:	f000 f904 	bl	8000a78 <getSystemClock>
 8000870:	4601      	mov	r1, r0
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	685a      	ldr	r2, [r3, #4]
 8000876:	4613      	mov	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000884:	617b      	str	r3, [r7, #20]
	  pI2CHandle->pI2Cx->CCR |= tmp;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	69d9      	ldr	r1, [r3, #28]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	430a      	orrs	r2, r1
 8000894:	61da      	str	r2, [r3, #28]
 8000896:	e016      	b.n	80008c6 <I2C_Init+0x11a>
	}
	else{
	  tmp = (getSystemClock() / (25 *pI2CHandle->I2C_Config.I2C_SCLSpeed)) & 0xFFFU;
 8000898:	f000 f8ee 	bl	8000a78 <getSystemClock>
 800089c:	4601      	mov	r1, r0
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	009a      	lsls	r2, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80008b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008b4:	617b      	str	r3, [r7, #20]
	  pI2CHandle->pI2Cx->CCR |= tmp;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	69d9      	ldr	r1, [r3, #28]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	61da      	str	r2, [r3, #28]
	}
  }

  /*configure the rise time*/
  if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SM){/*if it's standered mode*/
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	4a25      	ldr	r2, [pc, #148]	; (8000960 <I2C_Init+0x1b4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d110      	bne.n	80008f2 <I2C_Init+0x146>
	/*rise time = (system time period / maximum allowed rise time for sm) + 1*/
	uint32_t clock = getSystemClock();
 80008d0:	f000 f8d2 	bl	8000a78 <getSystemClock>
 80008d4:	60f8      	str	r0, [r7, #12]
	tmp = (clock / 1000000U) + 1;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4a20      	ldr	r2, [pc, #128]	; (800095c <I2C_Init+0x1b0>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	0c9b      	lsrs	r3, r3, #18
 80008e0:	3301      	adds	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->TRISE = tmp & 0x3FU;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008ee:	621a      	str	r2, [r3, #32]
 80008f0:	e012      	b.n	8000918 <I2C_Init+0x16c>
  }
  else{/*fast mode*/
		tmp = ((getSystemClock() * 300) / 1000000U) + 1;
 80008f2:	f000 f8c1 	bl	8000a78 <getSystemClock>
 80008f6:	4603      	mov	r3, r0
 80008f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	4a16      	ldr	r2, [pc, #88]	; (800095c <I2C_Init+0x1b0>)
 8000902:	fba2 2303 	umull	r2, r3, r2, r3
 8000906:	0c9b      	lsrs	r3, r3, #18
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
		pI2CHandle->pI2Cx->TRISE = tmp & 0x3FU;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000916:	621a      	str	r2, [r3, #32]
	}

  /*configure Device Own Address in case it's used as slave*/
  pI2CHandle ->pI2Cx->OAR1 |= (DEVICE_ADDRESS << 1);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	689a      	ldr	r2, [r3, #8]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f042 0202 	orr.w	r2, r2, #2
 8000926:	609a      	str	r2, [r3, #8]

  /*configuring the addressing mode*/
  tmp = pI2CHandle->I2C_Config.I2C_AddressMode;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7adb      	ldrb	r3, [r3, #11]
 800092c:	617b      	str	r3, [r7, #20]
  pI2CHandle->pI2Cx->OAR1 |= ((tmp << I2C_OAR1_ADD0) & 0x7FU);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6899      	ldr	r1, [r3, #8]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	430a      	orrs	r2, r1
 8000940:	609a      	str	r2, [r3, #8]

  /*enabling the ACK*/
    pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	431bde83 	.word	0x431bde83
 8000960:	000186a0 	.word	0x000186a0

08000964 <I2C_GetFlagStatus>:
	if(pI2Cx == I2C1){I2C1_CLKDI();}
	else if(pI2Cx == I2C2){I2C2_CLKDI();}
	else{I2C3_CLKDI();}
}

uint8_t I2C_GetFlagStatus(I2C_type *pI2Cx ,uint8_t FlagName){
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
	if(pI2Cx ->SR1 & FlagName){
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	78fb      	ldrb	r3, [r7, #3]
 8000976:	4013      	ands	r3, r2
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <I2C_GetFlagStatus+0x1c>
		return SET;
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <I2C_GetFlagStatus+0x1e>
	}
	return RESET;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <I2C_SlaveRecieveData>:
}

void I2C_SLaveSendData(I2C_Handle *pI2CHandle, uint8_t *pTxBuffer, uint8_t Len){

}
void I2C_SlaveRecieveData(I2C_Handle *pI2CHandle){
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /*1. waiting until the address is matched*/
/*not processing forward if the slave address is not matching ours*/
  while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000994:	bf00      	nop
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2102      	movs	r1, #2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ffe1 	bl	8000964 <I2C_GetFlagStatus>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f6      	beq.n	8000996 <I2C_SlaveRecieveData+0xa>
  I2C_ClearADDRFlag(pI2CHandle);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 f83b 	bl	8000a24 <I2C_ClearADDRFlag>
/*2. reading the data*/
  while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1_STOPF)){
 80009ae:	e010      	b.n	80009d2 <I2C_SlaveRecieveData+0x46>
    while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1_RxNE));
 80009b0:	bf00      	nop
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2106      	movs	r1, #6
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ffd3 	bl	8000964 <I2C_GetFlagStatus>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d0f6      	beq.n	80009b2 <I2C_SlaveRecieveData+0x26>
    uint8_t pTxBuffer = I2C_GenerateDataReceiving(pI2CHandle->pI2Cx);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f848 	bl	8000a5e <I2C_GenerateDataReceiving>
 80009ce:	4603      	mov	r3, r0
 80009d0:	737b      	strb	r3, [r7, #13]
  while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1_STOPF)){
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2104      	movs	r1, #4
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffc3 	bl	8000964 <I2C_GetFlagStatus>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0e5      	beq.n	80009b0 <I2C_SlaveRecieveData+0x24>
  }
  /*3. clearing the STOPF bit if stop condition is detected*/
  uint16_t dummyRead;
  if(pI2CHandle->pI2Cx->SR1 &= (1 << I2C_SR1_STOPF)){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6812      	ldr	r2, [r2, #0]
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	6153      	str	r3, [r2, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d009      	beq.n	8000a0c <I2C_SlaveRecieveData+0x80>
  dummyRead = pI2CHandle->pI2Cx->SR1;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	81fb      	strh	r3, [r7, #14]
  pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6812      	ldr	r2, [r2, #0]
 8000a0a:	601a      	str	r2, [r3, #0]
  }
  /*stop the communication after the current byte transfer*/
  pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a1a:	601a      	str	r2, [r3, #0]
  //GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <I2C_ClearADDRFlag>:
  SlaveAddress = SlaveAddress << 1;  /*making room for the R/nW bit*/
  SlaveAddress &= ~(1);               /*clearing LSB so it's a write condition*/
  pI2Cx->DR = SlaveAddress;
}

static void I2C_ClearADDRFlag(I2C_Handle *pI2CHandle){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
   uint16_t DummyRead;
/*wait for (EV6) ADDR bit in SR1 to sit*/
  while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000a2c:	bf00      	nop
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2102      	movs	r1, #2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff95 	bl	8000964 <I2C_GetFlagStatus>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0f6      	beq.n	8000a2e <I2C_ClearADDRFlag+0xa>
  /*clearing (EV6) ADDR flag*/
  DummyRead = pI2CHandle->pI2Cx->SR1;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	81fb      	strh	r3, [r7, #14]
  DummyRead = pI2CHandle->pI2Cx->SR2;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	81fb      	strh	r3, [r7, #14]
  DummyRead++;  /*to stop compiler warning about set but not used*/
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	3301      	adds	r3, #1
 8000a54:	81fb      	strh	r3, [r7, #14]
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <I2C_GenerateDataReceiving>:


static uint8_t I2C_GenerateDataReceiving(I2C_type *pI2Cx){
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  return pI2Cx->DR;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	b2db      	uxtb	r3, r3
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
	...

08000a78 <getSystemClock>:
#include "RCC_driver.h"

uint16_t AHB_PRESCALERS[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB_PRESCALERS[4] = {2, 4, 8, 16};

uint32_t getSystemClock(void){
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
uint8_t PLLP1 = ((RCC->PLLCFGR >> 16) & 0x3U);
 8000a7e:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <getSystemClock+0xd4>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	0c1b      	lsrs	r3, r3, #16
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	75bb      	strb	r3, [r7, #22]
uint8_t PLLP;
uint32_t fPLL,fPLLR;
switch(PLLP1){
 8000a8c:	7dbb      	ldrb	r3, [r7, #22]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d816      	bhi.n	8000ac0 <getSystemClock+0x48>
 8000a92:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <getSystemClock+0x20>)
 8000a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a98:	08000aa9 	.word	0x08000aa9
 8000a9c:	08000aaf 	.word	0x08000aaf
 8000aa0:	08000ab5 	.word	0x08000ab5
 8000aa4:	08000abb 	.word	0x08000abb
  case(0):
		  PLLP = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	75fb      	strb	r3, [r7, #23]
          break;
 8000aac:	e008      	b.n	8000ac0 <getSystemClock+0x48>
  case(1):
		  PLLP = 4;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	75fb      	strb	r3, [r7, #23]
          break;
 8000ab2:	e005      	b.n	8000ac0 <getSystemClock+0x48>
  case(2):
		  PLLP = 6;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	75fb      	strb	r3, [r7, #23]
          break;
 8000ab8:	e002      	b.n	8000ac0 <getSystemClock+0x48>
  case(3):
		  PLLP = 8;
 8000aba:	2308      	movs	r3, #8
 8000abc:	75fb      	strb	r3, [r7, #23]
          break;
 8000abe:	bf00      	nop
}
uint16_t PLLN = ((RCC ->PLLCFGR >> 6) & 0x1FF);
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <getSystemClock+0xd4>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	099b      	lsrs	r3, r3, #6
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000acc:	82bb      	strh	r3, [r7, #20]
uint16_t PLLM = (RCC ->PLLCFGR & 0x3FU);
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <getSystemClock+0xd4>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ad8:	827b      	strh	r3, [r7, #18]
uint16_t PLLR = (RCC ->PLLCFGR >> 28) & 0x7U;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <getSystemClock+0xd4>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	0f1b      	lsrs	r3, r3, #28
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	823b      	strh	r3, [r7, #16]
uint32_t fVCO = HSI_CLOCK * (PLLN / PLLM); /*HSI is used as pll input*/
 8000ae8:	8aba      	ldrh	r2, [r7, #20]
 8000aea:	8a7b      	ldrh	r3, [r7, #18]
 8000aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <getSystemClock+0xd8>)
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	60fb      	str	r3, [r7, #12]
	switch (RCC ->CFGR >> 2){
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <getSystemClock+0xd4>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d81c      	bhi.n	8000b40 <getSystemClock+0xc8>
 8000b06:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <getSystemClock+0x94>)
 8000b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0c:	08000b1d 	.word	0x08000b1d
 8000b10:	08000b21 	.word	0x08000b21
 8000b14:	08000b25 	.word	0x08000b25
 8000b18:	08000b33 	.word	0x08000b33
		case(0) : /*HSI is used*/
			return HSI_CLOCK; /*HSI clock speed*/
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <getSystemClock+0xd8>)
 8000b1e:	e00f      	b.n	8000b40 <getSystemClock+0xc8>
		case(1) : /*HSE is used*/
			return HSE_CLOCK;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <getSystemClock+0xdc>)
 8000b22:	e00d      	b.n	8000b40 <getSystemClock+0xc8>
		case(2) : /*PLL is used*/
		   fPLL = fVCO * PLLP;
 8000b24:	7dfa      	ldrb	r2, [r7, #23]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	fb02 f303 	mul.w	r3, r2, r3
 8000b2c:	607b      	str	r3, [r7, #4]
		  return fPLL;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	e006      	b.n	8000b40 <getSystemClock+0xc8>
		case(3) : /*PLL_R is used*/
			/*Clock frequancy = VCO / PLLR*/
			 fPLLR = fVCO / PLLR;
 8000b32:	8a3b      	ldrh	r3, [r7, #16]
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	60bb      	str	r3, [r7, #8]
			return fPLLR;
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	e7ff      	b.n	8000b40 <getSystemClock+0xc8>
	}
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	371c      	adds	r7, #28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	00f42400 	.word	0x00f42400
 8000b54:	007a1200 	.word	0x007a1200

08000b58 <main>:
#include "GPIO_driver.h"
#include "I2C_driver.h"
#include "RCC_driver.h"
#include "bsp.h"

int main(void){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
/*configuring the LED*/
  GPIO_Handle_t GPIOLed;
  GPIOLed.pGPIOx = GPIOA;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <main+0x74>)
 8000b60:	617b      	str	r3, [r7, #20]
  GPIOLed.GPIO_PinConfig.GPIO_PinNumber =  GPIO_PIN_NO_5;
 8000b62:	2305      	movs	r3, #5
 8000b64:	763b      	strb	r3, [r7, #24]
  GPIOLed.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_OUT;
 8000b66:	2301      	movs	r3, #1
 8000b68:	767b      	strb	r3, [r7, #25]
  GPIOLed.GPIO_PinConfig.GPIO_PinSpeed  =  GPIO_SPEED_FAST;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	76bb      	strb	r3, [r7, #26]
  GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	773b      	strb	r3, [r7, #28]
  GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 8000b72:	2300      	movs	r3, #0
 8000b74:	76fb      	strb	r3, [r7, #27]
  GPIO_CLKCNT(GPIOA,ENABLE);
 8000b76:	2101      	movs	r1, #1
 8000b78:	4814      	ldr	r0, [pc, #80]	; (8000bcc <main+0x74>)
 8000b7a:	f7ff fb71 	bl	8000260 <GPIO_CLKCNT>
  GPIO_Init(&GPIOLed);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fc52 	bl	800042c <GPIO_Init>

  uint8_t data[3];
  I2C_Handle test;
  test.pI2Cx = I2C1;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <main+0x78>)
 8000b8a:	607b      	str	r3, [r7, #4]
  test.I2C_Config.I2C_SCLSpeed = I2C_SCL_SM;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <main+0x7c>)
 8000b8e:	60bb      	str	r3, [r7, #8]
  test.I2C_Config.I2C_DeviceAddress = 0x61U;
 8000b90:	2361      	movs	r3, #97	; 0x61
 8000b92:	733b      	strb	r3, [r7, #12]
  test.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000b94:	2301      	movs	r3, #1
 8000b96:	737b      	strb	r3, [r7, #13]
  test.I2C_Config.I2C_AddressMode = I2C_AddressMode_7bit;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]
  I2C_CLKCNT(test.pI2Cx, ENABLE);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fdab 	bl	80006fc <I2C_CLKCNT>
  I2C_Init(&test);
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fdff 	bl	80007ac <I2C_Init>
  /*configuring the pins first*/
  I2C1_GPIOInit(GPIOB, GPIO_PIN_NO_6, 4);  /*scl*/
 8000bae:	2204      	movs	r2, #4
 8000bb0:	2106      	movs	r1, #6
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <main+0x80>)
 8000bb4:	f7ff fb26 	bl	8000204 <I2C1_GPIOInit>
  I2C1_GPIOInit(GPIOB, GPIO_PIN_NO_7, 4);  /*sda*/
 8000bb8:	2204      	movs	r2, #4
 8000bba:	2107      	movs	r1, #7
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <main+0x80>)
 8000bbe:	f7ff fb21 	bl	8000204 <I2C1_GPIOInit>
  while(1){
    I2C_SlaveRecieveData(&test);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fee1 	bl	800098c <I2C_SlaveRecieveData>
 8000bca:	e7fa      	b.n	8000bc2 <main+0x6a>
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	000186a0 	.word	0x000186a0
 8000bd8:	40020400 	.word	0x40020400

08000bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	; (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0a:	f000 f811 	bl	8000c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0e:	f7ff ffa3 	bl	8000b58 <main>

08000c12 <LoopForever>:

LoopForever:
  b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   r0, =_estack
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c20:	08000c98 	.word	0x08000c98
  ldr r2, =_sbss
 8000c24:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c28:	2000001c 	.word	0x2000001c

08000c2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <__libc_init_array>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	4d0d      	ldr	r5, [pc, #52]	; (8000c68 <__libc_init_array+0x38>)
 8000c34:	4c0d      	ldr	r4, [pc, #52]	; (8000c6c <__libc_init_array+0x3c>)
 8000c36:	1b64      	subs	r4, r4, r5
 8000c38:	10a4      	asrs	r4, r4, #2
 8000c3a:	2600      	movs	r6, #0
 8000c3c:	42a6      	cmp	r6, r4
 8000c3e:	d109      	bne.n	8000c54 <__libc_init_array+0x24>
 8000c40:	4d0b      	ldr	r5, [pc, #44]	; (8000c70 <__libc_init_array+0x40>)
 8000c42:	4c0c      	ldr	r4, [pc, #48]	; (8000c74 <__libc_init_array+0x44>)
 8000c44:	f000 f818 	bl	8000c78 <_init>
 8000c48:	1b64      	subs	r4, r4, r5
 8000c4a:	10a4      	asrs	r4, r4, #2
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	42a6      	cmp	r6, r4
 8000c50:	d105      	bne.n	8000c5e <__libc_init_array+0x2e>
 8000c52:	bd70      	pop	{r4, r5, r6, pc}
 8000c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c58:	4798      	blx	r3
 8000c5a:	3601      	adds	r6, #1
 8000c5c:	e7ee      	b.n	8000c3c <__libc_init_array+0xc>
 8000c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c62:	4798      	blx	r3
 8000c64:	3601      	adds	r6, #1
 8000c66:	e7f2      	b.n	8000c4e <__libc_init_array+0x1e>
 8000c68:	08000c90 	.word	0x08000c90
 8000c6c:	08000c90 	.word	0x08000c90
 8000c70:	08000c90 	.word	0x08000c90
 8000c74:	08000c94 	.word	0x08000c94

08000c78 <_init>:
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7a:	bf00      	nop
 8000c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7e:	bc08      	pop	{r3}
 8000c80:	469e      	mov	lr, r3
 8000c82:	4770      	bx	lr

08000c84 <_fini>:
 8000c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c86:	bf00      	nop
 8000c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8a:	bc08      	pop	{r3}
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	4770      	bx	lr
