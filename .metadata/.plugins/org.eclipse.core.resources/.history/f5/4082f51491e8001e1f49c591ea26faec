/*
 * rtc.c
 *
 *  Created on: Mar 22, 2024
 *      Author: Sayed
 */

#include "GPIO_driver.h"
#include "I2C_driver.h"
#include "RTC_driver.h"
#include "bsp.h"


#define I2C_CR1_PE_Pos         0U
#define I2C_CR1_PE_Msk         (0x1UL << I2C_CR1_PE_Pos)
#define I2C_CR1_SWRST_Pos      15U
#define I2C_CR1_SWRST_Msk      (0x1UL << I2C_CR1_SWRST_Pos)
#define SLAVE_ADDRESS 	0x68U

static void I2C_Config(I2C_Handle *pI2C_Handle);
void I2C_init(void);
uint8_t data[7];
int main(void){
	I2C_Handle	RTC;
	I2C_init();
	while(1){
		delay(50);
		RTC_ReadtTime(&RTC, SLAVE_ADDRESS, data);
	}
}




static void I2C_Config(I2C_Handle *pI2C_Handle){
	/*configuring the pins first*/
	I2C1_GPIOInit(GPIOB, GPIO_PIN_NO_6, 4);  /*SCL*/
	I2C1_GPIOInit(GPIOB, GPIO_PIN_NO_7, 4);  /*SDA*/
	pI2C_Handle->pI2Cx = I2C1;
	pI2C_Handle->I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
	pI2C_Handle->I2C_Config.I2C_AddressMode = I2C_AddressMode_7bit;
	pI2C_Handle->I2C_Config.I2C_DeviceAddress = 0x67U;
	pI2C_Handle->I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
	pI2C_Handle->I2C_Config.I2C_SCLSpeed = I2C_SCL_SM;
	I2C_CLKCNT(pI2C_Handle->pI2Cx, ENABLE);
	I2C_Init(pI2C_Handle);
}

void I2C_init(void) {
    //Enable GPIOB clock
    RCC->AHB1ENR |= (1 << RCC_AHB1ENR_GPIOBEN);

    // Enable I2C1 clock
    RCC->APB1ENR |= (1 << RCC_APB1ENR_I2C1EN);

    // Configure I2C1 pins (PB6: SCL, PB7: SDA)
    GPIOB->MODER |= ((2 << 6) | (2 << 7)); // Alternate function mode
    GPIOB->AFR[0] |= (4 << (6 * 4)) | (4 << (7 * 4)); // AF4 (I2C1) for PB6 and PB7
    GPIOB->OTYPER |= (1 << 6) | (1 << 7); // Open-drain
    GPIOB->OSPEEDER |= (3 << 6) | (3 << 7); // High speed
    GPIOB->PUPDR |= (1 << 6) | (1 << 7); // Pull-up

    // Configure I2C1 peripheral
    I2C1->CR1 &= ~I2C_CR1_PE_Msk; // Disable I2C1 peripheral
    I2C1->CR1 |= I2C_CR1_SWRST_Msk; // Software reset
    I2C1->CR1 &= ~I2C_CR1_SWRST_Msk; // Release software reset
    I2C1->CR2 = 0; // Clear CR2 register
    I2C1->CCR = 40; // SCL frequency = PCLK1 / (4 * (CCR+1)) = 100kHz (assuming PCLK1 = 16MHz)
    I2C1->TRISE = 17; // Maximum rise time in standard mode
    I2C1->CR1 |= I2C_CR1_PE_Msk; // Enable I2C1 peripheral
}
