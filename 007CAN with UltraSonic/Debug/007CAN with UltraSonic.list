
007CAN with UltraSonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005174  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08005348  08005348  00015348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800574c  0800574c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800574c  0800574c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800574c  0800574c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005750  08005750  00015750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001e0  08005934  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08005934  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031cf  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c0d  00000000  00000000  000233df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c8  00000000  00000000  00023ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000250  00000000  00000000  000242b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003778  00000000  00000000  00024508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000036a5  00000000  00000000  00027c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000d04e  00000000  00000000  0002b325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00038373  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff0  00000000  00000000  000383c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0003a3b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  0003a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800532c 	.word	0x0800532c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800532c 	.word	0x0800532c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <systick_init>:
 */
#include "GPIO_driver.h"
#include "bsp.h"
#include "SPI_driver.h"

void systick_init(uint16_t Ticks_PerSecond){
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
SysTick -> CVR = 0x1U;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <systick_init+0x4c>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	609a      	str	r2, [r3, #8]
SysTick ->RVR = SysClock / Ticks_PerSecond;
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <systick_init+0x4c>)
 8000c9c:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <systick_init+0x50>)
 8000c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca2:	6053      	str	r3, [r2, #4]
SysTick ->CSR |= (1 << 0);
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <systick_init+0x4c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <systick_init+0x4c>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6013      	str	r3, [r2, #0]
SysTick ->CSR |= (1 << 1);
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <systick_init+0x4c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <systick_init+0x4c>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	6013      	str	r3, [r2, #0]
SysTick ->CSR |= (1 << 2);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <systick_init+0x4c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <systick_init+0x4c>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e010 	.word	0xe000e010
 8000cd8:	00f42400 	.word	0x00f42400

08000cdc <I2C1_GPIOInit>:
SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
GPIO_CLKCNT(pGPIOx, ENABLE);
GPIO_Init(&SPIPins);
}

void I2C1_GPIOInit(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t ALTFN_Mode){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	70fb      	strb	r3, [r7, #3]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	70bb      	strb	r3, [r7, #2]
GPIO_Handle_t I2CPins;
I2CPins.pGPIOx = pGPIOx;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	60fb      	str	r3, [r7, #12]
I2CPins.GPIO_PinConfig.GPIO_PinNumber =  PinNumber;
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	743b      	strb	r3, [r7, #16]
I2CPins.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_ALTFN;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	747b      	strb	r3, [r7, #17]
I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode   =  ALTFN_Mode;
 8000cf8:	78bb      	ldrb	r3, [r7, #2]
 8000cfa:	757b      	strb	r3, [r7, #21]
I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	753b      	strb	r3, [r7, #20]
I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_PIN_PU;
 8000d00:	2301      	movs	r3, #1
 8000d02:	74fb      	strb	r3, [r7, #19]
I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPOI_SPEED_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	74bb      	strb	r3, [r7, #18]
GPIO_CLKCNT(pGPIOx, ENABLE);
 8000d08:	2101      	movs	r1, #1
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f89a 	bl	8000e44 <GPIO_CLKCNT>
pGPIOx->LCKR &= ~(1 << PinNumber);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	78fa      	ldrb	r2, [r7, #3]
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1c:	43d2      	mvns	r2, r2
 8000d1e:	401a      	ands	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	61da      	str	r2, [r3, #28]
GPIO_Init(&I2CPins);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f971 	bl	8001010 <GPIO_Init>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <USART_GPIOInit>:

void USART_GPIOInit(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t ALTFN_Mode){
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	70fb      	strb	r3, [r7, #3]
 8000d42:	4613      	mov	r3, r2
 8000d44:	70bb      	strb	r3, [r7, #2]
  GPIO_Handle_t USARTpins;
  USARTpins.pGPIOx = pGPIOx;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]
  USARTpins.GPIO_PinConfig.GPIO_PinNumber =  PinNumber;
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	743b      	strb	r3, [r7, #16]
  USARTpins.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_ALTFN;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	747b      	strb	r3, [r7, #17]
  USARTpins.GPIO_PinConfig.GPIO_PinAltFunMode   =  ALTFN_Mode;
 8000d52:	78bb      	ldrb	r3, [r7, #2]
 8000d54:	757b      	strb	r3, [r7, #21]
  USARTpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000d56:	2300      	movs	r3, #0
 8000d58:	753b      	strb	r3, [r7, #20]
  USARTpins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_PIN_PU;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	74fb      	strb	r3, [r7, #19]
  USARTpins.GPIO_PinConfig.GPIO_PinSpeed = GPOI_SPEED_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	74bb      	strb	r3, [r7, #18]
  GPIO_CLKCNT(pGPIOx, ENABLE);
 8000d62:	2101      	movs	r1, #1
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 f86d 	bl	8000e44 <GPIO_CLKCNT>
  pGPIOx->LCKR &= ~(1 << PinNumber);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	78fa      	ldrb	r2, [r7, #3]
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	43d2      	mvns	r2, r2
 8000d78:	401a      	ands	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	61da      	str	r2, [r3, #28]
  GPIO_Init(&USARTpins);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f944 	bl	8001010 <GPIO_Init>
}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <GPIO_CAN1Init>:
	  SW.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	  GPIO_CLKCNT(SW.pGPIOx, ENABLE);
	  GPIO_Init(&SW);
}

void GPIO_CAN1Init(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t ALTFN_Mode){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	70fb      	strb	r3, [r7, #3]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	70bb      	strb	r3, [r7, #2]
	GPIO_Handle_t CANPins;
	CANPins.pGPIOx = pGPIOx;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	60fb      	str	r3, [r7, #12]
	CANPins.GPIO_PinConfig.GPIO_PinNumber =  PinNumber;
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	743b      	strb	r3, [r7, #16]
	CANPins.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_ALTFN;
 8000da8:	2302      	movs	r3, #2
 8000daa:	747b      	strb	r3, [r7, #17]
	CANPins.GPIO_PinConfig.GPIO_PinAltFunMode   =  ALTFN_Mode;
 8000dac:	78bb      	ldrb	r3, [r7, #2]
 8000dae:	757b      	strb	r3, [r7, #21]
	CANPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000db0:	2300      	movs	r3, #0
 8000db2:	753b      	strb	r3, [r7, #20]
	CANPins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 8000db4:	2300      	movs	r3, #0
 8000db6:	74fb      	strb	r3, [r7, #19]
	GPIO_CLKCNT(pGPIOx, ENABLE);
 8000db8:	2101      	movs	r1, #1
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f842 	bl	8000e44 <GPIO_CLKCNT>
	GPIO_Init(&CANPins);
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f923 	bl	8001010 <GPIO_Init>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <GPIO_LEDInit>:

void GPIO_LEDInit(){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOLed;
	GPIOLed.pGPIOx = GPIOA;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <GPIO_LEDInit+0x38>)
 8000ddc:	607b      	str	r3, [r7, #4]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber =  GPIO_PIN_NO_5;
 8000dde:	2305      	movs	r3, #5
 8000de0:	723b      	strb	r3, [r7, #8]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_OUT;
 8000de2:	2301      	movs	r3, #1
 8000de4:	727b      	strb	r3, [r7, #9]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed  =  GPIO_SPEED_FAST;
 8000de6:	2302      	movs	r3, #2
 8000de8:	72bb      	strb	r3, [r7, #10]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000dea:	2300      	movs	r3, #0
 8000dec:	733b      	strb	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 8000dee:	2300      	movs	r3, #0
 8000df0:	72fb      	strb	r3, [r7, #11]
	GPIO_CLKCNT(GPIOA,ENABLE);
 8000df2:	2101      	movs	r1, #1
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <GPIO_LEDInit+0x38>)
 8000df6:	f000 f825 	bl	8000e44 <GPIO_CLKCNT>
	GPIO_Init(&GPIOLed);
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f907 	bl	8001010 <GPIO_Init>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40020000 	.word	0x40020000

08000e10 <delay>:
void delay(uint32_t ms){
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < (ms * (SysClock / 1000)); i++){
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	e002      	b.n	8000e24 <delay+0x14>
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3301      	adds	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3f4      	bcc.n	8000e1e <delay+0xe>
		;
	}
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <GPIO_CLKCNT>:
 *
 * @Note              -  none

 */
void GPIO_CLKCNT(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d157      	bne.n	8000f06 <GPIO_CLKCNT+0xc2>
	{
	  if(pGPIOx == GPIOA){GPIOA_CLKEN;}
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a59      	ldr	r2, [pc, #356]	; (8000fc0 <GPIO_CLKCNT+0x17c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d106      	bne.n	8000e6c <GPIO_CLKCNT+0x28>
 8000e5e:	4b59      	ldr	r3, [pc, #356]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a58      	ldr	r2, [pc, #352]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
	}
}
 8000e6a:	e0a3      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKEN;}
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a56      	ldr	r2, [pc, #344]	; (8000fc8 <GPIO_CLKCNT+0x184>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d106      	bne.n	8000e82 <GPIO_CLKCNT+0x3e>
 8000e74:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a52      	ldr	r2, [pc, #328]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e80:	e098      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKEN;}
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <GPIO_CLKCNT+0x188>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d106      	bne.n	8000e98 <GPIO_CLKCNT+0x54>
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a4d      	ldr	r2, [pc, #308]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e96:	e08d      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKEN;}
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a4d      	ldr	r2, [pc, #308]	; (8000fd0 <GPIO_CLKCNT+0x18c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d106      	bne.n	8000eae <GPIO_CLKCNT+0x6a>
 8000ea0:	4b48      	ldr	r3, [pc, #288]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a47      	ldr	r2, [pc, #284]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eac:	e082      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKEN;}
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <GPIO_CLKCNT+0x190>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d106      	bne.n	8000ec4 <GPIO_CLKCNT+0x80>
 8000eb6:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a42      	ldr	r2, [pc, #264]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ec2:	e077      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKEN;}
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a44      	ldr	r2, [pc, #272]	; (8000fd8 <GPIO_CLKCNT+0x194>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d106      	bne.n	8000eda <GPIO_CLKCNT+0x96>
 8000ecc:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a3c      	ldr	r2, [pc, #240]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ed2:	f043 0320 	orr.w	r3, r3, #32
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ed8:	e06c      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKEN;}
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a3f      	ldr	r2, [pc, #252]	; (8000fdc <GPIO_CLKCNT+0x198>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d106      	bne.n	8000ef0 <GPIO_CLKCNT+0xac>
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a37      	ldr	r2, [pc, #220]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eee:	e061      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKEN;}
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a3b      	ldr	r2, [pc, #236]	; (8000fe0 <GPIO_CLKCNT+0x19c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d15d      	bne.n	8000fb4 <GPIO_CLKCNT+0x170>
 8000ef8:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f04:	e056      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  if(pGPIOx == GPIOA){GPIOA_CLKDI;}
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a2d      	ldr	r2, [pc, #180]	; (8000fc0 <GPIO_CLKCNT+0x17c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d106      	bne.n	8000f1c <GPIO_CLKCNT+0xd8>
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a2c      	ldr	r2, [pc, #176]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f1a:	e04b      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKDI;}
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a2a      	ldr	r2, [pc, #168]	; (8000fc8 <GPIO_CLKCNT+0x184>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d106      	bne.n	8000f32 <GPIO_CLKCNT+0xee>
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a26      	ldr	r2, [pc, #152]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f2a:	f023 0302 	bic.w	r3, r3, #2
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f30:	e040      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKDI;}
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a25      	ldr	r2, [pc, #148]	; (8000fcc <GPIO_CLKCNT+0x188>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d106      	bne.n	8000f48 <GPIO_CLKCNT+0x104>
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f40:	f023 0304 	bic.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f46:	e035      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKDI;}
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <GPIO_CLKCNT+0x18c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d106      	bne.n	8000f5e <GPIO_CLKCNT+0x11a>
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f56:	f023 0308 	bic.w	r3, r3, #8
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f5c:	e02a      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <GPIO_CLKCNT+0x190>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d106      	bne.n	8000f74 <GPIO_CLKCNT+0x130>
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f6c:	f023 0310 	bic.w	r3, r3, #16
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f72:	e01f      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <GPIO_CLKCNT+0x194>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d106      	bne.n	8000f8a <GPIO_CLKCNT+0x146>
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f82:	f023 0320 	bic.w	r3, r3, #32
 8000f86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f88:	e014      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <GPIO_CLKCNT+0x198>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d106      	bne.n	8000fa0 <GPIO_CLKCNT+0x15c>
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f9e:	e009      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <GPIO_CLKCNT+0x19c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d105      	bne.n	8000fb4 <GPIO_CLKCNT+0x170>
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40021400 	.word	0x40021400
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40021c00 	.word	0x40021c00

08000fe4 <GPIO_PORTCODE>:
 * @return            - the code of the given port
 *
 * @Note              -

 */
static uint8_t GPIO_PORTCODE(GPIO_RegDef_t *pGPIOx){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint8_t volatile portcode;
	uint32_t offset = (uint32_t)((uint32_t)pGPIOx - GPIOA_BASEADDR); /*calculate the offset from the base address*/
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000ff2:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000ff6:	60fb      	str	r3, [r7, #12]
	portcode = offset / 0x400;   /*portcode will range from 0 to 8 since the offset is a multiply of 400*/
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	0a9b      	lsrs	r3, r3, #10
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	72fb      	strb	r3, [r7, #11]
	return portcode;
 8001000:	7afb      	ldrb	r3, [r7, #11]
 8001002:	b2db      	uxtb	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	795b      	ldrb	r3, [r3, #5]
 8001020:	2b03      	cmp	r3, #3
 8001022:	d820      	bhi.n	8001066 <GPIO_Init+0x56>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	461a      	mov	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	791b      	ldrb	r3, [r3, #4]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2103      	movs	r1, #3
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	4619      	mov	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	400a      	ands	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6819      	ldr	r1, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	430a      	orrs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e084      	b.n	8001170 <GPIO_Init+0x160>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	795b      	ldrb	r3, [r3, #5]
 800106a:	2b04      	cmp	r3, #4
 800106c:	d11d      	bne.n	80010aa <GPIO_Init+0x9a>
			/*configure the falling edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6812      	ldr	r2, [r2, #0]
 8001078:	601a      	str	r2, [r3, #0]
			EXTI ->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800107a:	4b89      	ldr	r3, [pc, #548]	; (80012a0 <GPIO_Init+0x290>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	7912      	ldrb	r2, [r2, #4]
 8001082:	4611      	mov	r1, r2
 8001084:	2201      	movs	r2, #1
 8001086:	408a      	lsls	r2, r1
 8001088:	43d2      	mvns	r2, r2
 800108a:	4611      	mov	r1, r2
 800108c:	4a84      	ldr	r2, [pc, #528]	; (80012a0 <GPIO_Init+0x290>)
 800108e:	400b      	ands	r3, r1
 8001090:	6093      	str	r3, [r2, #8]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001092:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <GPIO_Init+0x290>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	7912      	ldrb	r2, [r2, #4]
 800109a:	4611      	mov	r1, r2
 800109c:	2201      	movs	r2, #1
 800109e:	408a      	lsls	r2, r1
 80010a0:	4611      	mov	r1, r2
 80010a2:	4a7f      	ldr	r2, [pc, #508]	; (80012a0 <GPIO_Init+0x290>)
 80010a4:	430b      	orrs	r3, r1
 80010a6:	60d3      	str	r3, [r2, #12]
 80010a8:	e03d      	b.n	8001126 <GPIO_Init+0x116>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	795b      	ldrb	r3, [r3, #5]
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	d11d      	bne.n	80010ee <GPIO_Init+0xde>
			/*configure the rising edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010be:	4b78      	ldr	r3, [pc, #480]	; (80012a0 <GPIO_Init+0x290>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	7912      	ldrb	r2, [r2, #4]
 80010c6:	4611      	mov	r1, r2
 80010c8:	2201      	movs	r2, #1
 80010ca:	408a      	lsls	r2, r1
 80010cc:	43d2      	mvns	r2, r2
 80010ce:	4611      	mov	r1, r2
 80010d0:	4a73      	ldr	r2, [pc, #460]	; (80012a0 <GPIO_Init+0x290>)
 80010d2:	400b      	ands	r3, r1
 80010d4:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010d6:	4b72      	ldr	r3, [pc, #456]	; (80012a0 <GPIO_Init+0x290>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	7912      	ldrb	r2, [r2, #4]
 80010de:	4611      	mov	r1, r2
 80010e0:	2201      	movs	r2, #1
 80010e2:	408a      	lsls	r2, r1
 80010e4:	4611      	mov	r1, r2
 80010e6:	4a6e      	ldr	r2, [pc, #440]	; (80012a0 <GPIO_Init+0x290>)
 80010e8:	430b      	orrs	r3, r1
 80010ea:	6093      	str	r3, [r2, #8]
 80010ec:	e01b      	b.n	8001126 <GPIO_Init+0x116>
		}
		else{
			/*configure the falling and rising edge trigger registers*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010fa:	4b69      	ldr	r3, [pc, #420]	; (80012a0 <GPIO_Init+0x290>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	7912      	ldrb	r2, [r2, #4]
 8001102:	4611      	mov	r1, r2
 8001104:	2201      	movs	r2, #1
 8001106:	408a      	lsls	r2, r1
 8001108:	4611      	mov	r1, r2
 800110a:	4a65      	ldr	r2, [pc, #404]	; (80012a0 <GPIO_Init+0x290>)
 800110c:	430b      	orrs	r3, r1
 800110e:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001110:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <GPIO_Init+0x290>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	7912      	ldrb	r2, [r2, #4]
 8001118:	4611      	mov	r1, r2
 800111a:	2201      	movs	r2, #1
 800111c:	408a      	lsls	r2, r1
 800111e:	4611      	mov	r1, r2
 8001120:	4a5f      	ldr	r2, [pc, #380]	; (80012a0 <GPIO_Init+0x290>)
 8001122:	430b      	orrs	r3, r1
 8001124:	6093      	str	r3, [r2, #8]
		}

		/*configure the gpio port selection(SYSCONFIG_EXTI register)*/
		uint8_t tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;  /*which EXTICR to configure*/
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	791b      	ldrb	r3, [r3, #4]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	74fb      	strb	r3, [r7, #19]
		uint8_t tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;  /*which Field of the EXTICR to configure*/
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	791b      	ldrb	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_PORTCODE(pGPIOHandle->pGPIOx);          /*the code that represents the port whoes pin is goning to trigger the interrupt*/
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff51 	bl	8000fe4 <GPIO_PORTCODE>
 8001142:	4603      	mov	r3, r0
 8001144:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[tmp1] = (portcode << tmp2 * 4);                  /*every field is four bits wide so  we multiply by 4*/
 8001146:	7c7a      	ldrb	r2, [r7, #17]
 8001148:	7cbb      	ldrb	r3, [r7, #18]
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	fa02 f103 	lsl.w	r1, r2, r3
 8001150:	4a54      	ldr	r2, [pc, #336]	; (80012a4 <GPIO_Init+0x294>)
 8001152:	7cfb      	ldrb	r3, [r7, #19]
 8001154:	3302      	adds	r3, #2
 8001156:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/*configure the exti interrupt delivery(interrupt mask register)*/
		EXTI ->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800115a:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <GPIO_Init+0x290>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	7912      	ldrb	r2, [r2, #4]
 8001162:	4611      	mov	r1, r2
 8001164:	2201      	movs	r2, #1
 8001166:	408a      	lsls	r2, r1
 8001168:	4611      	mov	r1, r2
 800116a:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <GPIO_Init+0x290>)
 800116c:	430b      	orrs	r3, r1
 800116e:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	799b      	ldrb	r3, [r3, #6]
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	791b      	ldrb	r3, [r3, #4]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2103      	movs	r1, #3
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	4619      	mov	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	400a      	ands	r2, r1
 800119e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6899      	ldr	r1, [r3, #8]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	79db      	ldrb	r3, [r3, #7]
 80011b4:	461a      	mov	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	791b      	ldrb	r3, [r3, #4]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2103      	movs	r1, #3
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4619      	mov	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	400a      	ands	r2, r1
 80011de:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68d9      	ldr	r1, [r3, #12]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7a1b      	ldrb	r3, [r3, #8]
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	4619      	mov	r1, r3
 800120c:	2301      	movs	r3, #1
 800120e:	408b      	lsls	r3, r1
 8001210:	43db      	mvns	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6859      	ldr	r1, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	430a      	orrs	r2, r1
 800122a:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	795b      	ldrb	r3, [r3, #5]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d131      	bne.n	8001298 <GPIO_Init+0x288>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	791b      	ldrb	r3, [r3, #4]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	7c3a      	ldrb	r2, [r7, #16]
 800124c:	3208      	adds	r2, #8
 800124e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	7c3a      	ldrb	r2, [r7, #16]
 8001266:	4001      	ands	r1, r0
 8001268:	3208      	adds	r2, #8
 800126a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	7c3a      	ldrb	r2, [r7, #16]
 8001274:	3208      	adds	r2, #8
 8001276:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7a5b      	ldrb	r3, [r3, #9]
 800127e:	461a      	mov	r2, r3
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	4618      	mov	r0, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	7c3a      	ldrb	r2, [r7, #16]
 8001290:	4301      	orrs	r1, r0
 8001292:	3208      	adds	r2, #8
 8001294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013c00 	.word	0x40013c00
 80012a4:	40013800 	.word	0x40013800

080012a8 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	70fb      	strb	r3, [r7, #3]
 80012b4:	4613      	mov	r3, r2
 80012b6:	70bb      	strb	r3, [r7, #2]

	if(Value == SET)
 80012b8:	78bb      	ldrb	r3, [r7, #2]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d109      	bne.n	80012d2 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	78fa      	ldrb	r2, [r7, #3]
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 80012d0:	e009      	b.n	80012e6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	2101      	movs	r1, #1
 80012da:	fa01 f202 	lsl.w	r2, r1, r2
 80012de:	43d2      	mvns	r2, r2
 80012e0:	401a      	ands	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	615a      	str	r2, [r3, #20]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <GPIO_ToggleOutputPin>:
 *
 * @Note              -

 */
inline void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	78fa      	ldrb	r2, [r7, #3]
 8001304:	2101      	movs	r1, #1
 8001306:	fa01 f202 	lsl.w	r2, r1, r2
 800130a:	405a      	eors	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	615a      	str	r2, [r3, #20]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <I2C_Enable>:
static void  I2C_GenerateStartCondition(I2C_type *pI2Cx);
static void  I2C_GenerateStopCondition(I2C_type *pI2Cx);
static void I2C_ExecuteAddressPhase(I2C_type *pI2Cx, uint8_t SlaveAddress);
static void I2C_ClearADDRFlag(I2C_Handle *pI2CHandle);

void I2C_Enable(I2C_type *pI2Cx, uint8_t EnorDi){
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE){
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d106      	bne.n	800133c <I2C_Enable+0x20>
      pI2Cx ->CR1 |= (1 << I2C_CR1_PE);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f043 0201 	orr.w	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
	}
	else{
		pI2Cx ->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 800133a:	e005      	b.n	8001348 <I2C_Enable+0x2c>
		pI2Cx ->CR1 &= ~(1 << I2C_CR1_PE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 0201 	bic.w	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <I2C_CLKCNT>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_CLKCNT(I2C_type *pI2Cx, uint8_t EnorDi){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d120      	bne.n	80013a8 <I2C_CLKCNT+0x54>
		if(pI2Cx == I2C1){I2C1_CLKEN();}
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <I2C_CLKCNT+0xa0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d106      	bne.n	800137c <I2C_CLKCNT+0x28>
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <I2C_CLKCNT+0xa4>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <I2C_CLKCNT+0xa4>)
 8001374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
		if(pI2Cx == I2C1){I2C1_CLKDI();}
		else if(pI2Cx == I2C2){I2C2_CLKDI();}
		else if(pI2Cx == I2C3){I2C3_CLKDI();}

	}
}
 800137a:	e035      	b.n	80013e8 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C2){I2C2_CLKEN();}
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <I2C_CLKCNT+0xa8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d106      	bne.n	8001392 <I2C_CLKCNT+0x3e>
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <I2C_CLKCNT+0xa4>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <I2C_CLKCNT+0xa4>)
 800138a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001390:	e02a      	b.n	80013e8 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C3){I2C3_CLKEN();}
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <I2C_CLKCNT+0xac>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d126      	bne.n	80013e8 <I2C_CLKCNT+0x94>
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <I2C_CLKCNT+0xa4>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013a6:	e01f      	b.n	80013e8 <I2C_CLKCNT+0x94>
		if(pI2Cx == I2C1){I2C1_CLKDI();}
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <I2C_CLKCNT+0xa0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d106      	bne.n	80013be <I2C_CLKCNT+0x6a>
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013bc:	e014      	b.n	80013e8 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C2){I2C2_CLKDI();}
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <I2C_CLKCNT+0xa8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d106      	bne.n	80013d4 <I2C_CLKCNT+0x80>
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013d2:	e009      	b.n	80013e8 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C3){I2C3_CLKDI();}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <I2C_CLKCNT+0xac>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d105      	bne.n	80013e8 <I2C_CLKCNT+0x94>
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40005400 	.word	0x40005400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40005c00 	.word	0x40005c00
 8001400:	40005800 	.word	0x40005800

08001404 <I2C_Init>:

void I2C_Init(I2C_Handle *pI2CHandle){
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
* 4.Program the I2C_CR1 register to enable the peripheral
* 5.Set the START bit in the I2C_CR1 register to generate a Start condition
*/

/*enabling the I2C peripheral*/
  I2C_Enable(pI2CHandle->pI2Cx, DISABLE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff82 	bl	800131c <I2C_Enable>

/*reset the I2C first*/
  pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_SWRST);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001426:	601a      	str	r2, [r3, #0]
  pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_SWRST);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001436:	601a      	str	r2, [r3, #0]

  uint32_t tmp;
/*configuring the Freq field in CR2 first*/
  tmp = getSystemClock() / 1000000U;
 8001438:	f000 f9ec 	bl	8001814 <getSystemClock>
 800143c:	4603      	mov	r3, r0
 800143e:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <I2C_Init+0x1bc>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	0c9b      	lsrs	r3, r3, #18
 8001446:	617b      	str	r3, [r7, #20]
  pI2CHandle->pI2Cx->CR2 = (tmp & 0x3FU);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001452:	605a      	str	r2, [r3, #4]

/*configuring the F/S if standard mode or fast mode then changing ccr value in CCR register*/
  /*configuring F/S*/
  if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SM){/*if it's standard mode*/
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <I2C_Init+0x1c0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d81c      	bhi.n	8001498 <I2C_Init+0x94>
	/*configure the mode*/
	pI2CHandle->pI2Cx->CCR &= ~(1 << I2C_CCR_F_S);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69da      	ldr	r2, [r3, #28]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800146c:	61da      	str	r2, [r3, #28]
	/*CCR = system clock / (2 * speed) */
	tmp = getSystemClock();
 800146e:	f000 f9d1 	bl	8001814 <getSystemClock>
 8001472:	6178      	str	r0, [r7, #20]
	uint32_t CCR_Value = tmp / (4 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001480:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->CCR |= (CCR_Value << I2C_CCR_CCR) & 0x3FFU;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	69d9      	ldr	r1, [r3, #28]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	61da      	str	r2, [r3, #28]
 8001496:	e042      	b.n	800151e <I2C_Init+0x11a>
  }
  else{/*fast mode*/
	/*configure the mode*/
	pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_F_S);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	69da      	ldr	r2, [r3, #28]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014a6:	61da      	str	r2, [r3, #28]
	/*configure the duty cycle*/
	tmp = (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY) & 0x1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->CCR |= tmp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	69d9      	ldr	r1, [r3, #28]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	61da      	str	r2, [r3, #28]
	/*configure the CCR field*/
	if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7a9b      	ldrb	r3, [r3, #10]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d115      	bne.n	80014f0 <I2C_Init+0xec>
	  tmp = (getSystemClock() / (3 *pI2CHandle->I2C_Config.I2C_SCLSpeed)) & 0xFFFU;
 80014c4:	f000 f9a6 	bl	8001814 <getSystemClock>
 80014c8:	4601      	mov	r1, r0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	617b      	str	r3, [r7, #20]
	  pI2CHandle->pI2Cx->CCR |= tmp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	69d9      	ldr	r1, [r3, #28]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	61da      	str	r2, [r3, #28]
 80014ee:	e016      	b.n	800151e <I2C_Init+0x11a>
	}
	else{
	  tmp = (getSystemClock() / (25 *pI2CHandle->I2C_Config.I2C_SCLSpeed)) & 0xFFFU;
 80014f0:	f000 f990 	bl	8001814 <getSystemClock>
 80014f4:	4601      	mov	r1, r0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	009a      	lsls	r2, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	fbb1 f3f3 	udiv	r3, r1, r3
 8001508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150c:	617b      	str	r3, [r7, #20]
	  pI2CHandle->pI2Cx->CCR |= tmp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	69d9      	ldr	r1, [r3, #28]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	430a      	orrs	r2, r1
 800151c:	61da      	str	r2, [r3, #28]
	}
  }

  /*configure the rise time*/
  if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SM){/*if it's standered mode*/
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <I2C_Init+0x1c0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d110      	bne.n	800154a <I2C_Init+0x146>
	/*rise time = (system time period / maximum allowed rise time for sm) + 1*/
	uint32_t clock = getSystemClock();
 8001528:	f000 f974 	bl	8001814 <getSystemClock>
 800152c:	60f8      	str	r0, [r7, #12]
	tmp = (clock / 1000000U) + 1;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <I2C_Init+0x1bc>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->TRISE = tmp & 0x3FU;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001546:	621a      	str	r2, [r3, #32]
 8001548:	e012      	b.n	8001570 <I2C_Init+0x16c>
  }
  else{/*fast mode*/
		tmp = ((getSystemClock() * 300) / 1000000U) + 1;
 800154a:	f000 f963 	bl	8001814 <getSystemClock>
 800154e:	4603      	mov	r3, r0
 8001550:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <I2C_Init+0x1bc>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
		pI2CHandle->pI2Cx->TRISE = tmp & 0x3FU;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800156e:	621a      	str	r2, [r3, #32]
	}

  /*configure Device Own Address in case it's used as slave*/
  pI2CHandle ->pI2Cx->OAR1 |= (DEVICE_ADDRESS << 1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 02ce 	orr.w	r2, r2, #206	; 0xce
 800157e:	609a      	str	r2, [r3, #8]

  /*configuring the addressing mode*/
  tmp = pI2CHandle->I2C_Config.I2C_AddressMode;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7adb      	ldrb	r3, [r3, #11]
 8001584:	617b      	str	r3, [r7, #20]
  pI2CHandle->pI2Cx->OAR1 |= ((tmp << I2C_OAR1_ADD0) & 0x7FU);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]

  /*enabling the ACK*/
    pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015a8:	601a      	str	r2, [r3, #0]

  /*enabling the I2C peripheral*/
    I2C_Enable(pI2CHandle->pI2Cx, ENABLE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2101      	movs	r1, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff feb3 	bl	800131c <I2C_Enable>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	000186a0 	.word	0x000186a0

080015c8 <I2C_GetFlagStatus>:
	if(pI2Cx == I2C1){I2C1_CLKDI();}
	else if(pI2Cx == I2C2){I2C2_CLKDI();}
	else{I2C3_CLKDI();}
}

uint8_t I2C_GetFlagStatus(I2C_type *pI2Cx ,uint8_t FlagName){
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
	if(pI2Cx ->SR1 & FlagName){
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <I2C_GetFlagStatus+0x1c>
		return SET;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <I2C_GetFlagStatus+0x1e>
	}
	return RESET;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <I2C_MasterSendData>:


void I2C_MasterSendData(I2C_Handle *pI2CHandle, uint8_t *pTxBuffer, uint8_t Len, uint8_t SlaveAddress){
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	4611      	mov	r1, r2
 80015fe:	461a      	mov	r2, r3
 8001600:	460b      	mov	r3, r1
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	71bb      	strb	r3, [r7, #6]

// 1. Generate the START condition
I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 f8b8 	bl	8001782 <I2C_GenerateStartCondition>

//2. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx,(SlaveAddress << 1) | 0x00);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	79bb      	ldrb	r3, [r7, #6]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4619      	mov	r1, r3
 800161e:	4610      	mov	r0, r2
 8001620:	f000 f8d7 	bl	80017d2 <I2C_ExecuteAddressPhase>

//6. send the data until len becomes 0
  while(Len > 0){
 8001624:	e012      	b.n	800164c <I2C_MasterSendData+0x5a>
    /*clearing (EV8)*/
    pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	611a      	str	r2, [r3, #16]
    Len--;
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	3b01      	subs	r3, #1
 8001634:	71fb      	strb	r3, [r7, #7]
    pTxBuffer++;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
    /*waiting for (EV8)*/
    while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_TxE));
 800163c:	bf00      	nop
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f8      	beq.n	800163e <I2C_MasterSendData+0x4c>
  while(Len > 0){
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1e9      	bne.n	8001626 <I2C_MasterSendData+0x34>
  /*wait for (EV8_2) BTF to be set first*/
  //while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_BTF));

/*clearing (EV8_2) by Setting the STOP bit in CR1 register*/
  //I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <I2C_MasterRecieveData>:
	    while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_TxE));
	  }
}


void I2C_MasterRecieveData(I2C_Handle *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddress){
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	4611      	mov	r1, r2
 8001668:	461a      	mov	r2, r3
 800166a:	460b      	mov	r3, r1
 800166c:	71fb      	strb	r3, [r7, #7]
 800166e:	4613      	mov	r3, r2
 8001670:	71bb      	strb	r3, [r7, #6]

	//1.generate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f883 	bl	8001782 <I2C_GenerateStartCondition>

	//2. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx,(SlaveAddress << 1) | 0x01);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	b25b      	sxtb	r3, r3
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	b25b      	sxtb	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4619      	mov	r1, r3
 8001690:	4610      	mov	r0, r2
 8001692:	f000 f89e 	bl	80017d2 <I2C_ExecuteAddressPhase>

if(Len == 1){/*if single byte to be read*/
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d134      	bne.n	8001706 <I2C_MasterRecieveData+0xaa>
 /* Write the slave Address, and wait for the ADDR bit (bit 1 in SR1) to be set
  * the Acknowledge disable is made during EV6 (before ADDR flag is cleared) and the STOP condition generation is made after EV6
  * Wait for the RXNE (Receive Buffer not Empty) bit to set
  * Read the data from the DR
  */
  pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_STOP);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016aa:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1_RxNE));
 80016ac:	bf00      	nop
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2106      	movs	r1, #6
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff87 	bl	80015c8 <I2C_GetFlagStatus>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f6      	beq.n	80016ae <I2C_MasterRecieveData+0x52>
  *pRxBuffer = pI2CHandle->pI2Cx->DR;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	701a      	strb	r2, [r3, #0]
	  pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	  while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_RXNE));
	  *pRxBuffer = pI2CHandle->pI2Cx->DR;
	  I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
	}
}
 80016cc:	e055      	b.n	800177a <I2C_MasterRecieveData+0x11e>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016dc:	601a      	str	r2, [r3, #0]
		while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_RXNE));
 80016de:	bf00      	nop
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f8      	beq.n	80016e0 <I2C_MasterRecieveData+0x84>
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	701a      	strb	r2, [r3, #0]
		Len--;
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	71fb      	strb	r3, [r7, #7]
		pRxBuffer++;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3301      	adds	r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
	  while(Len > 2){
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d8e0      	bhi.n	80016ce <I2C_MasterRecieveData+0x72>
	  pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800171a:	601a      	str	r2, [r3, #0]
	  while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_RXNE));
 800171c:	bf00      	nop
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f8      	beq.n	800171e <I2C_MasterRecieveData+0xc2>
	  *pRxBuffer = pI2CHandle->pI2Cx->DR;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	701a      	strb	r2, [r3, #0]
	  Len--;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	3b01      	subs	r3, #1
 800173c:	71fb      	strb	r3, [r7, #7]
	  pRxBuffer++;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	3301      	adds	r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
	  pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001752:	601a      	str	r2, [r3, #0]
	  while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_RXNE));
 8001754:	bf00      	nop
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f8      	beq.n	8001756 <I2C_MasterRecieveData+0xfa>
	  *pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	701a      	strb	r2, [r3, #0]
	  I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f81c 	bl	80017b2 <I2C_GenerateStopCondition>
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <I2C_GenerateStartCondition>:

}



static void  I2C_GenerateStartCondition(I2C_type *pI2Cx){
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  pI2Cx->CR1 |= (1 << I2C_CR1_START);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
  while( ! (pI2Cx->SR1 & I2C_FLAG_SB));
 8001796:	bf00      	nop
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f9      	beq.n	8001798 <I2C_GenerateStartCondition+0x16>
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <I2C_GenerateStopCondition>:

static void  I2C_GenerateStopCondition(I2C_type *pI2Cx){
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	601a      	str	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <I2C_ExecuteAddressPhase>:

static void I2C_ExecuteAddressPhase(I2C_type *pI2Cx, uint8_t SlaveAddress){
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	70fb      	strb	r3, [r7, #3]
/*sending the address of the slave followed by the R/nW bit*/
  pI2Cx->DR = SlaveAddress;
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	611a      	str	r2, [r3, #16]
  while (! (pI2Cx->SR1 & I2C_FLAG_ADDR));
 80017e4:	bf00      	nop
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f9      	beq.n	80017e6 <I2C_ExecuteAddressPhase+0x14>
  uint32_t DummyRead = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  DummyRead += pI2Cx->SR1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
  DummyRead = pI2Cx ->SR2;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	60fb      	str	r3, [r7, #12]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <getSystemClock>:
#include "RCC_driver.h"

uint16_t AHB_PRESCALERS[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB_PRESCALERS[4] = {2, 4, 8, 16};

uint32_t getSystemClock(void){
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
uint8_t PLLP1 = ((RCC->PLLCFGR >> 16) & 0x3U);
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <getSystemClock+0xd8>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	0c1b      	lsrs	r3, r3, #16
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	75bb      	strb	r3, [r7, #22]
uint8_t PLLP;
uint32_t fPLL,fPLLR;
switch(PLLP1){
 8001828:	7dbb      	ldrb	r3, [r7, #22]
 800182a:	2b03      	cmp	r3, #3
 800182c:	d816      	bhi.n	800185c <getSystemClock+0x48>
 800182e:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <getSystemClock+0x20>)
 8001830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001834:	08001845 	.word	0x08001845
 8001838:	0800184b 	.word	0x0800184b
 800183c:	08001851 	.word	0x08001851
 8001840:	08001857 	.word	0x08001857
  case(0):
		  PLLP = 2;
 8001844:	2302      	movs	r3, #2
 8001846:	75fb      	strb	r3, [r7, #23]
          break;
 8001848:	e008      	b.n	800185c <getSystemClock+0x48>
  case(1):
		  PLLP = 4;
 800184a:	2304      	movs	r3, #4
 800184c:	75fb      	strb	r3, [r7, #23]
          break;
 800184e:	e005      	b.n	800185c <getSystemClock+0x48>
  case(2):
		  PLLP = 6;
 8001850:	2306      	movs	r3, #6
 8001852:	75fb      	strb	r3, [r7, #23]
          break;
 8001854:	e002      	b.n	800185c <getSystemClock+0x48>
  case(3):
		  PLLP = 8;
 8001856:	2308      	movs	r3, #8
 8001858:	75fb      	strb	r3, [r7, #23]
          break;
 800185a:	bf00      	nop
}
uint16_t PLLN = ((RCC ->PLLCFGR >> 6) & 0x1FF);
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <getSystemClock+0xd8>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	b29b      	uxth	r3, r3
 8001864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001868:	82bb      	strh	r3, [r7, #20]
uint16_t PLLM = (RCC ->PLLCFGR & 0x3FU);
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <getSystemClock+0xd8>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	b29b      	uxth	r3, r3
 8001870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001874:	827b      	strh	r3, [r7, #18]
uint16_t PLLR = (RCC ->PLLCFGR >> 28) & 0x7U;
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <getSystemClock+0xd8>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	0f1b      	lsrs	r3, r3, #28
 800187c:	b29b      	uxth	r3, r3
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	823b      	strh	r3, [r7, #16]
uint32_t fVCO = HSI_CLOCK * (PLLN / PLLM); /*HSI is used as pll input*/
 8001884:	8aba      	ldrh	r2, [r7, #20]
 8001886:	8a7b      	ldrh	r3, [r7, #18]
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	b29b      	uxth	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <getSystemClock+0xdc>)
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	60fb      	str	r3, [r7, #12]
	switch (RCC ->CFGR >> 2){
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <getSystemClock+0xd8>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d81c      	bhi.n	80018dc <getSystemClock+0xc8>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <getSystemClock+0x94>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	080018b9 	.word	0x080018b9
 80018ac:	080018bd 	.word	0x080018bd
 80018b0:	080018c1 	.word	0x080018c1
 80018b4:	080018cf 	.word	0x080018cf
		case(0) : /*HSI is used*/
			return HSI_CLOCK; /*HSI clock speed*/
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <getSystemClock+0xdc>)
 80018ba:	e010      	b.n	80018de <getSystemClock+0xca>
		case(1) : /*HSE is used*/
			return HSE_CLOCK;
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <getSystemClock+0xe0>)
 80018be:	e00e      	b.n	80018de <getSystemClock+0xca>
		case(2) : /*PLL is used*/
		   fPLL = fVCO * PLLP;
 80018c0:	7dfa      	ldrb	r2, [r7, #23]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	607b      	str	r3, [r7, #4]
		  return fPLL;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	e007      	b.n	80018de <getSystemClock+0xca>
		case(3) : /*PLL_R is used*/
			/*Clock frequancy = VCO / PLLR*/
			 fPLLR = fVCO / PLLR;
 80018ce:	8a3b      	ldrh	r3, [r7, #16]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	60bb      	str	r3, [r7, #8]
			return fPLLR;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	e000      	b.n	80018de <getSystemClock+0xca>
	}
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	00f42400 	.word	0x00f42400
 80018f4:	007a1200 	.word	0x007a1200

080018f8 <getAPBClock>:
	}
	uint32_t AHBClock = SystemClock / AHB_PRESCALER;
	return AHBClock;
}

uint32_t getAPBClock(uint32_t BusAddress){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	if(BusAddress == APB1PREF_BASEADDR){
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001906:	d11a      	bne.n	800193e <getAPBClock+0x46>
		uint8_t APB1PRESCALER;
		if(((RCC ->CFGR >> 10) & 0x7U) < 4){
 8001908:	4b1c      	ldr	r3, [pc, #112]	; (800197c <getAPBClock+0x84>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	0a9b      	lsrs	r3, r3, #10
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <getAPBClock+0x24>
		  APB1PRESCALER = 1;
 8001916:	2301      	movs	r3, #1
 8001918:	73fb      	strb	r3, [r7, #15]
 800191a:	e009      	b.n	8001930 <getAPBClock+0x38>
		}else{
		  APB1PRESCALER = APB_PRESCALERS[((RCC ->CFGR >> 10) & 0x7U) - 4];
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <getAPBClock+0x84>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	0a9b      	lsrs	r3, r3, #10
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	3b04      	subs	r3, #4
 8001928:	4a15      	ldr	r2, [pc, #84]	; (8001980 <getAPBClock+0x88>)
 800192a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800192e:	73fb      	strb	r3, [r7, #15]
		}
		return (getSystemClock() / APB1PRESCALER);
 8001930:	f7ff ff70 	bl	8001814 <getSystemClock>
 8001934:	4602      	mov	r2, r0
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	e019      	b.n	8001972 <getAPBClock+0x7a>
	}
	else{
		uint8_t APB2PRESCALER;
		if(((RCC ->CFGR >> 13) & 0x7U) < 4){
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <getAPBClock+0x84>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0b5b      	lsrs	r3, r3, #13
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <getAPBClock+0x5a>
		  APB2PRESCALER = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	73bb      	strb	r3, [r7, #14]
 8001950:	e009      	b.n	8001966 <getAPBClock+0x6e>
		}else{
		  APB2PRESCALER = APB_PRESCALERS[((RCC ->CFGR >> 10) & 0x7U) - 4];
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <getAPBClock+0x84>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0a9b      	lsrs	r3, r3, #10
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	3b04      	subs	r3, #4
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <getAPBClock+0x88>)
 8001960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001964:	73bb      	strb	r3, [r7, #14]
		}
		return (getSystemClock() / APB2PRESCALER);
 8001966:	f7ff ff55 	bl	8001814 <getSystemClock>
 800196a:	4602      	mov	r2, r0
 800196c:	7bbb      	ldrb	r3, [r7, #14]
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
	}
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	20000000 	.word	0x20000000

08001984 <RTC_ReadTime>:
#include "I2C_driver.h"

uint8_t SlaveAddress = 0x68U;
uint8_t StartAdress = 0x00U;

void RTC_ReadTime(uint8_t *pRxBuffer, I2C_Handle *pI2CHandle){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]

	I2C_MasterSendData(pI2CHandle, &StartAdress, sizeof(StartAdress), SlaveAddress);
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <RTC_ReadTime+0x30>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2201      	movs	r2, #1
 8001994:	4908      	ldr	r1, [pc, #32]	; (80019b8 <RTC_ReadTime+0x34>)
 8001996:	6838      	ldr	r0, [r7, #0]
 8001998:	f7ff fe2b 	bl	80015f2 <I2C_MasterSendData>

	I2C_MasterRecieveData(pI2CHandle, pRxBuffer, 7, SlaveAddress);
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <RTC_ReadTime+0x30>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2207      	movs	r2, #7
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	6838      	ldr	r0, [r7, #0]
 80019a6:	f7ff fe59 	bl	800165c <I2C_MasterRecieveData>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000008 	.word	0x20000008
 80019b8:	200001fc 	.word	0x200001fc

080019bc <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_type *pUSARTx, uint32_t BaudRate)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <USART_SetBaudRate+0xdc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d003      	beq.n	80019da <USART_SetBaudRate+0x1e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a31      	ldr	r2, [pc, #196]	; (8001a9c <USART_SetBaudRate+0xe0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d104      	bne.n	80019e4 <USART_SetBaudRate+0x28>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = getAPBClock(APB2PREF_BASEADDR);
 80019da:	4831      	ldr	r0, [pc, #196]	; (8001aa0 <USART_SetBaudRate+0xe4>)
 80019dc:	f7ff ff8c 	bl	80018f8 <getAPBClock>
 80019e0:	61f8      	str	r0, [r7, #28]
 80019e2:	e004      	b.n	80019ee <USART_SetBaudRate+0x32>
  }else
  {
	  PCLKx = getAPBClock(APB1PREF_BASEADDR);
 80019e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019e8:	f7ff ff86 	bl	80018f8 <getAPBClock>
 80019ec:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <USART_SetBaudRate+0x56>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009a      	lsls	r2, r3, #2
 8001a04:	441a      	add	r2, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	e00a      	b.n	8001a28 <USART_SetBaudRate+0x6c>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	009a      	lsls	r2, r3, #2
 8001a1c:	441a      	add	r2, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <USART_SetBaudRate+0xe8>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2264      	movs	r2, #100	; 0x64
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00a      	beq.n	8001a6e <USART_SetBaudRate+0xb2>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	3332      	adds	r3, #50	; 0x32
 8001a5e:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <USART_SetBaudRate+0xe8>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e009      	b.n	8001a82 <USART_SetBaudRate+0xc6>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	3332      	adds	r3, #50	; 0x32
 8001a74:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <USART_SetBaudRate+0xe8>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	609a      	str	r2, [r3, #8]
}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	40011400 	.word	0x40011400
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	51eb851f 	.word	0x51eb851f

08001aa8 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f880 	bl	8001bc0 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	791b      	ldrb	r3, [r3, #4]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d104      	bne.n	8001ad2 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e010      	b.n	8001af4 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	791b      	ldrb	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d104      	bne.n	8001ae4 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	e007      	b.n	8001af4 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d103      	bne.n	8001af4 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f043 030c 	orr.w	r3, r3, #12
 8001af2:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7b5b      	ldrb	r3, [r3, #13]
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7b9b      	ldrb	r3, [r3, #14]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d104      	bne.n	8001b14 <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	e00b      	b.n	8001b2c <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7b9b      	ldrb	r3, [r3, #14]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d107      	bne.n	8001b2c <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7b1b      	ldrb	r3, [r3, #12]
 8001b3c:	031b      	lsls	r3, r3, #12
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7bdb      	ldrb	r3, [r3, #15]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d104      	bne.n	8001b64 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	e014      	b.n	8001b8e <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7bdb      	ldrb	r3, [r3, #15]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d104      	bne.n	8001b76 <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	e00b      	b.n	8001b8e <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7bdb      	ldrb	r3, [r3, #15]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d107      	bne.n	8001b8e <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b84:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f7ff ff0b 	bl	80019bc <USART_SetBaudRate>
	 pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bb4:	60da      	str	r2, [r3, #12]
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_type *pUSARTx, uint8_t EnorDi)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d140      	bne.n	8001c54 <USART_PeriClockControl+0x94>
	{
		if(pUSARTx == USART1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <USART_PeriClockControl+0xa0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d106      	bne.n	8001be8 <USART_PeriClockControl+0x28>
		{
			USART1_CLKEN();
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
		//TODO
	}

}
 8001be6:	e035      	b.n	8001c54 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <USART_PeriClockControl+0xa8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d106      	bne.n	8001bfe <USART_PeriClockControl+0x3e>
			USART2_CLKEN();
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001bfc:	e02a      	b.n	8001c54 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART3)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <USART_PeriClockControl+0xac>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d106      	bne.n	8001c14 <USART_PeriClockControl+0x54>
			USART3_CLKEN();
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c12:	e01f      	b.n	8001c54 <USART_PeriClockControl+0x94>
		else if (pUSARTx == UART4)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a16      	ldr	r2, [pc, #88]	; (8001c70 <USART_PeriClockControl+0xb0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d106      	bne.n	8001c2a <USART_PeriClockControl+0x6a>
			UART4_CLKEN();
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c28:	e014      	b.n	8001c54 <USART_PeriClockControl+0x94>
		else if (pUSARTx == UART5)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <USART_PeriClockControl+0xb4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d106      	bne.n	8001c40 <USART_PeriClockControl+0x80>
			UART5_CLKEN();
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c3e:	e009      	b.n	8001c54 <USART_PeriClockControl+0x94>
		else if (pUSARTx == USART6)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <USART_PeriClockControl+0xb8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d105      	bne.n	8001c54 <USART_PeriClockControl+0x94>
			USART6_CLKEN();
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <USART_PeriClockControl+0xa4>)
 8001c4e:	f043 0320 	orr.w	r3, r3, #32
 8001c52:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40011000 	.word	0x40011000
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40004400 	.word	0x40004400
 8001c6c:	40004800 	.word	0x40004800
 8001c70:	40004c00 	.word	0x40004c00
 8001c74:	40005000 	.word	0x40005000
 8001c78:	40011400 	.word	0x40011400

08001c7c <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_type *pUSARTx, uint8_t StatusFlagName)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e031      	b.n	8001d1c <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8001cb8:	bf00      	nop
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ffdb 	bl	8001c7c <USART_GetFlagStatus>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f6      	beq.n	8001cba <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	7b5b      	ldrb	r3, [r3, #13]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d118      	bne.n	8001d06 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ce6:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	7b9b      	ldrb	r3, [r3, #14]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d106      	bne.n	8001cfe <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	e00b      	b.n	8001d16 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3301      	adds	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	e007      	b.n	8001d16 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	3301      	adds	r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3c9      	bcc.n	8001cb8 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8001d24:	bf00      	nop
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2140      	movs	r1, #64	; 0x40
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ffa5 	bl	8001c7c <USART_GetFlagStatus>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f6      	beq.n	8001d26 <USART_SendData+0x80>
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	0000      	movs	r0, r0
 8001d44:	0000      	movs	r0, r0
	...

08001d48 <main>:
char uartBuf[100];

USART_Handle_t hUART;
uint32_t data[8];

int main(void){
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af04      	add	r7, sp, #16
	//enable floating point full access
	SCB ->CPACR |= ((3UL << 20U)|(3UL << 22U));
 8001d4e:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <main+0x110>)
 8001d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d54:	4a40      	ldr	r2, [pc, #256]	; (8001e58 <main+0x110>)
 8001d56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	GPIO_CAN1Init(GPIOA, GPIO_PIN_NO_11, 9);//RX
 8001d5e:	2209      	movs	r2, #9
 8001d60:	210b      	movs	r1, #11
 8001d62:	483e      	ldr	r0, [pc, #248]	; (8001e5c <main+0x114>)
 8001d64:	f7ff f814 	bl	8000d90 <GPIO_CAN1Init>
	GPIO_CAN1Init(GPIOA, GPIO_PIN_NO_12, 9);//TX
 8001d68:	2209      	movs	r2, #9
 8001d6a:	210c      	movs	r1, #12
 8001d6c:	483b      	ldr	r0, [pc, #236]	; (8001e5c <main+0x114>)
 8001d6e:	f7ff f80f 	bl	8000d90 <GPIO_CAN1Init>
	GPIO_LEDInit();
 8001d72:	f7ff f82f 	bl	8000dd4 <GPIO_LEDInit>
	CANInit();
 8001d76:	f000 f881 	bl	8001e7c <CANInit>
	CANRxconfig();
 8001d7a:	f000 f8c1 	bl	8001f00 <CANRxconfig>
	systick_init(1U);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f7fe ff82 	bl	8000c88 <systick_init>
	//enter normal mode
	CAN1 ->MCR &= ~(1 << 0);
 8001d84:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <main+0x118>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a35      	ldr	r2, [pc, #212]	; (8001e60 <main+0x118>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]
	//wait until CAN is in normal mode
	while(CAN1 ->MSR & (1 << 0));
 8001d90:	bf00      	nop
 8001d92:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <main+0x118>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f9      	bne.n	8001d92 <main+0x4a>

	//configuring the UART peripheral
	UARTConfig();
 8001d9e:	f000 f901 	bl	8001fa4 <UARTConfig>
	//initializing UART2 Pins
	USART_GPIOInit(GPIOA,GPIO_PIN_NO_2,7);  /*TX*/
 8001da2:	2207      	movs	r2, #7
 8001da4:	2102      	movs	r1, #2
 8001da6:	482d      	ldr	r0, [pc, #180]	; (8001e5c <main+0x114>)
 8001da8:	f7fe ffc5 	bl	8000d36 <USART_GPIOInit>
	USART_GPIOInit(GPIOA,GPIO_PIN_NO_3,7);  /*RX*/
 8001dac:	2207      	movs	r2, #7
 8001dae:	2103      	movs	r1, #3
 8001db0:	482a      	ldr	r0, [pc, #168]	; (8001e5c <main+0x114>)
 8001db2:	f7fe ffc0 	bl	8000d36 <USART_GPIOInit>

	//configure I2C
	I2C_Handle RTC;
	I2C_Config(&RTC);
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f93e 	bl	800203c <I2C_Config>
	//RTC_SetTime(&RTC);
	uint8_t TimeBuffer[7];
	while(1){
	delay(50);
 8001dc0:	2032      	movs	r0, #50	; 0x32
 8001dc2:	f7ff f825 	bl	8000e10 <delay>
	RTC_ReadTime(TimeBuffer, &RTC);
 8001dc6:	f107 020c 	add.w	r2, r7, #12
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fdd8 	bl	8001984 <RTC_ReadTime>
	shift(TimeBuffer);
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f902 	bl	8001fe0 <shift>
	distance = (numTicks/10000.0) * speedOfSound;
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <main+0x11c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fbaf 	bl	8000544 <__aeabi_ui2d>
 8001de6:	a31a      	add	r3, pc, #104	; (adr r3, 8001e50 <main+0x108>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fd4e 	bl	800088c <__aeabi_ddiv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4614      	mov	r4, r2
 8001df6:	461d      	mov	r5, r3
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <main+0x120>)
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fbc4 	bl	8000588 <__aeabi_f2d>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4620      	mov	r0, r4
 8001e06:	4629      	mov	r1, r5
 8001e08:	f7fe fc16 	bl	8000638 <__aeabi_dmul>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fee8 	bl	8000be8 <__aeabi_d2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <main+0x124>)
 8001e1c:	6013      	str	r3, [r2, #0]
	sprintf(uartBuf, "Distance = %.1f(cm) at %d:%d:%d O'Clock\r\n", distance,TimeBuffer[2],TimeBuffer[1],TimeBuffer[0]);
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <main+0x124>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fbb0 	bl	8000588 <__aeabi_f2d>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	79b9      	ldrb	r1, [r7, #6]
 8001e2e:	7978      	ldrb	r0, [r7, #5]
 8001e30:	793c      	ldrb	r4, [r7, #4]
 8001e32:	9402      	str	r4, [sp, #8]
 8001e34:	9001      	str	r0, [sp, #4]
 8001e36:	9100      	str	r1, [sp, #0]
 8001e38:	490d      	ldr	r1, [pc, #52]	; (8001e70 <main+0x128>)
 8001e3a:	480e      	ldr	r0, [pc, #56]	; (8001e74 <main+0x12c>)
 8001e3c:	f001 f990 	bl	8003160 <siprintf>
	USART_SendData(&hUART, (uint8_t *)uartBuf, sizeof(uartBuf));  /*sending the data*/
 8001e40:	2264      	movs	r2, #100	; 0x64
 8001e42:	490c      	ldr	r1, [pc, #48]	; (8001e74 <main+0x12c>)
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <main+0x130>)
 8001e46:	f7ff ff2e 	bl	8001ca6 <USART_SendData>
	delay(50);
 8001e4a:	e7b9      	b.n	8001dc0 <main+0x78>
 8001e4c:	f3af 8000 	nop.w
 8001e50:	00000000 	.word	0x00000000
 8001e54:	40c38800 	.word	0x40c38800
 8001e58:	e000ed00 	.word	0xe000ed00
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40006400 	.word	0x40006400
 8001e64:	20000200 	.word	0x20000200
 8001e68:	432b0000 	.word	0x432b0000
 8001e6c:	20000204 	.word	0x20000204
 8001e70:	08005348 	.word	0x08005348
 8001e74:	20000208 	.word	0x20000208
 8001e78:	2000026c 	.word	0x2000026c

08001e7c <CANInit>:
}




static void CANInit(){
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
	//enable the clock for the bus
	RCC ->APB1ENR |= (1 << RCC_APB1ENR_CAN1EN);
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <CANInit+0x7c>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <CANInit+0x7c>)
 8001e86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	6413      	str	r3, [r2, #64]	; 0x40
	//clear sleep bit in MCR
	CAN1 ->MCR &= ~(1U << 1);
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <CANInit+0x80>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <CANInit+0x80>)
 8001e92:	f023 0302 	bic.w	r3, r3, #2
 8001e96:	6013      	str	r3, [r2, #0]
	//initialize the CAN bus
	CAN1 ->MCR |= (1 << 0);
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <CANInit+0x80>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a17      	ldr	r2, [pc, #92]	; (8001efc <CANInit+0x80>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6013      	str	r3, [r2, #0]
	//wait until CAN enters initialization mode
	while(! (CAN1 ->MSR & (1 << 0)));
 8001ea4:	bf00      	nop
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <CANInit+0x80>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f9      	beq.n	8001ea6 <CANInit+0x2a>
	CAN1 ->BTR &= 0x00000000U;
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <CANInit+0x80>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <CANInit+0x80>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
	CAN1 ->BTR |= (1U << 24);//SWj
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <CANInit+0x80>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <CANInit+0x80>)
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	61d3      	str	r3, [r2, #28]
	CAN1 ->BTR |= (13U << 16);//seg1
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <CANInit+0x80>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <CANInit+0x80>)
 8001ece:	f443 2350 	orr.w	r3, r3, #851968	; 0xd0000
 8001ed2:	61d3      	str	r3, [r2, #28]
	CAN1 ->BTR |= (2U << 20);//seg2
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <CANInit+0x80>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	4a08      	ldr	r2, [pc, #32]	; (8001efc <CANInit+0x80>)
 8001eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ede:	61d3      	str	r3, [r2, #28]
	CAN1 ->BTR |= (2U << 0);//BRP
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <CANInit+0x80>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	4a05      	ldr	r2, [pc, #20]	; (8001efc <CANInit+0x80>)
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	61d3      	str	r3, [r2, #28]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40006400 	.word	0x40006400

08001f00 <CANRxconfig>:

static void CANRxconfig(){
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
	//configure the filter banks to accept all IDs
	//initialize the filter bank
	CAN1 ->FMR |= (1U << 0);
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <CANRxconfig+0x9c>)
 8001f06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f0a:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <CANRxconfig+0x9c>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	//enable interrupt for pending messages on FIFO 0
	CAN1 ->IER |= (1U << 1);
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <CANRxconfig+0x9c>)
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <CANRxconfig+0x9c>)
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	6153      	str	r3, [r2, #20]
	//enable NVIC interrupt for CAN RX (IRQ no. 20) ISER0;
	*ISER0 |= (1U << 20);
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <CANRxconfig+0xa0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <CANRxconfig+0xa0>)
 8001f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f2a:	6013      	str	r3, [r2, #0]
	//set it to MASK MODE
	CAN1 ->FM1R &= ~(1 << 0);
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <CANRxconfig+0x9c>)
 8001f2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f32:	4a1a      	ldr	r2, [pc, #104]	; (8001f9c <CANRxconfig+0x9c>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	//use single 32bit register
	CAN1 ->FS1R |= (1 << 0);
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <CANRxconfig+0x9c>)
 8001f3e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <CANRxconfig+0x9c>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	//assign the message to FIFO 0
	CAN1 ->FFA1R &= ~(1U << 0);
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <CANRxconfig+0x9c>)
 8001f4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <CANRxconfig+0x9c>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	//set the ID in the filter bank
	CAN1 ->sFilterRegister[0].FR1 = 0x55U << 5;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <CANRxconfig+0x9c>)
 8001f5e:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
 8001f62:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	//set the MASK
	CAN1 ->sFilterRegister[0].FR2 = 0x7FFU << 5;
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <CANRxconfig+0x9c>)
 8001f68:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001f6c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	//activate the filter
	CAN1 ->FMR &= ~(1U << 0);
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <CANRxconfig+0x9c>)
 8001f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f76:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <CANRxconfig+0x9c>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1 ->FA1R |= (1U << 0);
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <CANRxconfig+0x9c>)
 8001f82:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <CANRxconfig+0x9c>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40006400 	.word	0x40006400
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <UARTConfig>:


static void UARTConfig(){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	hUART.pUSARTx = USART2;
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <UARTConfig+0x34>)
 8001faa:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <UARTConfig+0x38>)
 8001fac:	601a      	str	r2, [r3, #0]
	hUART.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <UARTConfig+0x34>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	609a      	str	r2, [r3, #8]
	hUART.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <UARTConfig+0x34>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	731a      	strb	r2, [r3, #12]
	hUART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <UARTConfig+0x34>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	739a      	strb	r2, [r3, #14]
	hUART.USART_Config.USART_Mode = USART_MODE_TXRX;
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <UARTConfig+0x34>)
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	711a      	strb	r2, [r3, #4]
	hUART.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <UARTConfig+0x34>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	735a      	strb	r2, [r3, #13]
	USART_Init(&hUART);
 8001fce:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <UARTConfig+0x34>)
 8001fd0:	f7ff fd6a 	bl	8001aa8 <USART_Init>
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000026c 	.word	0x2000026c
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <shift>:

static void shift(uint8_t *pData){
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 7; i++){
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e01c      	b.n	8002028 <shift+0x48>
		uint8_t MSB = pData[i] >> 4;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	73bb      	strb	r3, [r7, #14]
		uint8_t LSB = pData[i] & 0xF;
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	737b      	strb	r3, [r7, #13]
		pData[i] = MSB * 10 + LSB;
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	461a      	mov	r2, r3
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	4413      	add	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	b2d9      	uxtb	r1, r3
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	7b7a      	ldrb	r2, [r7, #13]
 800201c:	440a      	add	r2, r1
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 7; i++){
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	3301      	adds	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b06      	cmp	r3, #6
 800202c:	d9df      	bls.n	8001fee <shift+0xe>
	}
}
 800202e:	bf00      	nop
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <I2C_Config>:

static void I2C_Config(I2C_Handle *pI2CHandle){
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	I2C1_GPIOInit(GPIOB, GPIO_PIN_NO_6, 4);//SCL
 8002044:	2204      	movs	r2, #4
 8002046:	2106      	movs	r1, #6
 8002048:	4811      	ldr	r0, [pc, #68]	; (8002090 <I2C_Config+0x54>)
 800204a:	f7fe fe47 	bl	8000cdc <I2C1_GPIOInit>
	I2C1_GPIOInit(GPIOB, GPIO_PIN_NO_7, 4);//SDA
 800204e:	2204      	movs	r2, #4
 8002050:	2107      	movs	r1, #7
 8002052:	480f      	ldr	r0, [pc, #60]	; (8002090 <I2C_Config+0x54>)
 8002054:	f7fe fe42 	bl	8000cdc <I2C1_GPIOInit>

	pI2CHandle->pI2Cx = I2C1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <I2C_Config+0x58>)
 800205c:	601a      	str	r2, [r3, #0]
	pI2CHandle->I2C_Config.I2C_SCLSpeed = I2C_SCL_SM;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <I2C_Config+0x5c>)
 8002062:	605a      	str	r2, [r3, #4]
	pI2CHandle->I2C_Config.I2C_DeviceAddress = 0x68U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2268      	movs	r2, #104	; 0x68
 8002068:	721a      	strb	r2, [r3, #8]
	pI2CHandle->I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	725a      	strb	r2, [r3, #9]
	pI2CHandle->I2C_Config.I2C_AddressMode = I2C_AddressMode_7bit;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	72da      	strb	r2, [r3, #11]
	I2C_CLKCNT(pI2CHandle->pI2Cx, ENABLE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff f969 	bl	8001354 <I2C_CLKCNT>
	I2C_Init(pI2CHandle);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff f9be 	bl	8001404 <I2C_Init>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40020400 	.word	0x40020400
 8002094:	40005400 	.word	0x40005400
 8002098:	000186a0 	.word	0x000186a0

0800209c <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void){
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
	__asm(
 80020a2:	b672      	cpsid	i
			"CPSID I  \n"
	);
	*ICPR0 |= (1U << 20);
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <CAN1_RX0_IRQHandler+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <CAN1_RX0_IRQHandler+0x40>)
 80020aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ae:	6013      	str	r3, [r2, #0]
	ReadFIFO();
 80020b0:	f000 f81a 	bl	80020e8 <ReadFIFO>
	uint32_t Ticks = data[0] | (data[1] << 8);
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <CAN1_RX0_IRQHandler+0x44>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <CAN1_RX0_IRQHandler+0x44>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	4313      	orrs	r3, r2
 80020c0:	607b      	str	r3, [r7, #4]
	SysTick ->RVR = Ticks * TICKS_ATMAX_DISTANCE;
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <CAN1_RX0_IRQHandler+0x48>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f640 419a 	movw	r1, #3226	; 0xc9a
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	6053      	str	r3, [r2, #4]
	__asm(
 80020d0:	b662      	cpsie	i
			"CPSIE I  \n"
	);
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e280 	.word	0xe000e280
 80020e0:	20000290 	.word	0x20000290
 80020e4:	e000e010 	.word	0xe000e010

080020e8 <ReadFIFO>:

static void ReadFIFO(){
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
	uint32_t dataLength = (CAN1->sFIFOMailBox[0].RDTR & 0xF);
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <ReadFIFO+0x84>)
 80020f0:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 0; i < dataLength; i++){
 80020fa:	2300      	movs	r3, #0
 80020fc:	71fb      	strb	r3, [r7, #7]
 80020fe:	e01d      	b.n	800213c <ReadFIFO+0x54>
		if(i < 4){
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d80b      	bhi.n	800211e <ReadFIFO+0x36>
			data[i] = (CAN1 ->sFIFOMailBox[0].RDLR >> (i * 8)) & 0xFFU;
 8002106:	4b19      	ldr	r3, [pc, #100]	; (800216c <ReadFIFO+0x84>)
 8002108:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	40da      	lsrs	r2, r3
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	4916      	ldr	r1, [pc, #88]	; (8002170 <ReadFIFO+0x88>)
 8002118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800211c:	e00b      	b.n	8002136 <ReadFIFO+0x4e>
		}else{
			data[i] = (CAN1 ->sFIFOMailBox[0].RDHR >> ((i - 4) * 8)) & 0xFFU;
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <ReadFIFO+0x84>)
 8002120:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	3b04      	subs	r3, #4
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	40da      	lsrs	r2, r3
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	490f      	ldr	r1, [pc, #60]	; (8002170 <ReadFIFO+0x88>)
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < dataLength; i++){
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	3301      	adds	r3, #1
 800213a:	71fb      	strb	r3, [r7, #7]
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d8dd      	bhi.n	8002100 <ReadFIFO+0x18>
		}
	}
	numTicks = data[0] | (data[1] << 8);
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <ReadFIFO+0x88>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <ReadFIFO+0x88>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	4313      	orrs	r3, r2
 8002150:	4a08      	ldr	r2, [pc, #32]	; (8002174 <ReadFIFO+0x8c>)
 8002152:	6013      	str	r3, [r2, #0]
	//release the FIFO
	CAN1 ->RF0R |= (1U << 5);
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <ReadFIFO+0x84>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <ReadFIFO+0x84>)
 800215a:	f043 0320 	orr.w	r3, r3, #32
 800215e:	60d3      	str	r3, [r2, #12]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40006400 	.word	0x40006400
 8002170:	20000290 	.word	0x20000290
 8002174:	20000200 	.word	0x20000200

08002178 <SysTick_Handler>:

void SysTick_Handler(){
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	__asm(
 800217c:	b672      	cpsid	i
			"CPSID I  \n"
	);
	if(distance < 70){
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <SysTick_Handler+0x34>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80021b0 <SysTick_Handler+0x38>
 8002188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	d504      	bpl.n	800219c <SysTick_Handler+0x24>
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 8002192:	2105      	movs	r1, #5
 8002194:	4807      	ldr	r0, [pc, #28]	; (80021b4 <SysTick_Handler+0x3c>)
 8002196:	f7ff f8ac 	bl	80012f2 <GPIO_ToggleOutputPin>
 800219a:	e004      	b.n	80021a6 <SysTick_Handler+0x2e>
	}else{
		GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	2105      	movs	r1, #5
 80021a0:	4804      	ldr	r0, [pc, #16]	; (80021b4 <SysTick_Handler+0x3c>)
 80021a2:	f7ff f881 	bl	80012a8 <GPIO_WriteToOutputPin>
	}
	__asm(
 80021a6:	b662      	cpsie	i
			"CPSIE I  \n"
	);
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000204 	.word	0x20000204
 80021b0:	428c0000 	.word	0x428c0000
 80021b4:	40020000 	.word	0x40020000

080021b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021b8:	480d      	ldr	r0, [pc, #52]	; (80021f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021c2:	490d      	ldr	r1, [pc, #52]	; (80021f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021c4:	4a0d      	ldr	r2, [pc, #52]	; (80021fc <LoopForever+0xe>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c8:	e002      	b.n	80021d0 <LoopCopyDataInit>

080021ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ce:	3304      	adds	r3, #4

080021d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d4:	d3f9      	bcc.n	80021ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021d8:	4c0a      	ldr	r4, [pc, #40]	; (8002204 <LoopForever+0x16>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021dc:	e001      	b.n	80021e2 <LoopFillZerobss>

080021de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e0:	3204      	adds	r2, #4

080021e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e4:	d3fb      	bcc.n	80021de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021e6:	f000 fa7d 	bl	80026e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ea:	f7ff fdad 	bl	8001d48 <main>

080021ee <LoopForever>:

LoopForever:
  b LoopForever
 80021ee:	e7fe      	b.n	80021ee <LoopForever>
  ldr   r0, =_estack
 80021f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80021fc:	08005754 	.word	0x08005754
  ldr r2, =_sbss
 8002200:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002204:	20000364 	.word	0x20000364

08002208 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002208:	e7fe      	b.n	8002208 <ADC_IRQHandler>
	...

0800220c <findslot>:
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <findslot+0x2c>)
 800220e:	b510      	push	{r4, lr}
 8002210:	4604      	mov	r4, r0
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	b118      	cbz	r0, 800221e <findslot+0x12>
 8002216:	6983      	ldr	r3, [r0, #24]
 8002218:	b90b      	cbnz	r3, 800221e <findslot+0x12>
 800221a:	f000 f9c5 	bl	80025a8 <__sinit>
 800221e:	2c13      	cmp	r4, #19
 8002220:	d807      	bhi.n	8002232 <findslot+0x26>
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <findslot+0x30>)
 8002224:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002228:	3201      	adds	r2, #1
 800222a:	d002      	beq.n	8002232 <findslot+0x26>
 800222c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002230:	bd10      	pop	{r4, pc}
 8002232:	2000      	movs	r0, #0
 8002234:	e7fc      	b.n	8002230 <findslot+0x24>
 8002236:	bf00      	nop
 8002238:	20000010 	.word	0x20000010
 800223c:	200002b4 	.word	0x200002b4

08002240 <error>:
 8002240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002242:	4604      	mov	r4, r0
 8002244:	f000 f952 	bl	80024ec <__errno>
 8002248:	2613      	movs	r6, #19
 800224a:	4605      	mov	r5, r0
 800224c:	2700      	movs	r7, #0
 800224e:	4630      	mov	r0, r6
 8002250:	4639      	mov	r1, r7
 8002252:	beab      	bkpt	0x00ab
 8002254:	4606      	mov	r6, r0
 8002256:	602e      	str	r6, [r5, #0]
 8002258:	4620      	mov	r0, r4
 800225a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800225c <checkerror>:
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	d101      	bne.n	8002264 <checkerror+0x8>
 8002260:	f7ff bfee 	b.w	8002240 <error>
 8002264:	4770      	bx	lr

08002266 <_swiread>:
 8002266:	b530      	push	{r4, r5, lr}
 8002268:	b085      	sub	sp, #20
 800226a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800226e:	9203      	str	r2, [sp, #12]
 8002270:	2406      	movs	r4, #6
 8002272:	ad01      	add	r5, sp, #4
 8002274:	4620      	mov	r0, r4
 8002276:	4629      	mov	r1, r5
 8002278:	beab      	bkpt	0x00ab
 800227a:	4604      	mov	r4, r0
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff ffed 	bl	800225c <checkerror>
 8002282:	b005      	add	sp, #20
 8002284:	bd30      	pop	{r4, r5, pc}

08002286 <_read>:
 8002286:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002288:	4615      	mov	r5, r2
 800228a:	9101      	str	r1, [sp, #4]
 800228c:	f7ff ffbe 	bl	800220c <findslot>
 8002290:	9901      	ldr	r1, [sp, #4]
 8002292:	4604      	mov	r4, r0
 8002294:	b938      	cbnz	r0, 80022a6 <_read+0x20>
 8002296:	f000 f929 	bl	80024ec <__errno>
 800229a:	2309      	movs	r3, #9
 800229c:	6003      	str	r3, [r0, #0]
 800229e:	f04f 30ff 	mov.w	r0, #4294967295
 80022a2:	b003      	add	sp, #12
 80022a4:	bd30      	pop	{r4, r5, pc}
 80022a6:	6800      	ldr	r0, [r0, #0]
 80022a8:	462a      	mov	r2, r5
 80022aa:	f7ff ffdc 	bl	8002266 <_swiread>
 80022ae:	1c43      	adds	r3, r0, #1
 80022b0:	d0f7      	beq.n	80022a2 <_read+0x1c>
 80022b2:	6863      	ldr	r3, [r4, #4]
 80022b4:	1a2a      	subs	r2, r5, r0
 80022b6:	4413      	add	r3, r2
 80022b8:	6063      	str	r3, [r4, #4]
 80022ba:	4610      	mov	r0, r2
 80022bc:	e7f1      	b.n	80022a2 <_read+0x1c>

080022be <_swilseek>:
 80022be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022c0:	460c      	mov	r4, r1
 80022c2:	4616      	mov	r6, r2
 80022c4:	f7ff ffa2 	bl	800220c <findslot>
 80022c8:	4605      	mov	r5, r0
 80022ca:	b940      	cbnz	r0, 80022de <_swilseek+0x20>
 80022cc:	f000 f90e 	bl	80024ec <__errno>
 80022d0:	2309      	movs	r3, #9
 80022d2:	6003      	str	r3, [r0, #0]
 80022d4:	f04f 34ff 	mov.w	r4, #4294967295
 80022d8:	4620      	mov	r0, r4
 80022da:	b003      	add	sp, #12
 80022dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022de:	2e02      	cmp	r6, #2
 80022e0:	d903      	bls.n	80022ea <_swilseek+0x2c>
 80022e2:	f000 f903 	bl	80024ec <__errno>
 80022e6:	2316      	movs	r3, #22
 80022e8:	e7f3      	b.n	80022d2 <_swilseek+0x14>
 80022ea:	2e01      	cmp	r6, #1
 80022ec:	d112      	bne.n	8002314 <_swilseek+0x56>
 80022ee:	6843      	ldr	r3, [r0, #4]
 80022f0:	18e4      	adds	r4, r4, r3
 80022f2:	d4f6      	bmi.n	80022e2 <_swilseek+0x24>
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	260a      	movs	r6, #10
 80022f8:	e9cd 3400 	strd	r3, r4, [sp]
 80022fc:	466f      	mov	r7, sp
 80022fe:	4630      	mov	r0, r6
 8002300:	4639      	mov	r1, r7
 8002302:	beab      	bkpt	0x00ab
 8002304:	4606      	mov	r6, r0
 8002306:	4630      	mov	r0, r6
 8002308:	f7ff ffa8 	bl	800225c <checkerror>
 800230c:	2800      	cmp	r0, #0
 800230e:	dbe1      	blt.n	80022d4 <_swilseek+0x16>
 8002310:	606c      	str	r4, [r5, #4]
 8002312:	e7e1      	b.n	80022d8 <_swilseek+0x1a>
 8002314:	2e02      	cmp	r6, #2
 8002316:	d1ed      	bne.n	80022f4 <_swilseek+0x36>
 8002318:	6803      	ldr	r3, [r0, #0]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	260c      	movs	r6, #12
 800231e:	466f      	mov	r7, sp
 8002320:	4630      	mov	r0, r6
 8002322:	4639      	mov	r1, r7
 8002324:	beab      	bkpt	0x00ab
 8002326:	4606      	mov	r6, r0
 8002328:	4630      	mov	r0, r6
 800232a:	f7ff ff97 	bl	800225c <checkerror>
 800232e:	1c43      	adds	r3, r0, #1
 8002330:	d0d0      	beq.n	80022d4 <_swilseek+0x16>
 8002332:	4404      	add	r4, r0
 8002334:	e7de      	b.n	80022f4 <_swilseek+0x36>

08002336 <_lseek>:
 8002336:	f7ff bfc2 	b.w	80022be <_swilseek>

0800233a <_swiwrite>:
 800233a:	b530      	push	{r4, r5, lr}
 800233c:	b085      	sub	sp, #20
 800233e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002342:	9203      	str	r2, [sp, #12]
 8002344:	2405      	movs	r4, #5
 8002346:	ad01      	add	r5, sp, #4
 8002348:	4620      	mov	r0, r4
 800234a:	4629      	mov	r1, r5
 800234c:	beab      	bkpt	0x00ab
 800234e:	4604      	mov	r4, r0
 8002350:	4620      	mov	r0, r4
 8002352:	f7ff ff83 	bl	800225c <checkerror>
 8002356:	b005      	add	sp, #20
 8002358:	bd30      	pop	{r4, r5, pc}

0800235a <_write>:
 800235a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800235c:	4615      	mov	r5, r2
 800235e:	9101      	str	r1, [sp, #4]
 8002360:	f7ff ff54 	bl	800220c <findslot>
 8002364:	9901      	ldr	r1, [sp, #4]
 8002366:	4604      	mov	r4, r0
 8002368:	b930      	cbnz	r0, 8002378 <_write+0x1e>
 800236a:	f000 f8bf 	bl	80024ec <__errno>
 800236e:	2309      	movs	r3, #9
 8002370:	6003      	str	r3, [r0, #0]
 8002372:	f04f 30ff 	mov.w	r0, #4294967295
 8002376:	e012      	b.n	800239e <_write+0x44>
 8002378:	6800      	ldr	r0, [r0, #0]
 800237a:	462a      	mov	r2, r5
 800237c:	f7ff ffdd 	bl	800233a <_swiwrite>
 8002380:	2800      	cmp	r0, #0
 8002382:	dbf6      	blt.n	8002372 <_write+0x18>
 8002384:	6862      	ldr	r2, [r4, #4]
 8002386:	1a2b      	subs	r3, r5, r0
 8002388:	441a      	add	r2, r3
 800238a:	42a8      	cmp	r0, r5
 800238c:	6062      	str	r2, [r4, #4]
 800238e:	d105      	bne.n	800239c <_write+0x42>
 8002390:	2000      	movs	r0, #0
 8002392:	b003      	add	sp, #12
 8002394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002398:	f7ff bf52 	b.w	8002240 <error>
 800239c:	4618      	mov	r0, r3
 800239e:	b003      	add	sp, #12
 80023a0:	bd30      	pop	{r4, r5, pc}

080023a2 <_swiclose>:
 80023a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023a4:	2402      	movs	r4, #2
 80023a6:	9001      	str	r0, [sp, #4]
 80023a8:	ad01      	add	r5, sp, #4
 80023aa:	4620      	mov	r0, r4
 80023ac:	4629      	mov	r1, r5
 80023ae:	beab      	bkpt	0x00ab
 80023b0:	4604      	mov	r4, r0
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff ff52 	bl	800225c <checkerror>
 80023b8:	b003      	add	sp, #12
 80023ba:	bd30      	pop	{r4, r5, pc}

080023bc <_close>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	4605      	mov	r5, r0
 80023c0:	f7ff ff24 	bl	800220c <findslot>
 80023c4:	4604      	mov	r4, r0
 80023c6:	b930      	cbnz	r0, 80023d6 <_close+0x1a>
 80023c8:	f000 f890 	bl	80024ec <__errno>
 80023cc:	2309      	movs	r3, #9
 80023ce:	6003      	str	r3, [r0, #0]
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	bd38      	pop	{r3, r4, r5, pc}
 80023d6:	3d01      	subs	r5, #1
 80023d8:	2d01      	cmp	r5, #1
 80023da:	d809      	bhi.n	80023f0 <_close+0x34>
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <_close+0x48>)
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d104      	bne.n	80023f0 <_close+0x34>
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	6003      	str	r3, [r0, #0]
 80023ec:	2000      	movs	r0, #0
 80023ee:	e7f1      	b.n	80023d4 <_close+0x18>
 80023f0:	6820      	ldr	r0, [r4, #0]
 80023f2:	f7ff ffd6 	bl	80023a2 <_swiclose>
 80023f6:	2800      	cmp	r0, #0
 80023f8:	d1ec      	bne.n	80023d4 <_close+0x18>
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	6023      	str	r3, [r4, #0]
 8002400:	e7e8      	b.n	80023d4 <_close+0x18>
 8002402:	bf00      	nop
 8002404:	200002b4 	.word	0x200002b4

08002408 <_getpid>:
 8002408:	2001      	movs	r0, #1
 800240a:	4770      	bx	lr

0800240c <_sbrk>:
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <_sbrk+0x38>)
 800240e:	6811      	ldr	r1, [r2, #0]
 8002410:	b510      	push	{r4, lr}
 8002412:	4603      	mov	r3, r0
 8002414:	b909      	cbnz	r1, 800241a <_sbrk+0xe>
 8002416:	490c      	ldr	r1, [pc, #48]	; (8002448 <_sbrk+0x3c>)
 8002418:	6011      	str	r1, [r2, #0]
 800241a:	6810      	ldr	r0, [r2, #0]
 800241c:	4669      	mov	r1, sp
 800241e:	4403      	add	r3, r0
 8002420:	428b      	cmp	r3, r1
 8002422:	d806      	bhi.n	8002432 <_sbrk+0x26>
 8002424:	4909      	ldr	r1, [pc, #36]	; (800244c <_sbrk+0x40>)
 8002426:	4c0a      	ldr	r4, [pc, #40]	; (8002450 <_sbrk+0x44>)
 8002428:	6809      	ldr	r1, [r1, #0]
 800242a:	42a1      	cmp	r1, r4
 800242c:	d008      	beq.n	8002440 <_sbrk+0x34>
 800242e:	428b      	cmp	r3, r1
 8002430:	d906      	bls.n	8002440 <_sbrk+0x34>
 8002432:	f000 f85b 	bl	80024ec <__errno>
 8002436:	230c      	movs	r3, #12
 8002438:	6003      	str	r3, [r0, #0]
 800243a:	f04f 30ff 	mov.w	r0, #4294967295
 800243e:	bd10      	pop	{r4, pc}
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e7fc      	b.n	800243e <_sbrk+0x32>
 8002444:	200002b0 	.word	0x200002b0
 8002448:	20000368 	.word	0x20000368
 800244c:	2000000c 	.word	0x2000000c
 8002450:	cafedead 	.word	0xcafedead

08002454 <_swistat>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	460c      	mov	r4, r1
 8002458:	f7ff fed8 	bl	800220c <findslot>
 800245c:	4605      	mov	r5, r0
 800245e:	b930      	cbnz	r0, 800246e <_swistat+0x1a>
 8002460:	f000 f844 	bl	80024ec <__errno>
 8002464:	2309      	movs	r3, #9
 8002466:	6003      	str	r3, [r0, #0]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	bd70      	pop	{r4, r5, r6, pc}
 800246e:	6863      	ldr	r3, [r4, #4]
 8002470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002474:	6063      	str	r3, [r4, #4]
 8002476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800247a:	64a3      	str	r3, [r4, #72]	; 0x48
 800247c:	260c      	movs	r6, #12
 800247e:	4630      	mov	r0, r6
 8002480:	4629      	mov	r1, r5
 8002482:	beab      	bkpt	0x00ab
 8002484:	4605      	mov	r5, r0
 8002486:	4628      	mov	r0, r5
 8002488:	f7ff fee8 	bl	800225c <checkerror>
 800248c:	1c43      	adds	r3, r0, #1
 800248e:	bf1c      	itt	ne
 8002490:	6120      	strne	r0, [r4, #16]
 8002492:	2000      	movne	r0, #0
 8002494:	e7ea      	b.n	800246c <_swistat+0x18>

08002496 <_fstat>:
 8002496:	460b      	mov	r3, r1
 8002498:	b510      	push	{r4, lr}
 800249a:	2100      	movs	r1, #0
 800249c:	4604      	mov	r4, r0
 800249e:	2258      	movs	r2, #88	; 0x58
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f946 	bl	8002732 <memset>
 80024a6:	4601      	mov	r1, r0
 80024a8:	4620      	mov	r0, r4
 80024aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024ae:	f7ff bfd1 	b.w	8002454 <_swistat>

080024b2 <_isatty>:
 80024b2:	b570      	push	{r4, r5, r6, lr}
 80024b4:	f7ff feaa 	bl	800220c <findslot>
 80024b8:	2509      	movs	r5, #9
 80024ba:	4604      	mov	r4, r0
 80024bc:	b920      	cbnz	r0, 80024c8 <_isatty+0x16>
 80024be:	f000 f815 	bl	80024ec <__errno>
 80024c2:	6005      	str	r5, [r0, #0]
 80024c4:	4620      	mov	r0, r4
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
 80024c8:	4628      	mov	r0, r5
 80024ca:	4621      	mov	r1, r4
 80024cc:	beab      	bkpt	0x00ab
 80024ce:	4604      	mov	r4, r0
 80024d0:	2c01      	cmp	r4, #1
 80024d2:	d0f7      	beq.n	80024c4 <_isatty+0x12>
 80024d4:	f000 f80a 	bl	80024ec <__errno>
 80024d8:	2400      	movs	r4, #0
 80024da:	4605      	mov	r5, r0
 80024dc:	2613      	movs	r6, #19
 80024de:	4630      	mov	r0, r6
 80024e0:	4621      	mov	r1, r4
 80024e2:	beab      	bkpt	0x00ab
 80024e4:	4606      	mov	r6, r0
 80024e6:	602e      	str	r6, [r5, #0]
 80024e8:	e7ec      	b.n	80024c4 <_isatty+0x12>
	...

080024ec <__errno>:
 80024ec:	4b01      	ldr	r3, [pc, #4]	; (80024f4 <__errno+0x8>)
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000010 	.word	0x20000010

080024f8 <std>:
 80024f8:	2300      	movs	r3, #0
 80024fa:	b510      	push	{r4, lr}
 80024fc:	4604      	mov	r4, r0
 80024fe:	e9c0 3300 	strd	r3, r3, [r0]
 8002502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002506:	6083      	str	r3, [r0, #8]
 8002508:	8181      	strh	r1, [r0, #12]
 800250a:	6643      	str	r3, [r0, #100]	; 0x64
 800250c:	81c2      	strh	r2, [r0, #14]
 800250e:	6183      	str	r3, [r0, #24]
 8002510:	4619      	mov	r1, r3
 8002512:	2208      	movs	r2, #8
 8002514:	305c      	adds	r0, #92	; 0x5c
 8002516:	f000 f90c 	bl	8002732 <memset>
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <std+0x38>)
 800251c:	6263      	str	r3, [r4, #36]	; 0x24
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <std+0x3c>)
 8002520:	62a3      	str	r3, [r4, #40]	; 0x28
 8002522:	4b05      	ldr	r3, [pc, #20]	; (8002538 <std+0x40>)
 8002524:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <std+0x44>)
 8002528:	6224      	str	r4, [r4, #32]
 800252a:	6323      	str	r3, [r4, #48]	; 0x30
 800252c:	bd10      	pop	{r4, pc}
 800252e:	bf00      	nop
 8002530:	080031a1 	.word	0x080031a1
 8002534:	080031c3 	.word	0x080031c3
 8002538:	080031fb 	.word	0x080031fb
 800253c:	0800321f 	.word	0x0800321f

08002540 <_cleanup_r>:
 8002540:	4901      	ldr	r1, [pc, #4]	; (8002548 <_cleanup_r+0x8>)
 8002542:	f000 b8af 	b.w	80026a4 <_fwalk_reent>
 8002546:	bf00      	nop
 8002548:	08004071 	.word	0x08004071

0800254c <__sfmoreglue>:
 800254c:	b570      	push	{r4, r5, r6, lr}
 800254e:	2268      	movs	r2, #104	; 0x68
 8002550:	1e4d      	subs	r5, r1, #1
 8002552:	4355      	muls	r5, r2
 8002554:	460e      	mov	r6, r1
 8002556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800255a:	f000 f913 	bl	8002784 <_malloc_r>
 800255e:	4604      	mov	r4, r0
 8002560:	b140      	cbz	r0, 8002574 <__sfmoreglue+0x28>
 8002562:	2100      	movs	r1, #0
 8002564:	e9c0 1600 	strd	r1, r6, [r0]
 8002568:	300c      	adds	r0, #12
 800256a:	60a0      	str	r0, [r4, #8]
 800256c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002570:	f000 f8df 	bl	8002732 <memset>
 8002574:	4620      	mov	r0, r4
 8002576:	bd70      	pop	{r4, r5, r6, pc}

08002578 <__sfp_lock_acquire>:
 8002578:	4801      	ldr	r0, [pc, #4]	; (8002580 <__sfp_lock_acquire+0x8>)
 800257a:	f000 b8d8 	b.w	800272e <__retarget_lock_acquire_recursive>
 800257e:	bf00      	nop
 8002580:	20000355 	.word	0x20000355

08002584 <__sfp_lock_release>:
 8002584:	4801      	ldr	r0, [pc, #4]	; (800258c <__sfp_lock_release+0x8>)
 8002586:	f000 b8d3 	b.w	8002730 <__retarget_lock_release_recursive>
 800258a:	bf00      	nop
 800258c:	20000355 	.word	0x20000355

08002590 <__sinit_lock_acquire>:
 8002590:	4801      	ldr	r0, [pc, #4]	; (8002598 <__sinit_lock_acquire+0x8>)
 8002592:	f000 b8cc 	b.w	800272e <__retarget_lock_acquire_recursive>
 8002596:	bf00      	nop
 8002598:	20000356 	.word	0x20000356

0800259c <__sinit_lock_release>:
 800259c:	4801      	ldr	r0, [pc, #4]	; (80025a4 <__sinit_lock_release+0x8>)
 800259e:	f000 b8c7 	b.w	8002730 <__retarget_lock_release_recursive>
 80025a2:	bf00      	nop
 80025a4:	20000356 	.word	0x20000356

080025a8 <__sinit>:
 80025a8:	b510      	push	{r4, lr}
 80025aa:	4604      	mov	r4, r0
 80025ac:	f7ff fff0 	bl	8002590 <__sinit_lock_acquire>
 80025b0:	69a3      	ldr	r3, [r4, #24]
 80025b2:	b11b      	cbz	r3, 80025bc <__sinit+0x14>
 80025b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025b8:	f7ff bff0 	b.w	800259c <__sinit_lock_release>
 80025bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80025c0:	6523      	str	r3, [r4, #80]	; 0x50
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <__sinit+0x68>)
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <__sinit+0x6c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80025ca:	42a3      	cmp	r3, r4
 80025cc:	bf04      	itt	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	61a3      	streq	r3, [r4, #24]
 80025d2:	4620      	mov	r0, r4
 80025d4:	f000 f820 	bl	8002618 <__sfp>
 80025d8:	6060      	str	r0, [r4, #4]
 80025da:	4620      	mov	r0, r4
 80025dc:	f000 f81c 	bl	8002618 <__sfp>
 80025e0:	60a0      	str	r0, [r4, #8]
 80025e2:	4620      	mov	r0, r4
 80025e4:	f000 f818 	bl	8002618 <__sfp>
 80025e8:	2200      	movs	r2, #0
 80025ea:	60e0      	str	r0, [r4, #12]
 80025ec:	2104      	movs	r1, #4
 80025ee:	6860      	ldr	r0, [r4, #4]
 80025f0:	f7ff ff82 	bl	80024f8 <std>
 80025f4:	68a0      	ldr	r0, [r4, #8]
 80025f6:	2201      	movs	r2, #1
 80025f8:	2109      	movs	r1, #9
 80025fa:	f7ff ff7d 	bl	80024f8 <std>
 80025fe:	68e0      	ldr	r0, [r4, #12]
 8002600:	2202      	movs	r2, #2
 8002602:	2112      	movs	r1, #18
 8002604:	f7ff ff78 	bl	80024f8 <std>
 8002608:	2301      	movs	r3, #1
 800260a:	61a3      	str	r3, [r4, #24]
 800260c:	e7d2      	b.n	80025b4 <__sinit+0xc>
 800260e:	bf00      	nop
 8002610:	080053d4 	.word	0x080053d4
 8002614:	08002541 	.word	0x08002541

08002618 <__sfp>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	4607      	mov	r7, r0
 800261c:	f7ff ffac 	bl	8002578 <__sfp_lock_acquire>
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <__sfp+0x84>)
 8002622:	681e      	ldr	r6, [r3, #0]
 8002624:	69b3      	ldr	r3, [r6, #24]
 8002626:	b913      	cbnz	r3, 800262e <__sfp+0x16>
 8002628:	4630      	mov	r0, r6
 800262a:	f7ff ffbd 	bl	80025a8 <__sinit>
 800262e:	3648      	adds	r6, #72	; 0x48
 8002630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002634:	3b01      	subs	r3, #1
 8002636:	d503      	bpl.n	8002640 <__sfp+0x28>
 8002638:	6833      	ldr	r3, [r6, #0]
 800263a:	b30b      	cbz	r3, 8002680 <__sfp+0x68>
 800263c:	6836      	ldr	r6, [r6, #0]
 800263e:	e7f7      	b.n	8002630 <__sfp+0x18>
 8002640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002644:	b9d5      	cbnz	r5, 800267c <__sfp+0x64>
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <__sfp+0x88>)
 8002648:	60e3      	str	r3, [r4, #12]
 800264a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800264e:	6665      	str	r5, [r4, #100]	; 0x64
 8002650:	f000 f86c 	bl	800272c <__retarget_lock_init_recursive>
 8002654:	f7ff ff96 	bl	8002584 <__sfp_lock_release>
 8002658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800265c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002660:	6025      	str	r5, [r4, #0]
 8002662:	61a5      	str	r5, [r4, #24]
 8002664:	2208      	movs	r2, #8
 8002666:	4629      	mov	r1, r5
 8002668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800266c:	f000 f861 	bl	8002732 <memset>
 8002670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002678:	4620      	mov	r0, r4
 800267a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800267c:	3468      	adds	r4, #104	; 0x68
 800267e:	e7d9      	b.n	8002634 <__sfp+0x1c>
 8002680:	2104      	movs	r1, #4
 8002682:	4638      	mov	r0, r7
 8002684:	f7ff ff62 	bl	800254c <__sfmoreglue>
 8002688:	4604      	mov	r4, r0
 800268a:	6030      	str	r0, [r6, #0]
 800268c:	2800      	cmp	r0, #0
 800268e:	d1d5      	bne.n	800263c <__sfp+0x24>
 8002690:	f7ff ff78 	bl	8002584 <__sfp_lock_release>
 8002694:	230c      	movs	r3, #12
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	e7ee      	b.n	8002678 <__sfp+0x60>
 800269a:	bf00      	nop
 800269c:	080053d4 	.word	0x080053d4
 80026a0:	ffff0001 	.word	0xffff0001

080026a4 <_fwalk_reent>:
 80026a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026a8:	4606      	mov	r6, r0
 80026aa:	4688      	mov	r8, r1
 80026ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026b0:	2700      	movs	r7, #0
 80026b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026b6:	f1b9 0901 	subs.w	r9, r9, #1
 80026ba:	d505      	bpl.n	80026c8 <_fwalk_reent+0x24>
 80026bc:	6824      	ldr	r4, [r4, #0]
 80026be:	2c00      	cmp	r4, #0
 80026c0:	d1f7      	bne.n	80026b2 <_fwalk_reent+0xe>
 80026c2:	4638      	mov	r0, r7
 80026c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026c8:	89ab      	ldrh	r3, [r5, #12]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d907      	bls.n	80026de <_fwalk_reent+0x3a>
 80026ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026d2:	3301      	adds	r3, #1
 80026d4:	d003      	beq.n	80026de <_fwalk_reent+0x3a>
 80026d6:	4629      	mov	r1, r5
 80026d8:	4630      	mov	r0, r6
 80026da:	47c0      	blx	r8
 80026dc:	4307      	orrs	r7, r0
 80026de:	3568      	adds	r5, #104	; 0x68
 80026e0:	e7e9      	b.n	80026b6 <_fwalk_reent+0x12>
	...

080026e4 <__libc_init_array>:
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	4d0d      	ldr	r5, [pc, #52]	; (800271c <__libc_init_array+0x38>)
 80026e8:	4c0d      	ldr	r4, [pc, #52]	; (8002720 <__libc_init_array+0x3c>)
 80026ea:	1b64      	subs	r4, r4, r5
 80026ec:	10a4      	asrs	r4, r4, #2
 80026ee:	2600      	movs	r6, #0
 80026f0:	42a6      	cmp	r6, r4
 80026f2:	d109      	bne.n	8002708 <__libc_init_array+0x24>
 80026f4:	4d0b      	ldr	r5, [pc, #44]	; (8002724 <__libc_init_array+0x40>)
 80026f6:	4c0c      	ldr	r4, [pc, #48]	; (8002728 <__libc_init_array+0x44>)
 80026f8:	f002 fe18 	bl	800532c <_init>
 80026fc:	1b64      	subs	r4, r4, r5
 80026fe:	10a4      	asrs	r4, r4, #2
 8002700:	2600      	movs	r6, #0
 8002702:	42a6      	cmp	r6, r4
 8002704:	d105      	bne.n	8002712 <__libc_init_array+0x2e>
 8002706:	bd70      	pop	{r4, r5, r6, pc}
 8002708:	f855 3b04 	ldr.w	r3, [r5], #4
 800270c:	4798      	blx	r3
 800270e:	3601      	adds	r6, #1
 8002710:	e7ee      	b.n	80026f0 <__libc_init_array+0xc>
 8002712:	f855 3b04 	ldr.w	r3, [r5], #4
 8002716:	4798      	blx	r3
 8002718:	3601      	adds	r6, #1
 800271a:	e7f2      	b.n	8002702 <__libc_init_array+0x1e>
 800271c:	0800574c 	.word	0x0800574c
 8002720:	0800574c 	.word	0x0800574c
 8002724:	0800574c 	.word	0x0800574c
 8002728:	08005750 	.word	0x08005750

0800272c <__retarget_lock_init_recursive>:
 800272c:	4770      	bx	lr

0800272e <__retarget_lock_acquire_recursive>:
 800272e:	4770      	bx	lr

08002730 <__retarget_lock_release_recursive>:
 8002730:	4770      	bx	lr

08002732 <memset>:
 8002732:	4402      	add	r2, r0
 8002734:	4603      	mov	r3, r0
 8002736:	4293      	cmp	r3, r2
 8002738:	d100      	bne.n	800273c <memset+0xa>
 800273a:	4770      	bx	lr
 800273c:	f803 1b01 	strb.w	r1, [r3], #1
 8002740:	e7f9      	b.n	8002736 <memset+0x4>
	...

08002744 <sbrk_aligned>:
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	4e0e      	ldr	r6, [pc, #56]	; (8002780 <sbrk_aligned+0x3c>)
 8002748:	460c      	mov	r4, r1
 800274a:	6831      	ldr	r1, [r6, #0]
 800274c:	4605      	mov	r5, r0
 800274e:	b911      	cbnz	r1, 8002756 <sbrk_aligned+0x12>
 8002750:	f000 fcf6 	bl	8003140 <_sbrk_r>
 8002754:	6030      	str	r0, [r6, #0]
 8002756:	4621      	mov	r1, r4
 8002758:	4628      	mov	r0, r5
 800275a:	f000 fcf1 	bl	8003140 <_sbrk_r>
 800275e:	1c43      	adds	r3, r0, #1
 8002760:	d00a      	beq.n	8002778 <sbrk_aligned+0x34>
 8002762:	1cc4      	adds	r4, r0, #3
 8002764:	f024 0403 	bic.w	r4, r4, #3
 8002768:	42a0      	cmp	r0, r4
 800276a:	d007      	beq.n	800277c <sbrk_aligned+0x38>
 800276c:	1a21      	subs	r1, r4, r0
 800276e:	4628      	mov	r0, r5
 8002770:	f000 fce6 	bl	8003140 <_sbrk_r>
 8002774:	3001      	adds	r0, #1
 8002776:	d101      	bne.n	800277c <sbrk_aligned+0x38>
 8002778:	f04f 34ff 	mov.w	r4, #4294967295
 800277c:	4620      	mov	r0, r4
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	2000035c 	.word	0x2000035c

08002784 <_malloc_r>:
 8002784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002788:	1ccd      	adds	r5, r1, #3
 800278a:	f025 0503 	bic.w	r5, r5, #3
 800278e:	3508      	adds	r5, #8
 8002790:	2d0c      	cmp	r5, #12
 8002792:	bf38      	it	cc
 8002794:	250c      	movcc	r5, #12
 8002796:	2d00      	cmp	r5, #0
 8002798:	4607      	mov	r7, r0
 800279a:	db01      	blt.n	80027a0 <_malloc_r+0x1c>
 800279c:	42a9      	cmp	r1, r5
 800279e:	d905      	bls.n	80027ac <_malloc_r+0x28>
 80027a0:	230c      	movs	r3, #12
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	2600      	movs	r6, #0
 80027a6:	4630      	mov	r0, r6
 80027a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027ac:	4e2e      	ldr	r6, [pc, #184]	; (8002868 <_malloc_r+0xe4>)
 80027ae:	f001 fcc7 	bl	8004140 <__malloc_lock>
 80027b2:	6833      	ldr	r3, [r6, #0]
 80027b4:	461c      	mov	r4, r3
 80027b6:	bb34      	cbnz	r4, 8002806 <_malloc_r+0x82>
 80027b8:	4629      	mov	r1, r5
 80027ba:	4638      	mov	r0, r7
 80027bc:	f7ff ffc2 	bl	8002744 <sbrk_aligned>
 80027c0:	1c43      	adds	r3, r0, #1
 80027c2:	4604      	mov	r4, r0
 80027c4:	d14d      	bne.n	8002862 <_malloc_r+0xde>
 80027c6:	6834      	ldr	r4, [r6, #0]
 80027c8:	4626      	mov	r6, r4
 80027ca:	2e00      	cmp	r6, #0
 80027cc:	d140      	bne.n	8002850 <_malloc_r+0xcc>
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	4631      	mov	r1, r6
 80027d2:	4638      	mov	r0, r7
 80027d4:	eb04 0803 	add.w	r8, r4, r3
 80027d8:	f000 fcb2 	bl	8003140 <_sbrk_r>
 80027dc:	4580      	cmp	r8, r0
 80027de:	d13a      	bne.n	8002856 <_malloc_r+0xd2>
 80027e0:	6821      	ldr	r1, [r4, #0]
 80027e2:	3503      	adds	r5, #3
 80027e4:	1a6d      	subs	r5, r5, r1
 80027e6:	f025 0503 	bic.w	r5, r5, #3
 80027ea:	3508      	adds	r5, #8
 80027ec:	2d0c      	cmp	r5, #12
 80027ee:	bf38      	it	cc
 80027f0:	250c      	movcc	r5, #12
 80027f2:	4629      	mov	r1, r5
 80027f4:	4638      	mov	r0, r7
 80027f6:	f7ff ffa5 	bl	8002744 <sbrk_aligned>
 80027fa:	3001      	adds	r0, #1
 80027fc:	d02b      	beq.n	8002856 <_malloc_r+0xd2>
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	442b      	add	r3, r5
 8002802:	6023      	str	r3, [r4, #0]
 8002804:	e00e      	b.n	8002824 <_malloc_r+0xa0>
 8002806:	6822      	ldr	r2, [r4, #0]
 8002808:	1b52      	subs	r2, r2, r5
 800280a:	d41e      	bmi.n	800284a <_malloc_r+0xc6>
 800280c:	2a0b      	cmp	r2, #11
 800280e:	d916      	bls.n	800283e <_malloc_r+0xba>
 8002810:	1961      	adds	r1, r4, r5
 8002812:	42a3      	cmp	r3, r4
 8002814:	6025      	str	r5, [r4, #0]
 8002816:	bf18      	it	ne
 8002818:	6059      	strne	r1, [r3, #4]
 800281a:	6863      	ldr	r3, [r4, #4]
 800281c:	bf08      	it	eq
 800281e:	6031      	streq	r1, [r6, #0]
 8002820:	5162      	str	r2, [r4, r5]
 8002822:	604b      	str	r3, [r1, #4]
 8002824:	4638      	mov	r0, r7
 8002826:	f104 060b 	add.w	r6, r4, #11
 800282a:	f001 fc8f 	bl	800414c <__malloc_unlock>
 800282e:	f026 0607 	bic.w	r6, r6, #7
 8002832:	1d23      	adds	r3, r4, #4
 8002834:	1af2      	subs	r2, r6, r3
 8002836:	d0b6      	beq.n	80027a6 <_malloc_r+0x22>
 8002838:	1b9b      	subs	r3, r3, r6
 800283a:	50a3      	str	r3, [r4, r2]
 800283c:	e7b3      	b.n	80027a6 <_malloc_r+0x22>
 800283e:	6862      	ldr	r2, [r4, #4]
 8002840:	42a3      	cmp	r3, r4
 8002842:	bf0c      	ite	eq
 8002844:	6032      	streq	r2, [r6, #0]
 8002846:	605a      	strne	r2, [r3, #4]
 8002848:	e7ec      	b.n	8002824 <_malloc_r+0xa0>
 800284a:	4623      	mov	r3, r4
 800284c:	6864      	ldr	r4, [r4, #4]
 800284e:	e7b2      	b.n	80027b6 <_malloc_r+0x32>
 8002850:	4634      	mov	r4, r6
 8002852:	6876      	ldr	r6, [r6, #4]
 8002854:	e7b9      	b.n	80027ca <_malloc_r+0x46>
 8002856:	230c      	movs	r3, #12
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4638      	mov	r0, r7
 800285c:	f001 fc76 	bl	800414c <__malloc_unlock>
 8002860:	e7a1      	b.n	80027a6 <_malloc_r+0x22>
 8002862:	6025      	str	r5, [r4, #0]
 8002864:	e7de      	b.n	8002824 <_malloc_r+0xa0>
 8002866:	bf00      	nop
 8002868:	20000358 	.word	0x20000358

0800286c <__cvt>:
 800286c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002870:	ec55 4b10 	vmov	r4, r5, d0
 8002874:	2d00      	cmp	r5, #0
 8002876:	460e      	mov	r6, r1
 8002878:	4619      	mov	r1, r3
 800287a:	462b      	mov	r3, r5
 800287c:	bfbb      	ittet	lt
 800287e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002882:	461d      	movlt	r5, r3
 8002884:	2300      	movge	r3, #0
 8002886:	232d      	movlt	r3, #45	; 0x2d
 8002888:	700b      	strb	r3, [r1, #0]
 800288a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800288c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002890:	4691      	mov	r9, r2
 8002892:	f023 0820 	bic.w	r8, r3, #32
 8002896:	bfbc      	itt	lt
 8002898:	4622      	movlt	r2, r4
 800289a:	4614      	movlt	r4, r2
 800289c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80028a0:	d005      	beq.n	80028ae <__cvt+0x42>
 80028a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80028a6:	d100      	bne.n	80028aa <__cvt+0x3e>
 80028a8:	3601      	adds	r6, #1
 80028aa:	2102      	movs	r1, #2
 80028ac:	e000      	b.n	80028b0 <__cvt+0x44>
 80028ae:	2103      	movs	r1, #3
 80028b0:	ab03      	add	r3, sp, #12
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	ab02      	add	r3, sp, #8
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	ec45 4b10 	vmov	d0, r4, r5
 80028bc:	4653      	mov	r3, sl
 80028be:	4632      	mov	r2, r6
 80028c0:	f000 fd62 	bl	8003388 <_dtoa_r>
 80028c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80028c8:	4607      	mov	r7, r0
 80028ca:	d102      	bne.n	80028d2 <__cvt+0x66>
 80028cc:	f019 0f01 	tst.w	r9, #1
 80028d0:	d022      	beq.n	8002918 <__cvt+0xac>
 80028d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80028d6:	eb07 0906 	add.w	r9, r7, r6
 80028da:	d110      	bne.n	80028fe <__cvt+0x92>
 80028dc:	783b      	ldrb	r3, [r7, #0]
 80028de:	2b30      	cmp	r3, #48	; 0x30
 80028e0:	d10a      	bne.n	80028f8 <__cvt+0x8c>
 80028e2:	2200      	movs	r2, #0
 80028e4:	2300      	movs	r3, #0
 80028e6:	4620      	mov	r0, r4
 80028e8:	4629      	mov	r1, r5
 80028ea:	f7fe f90d 	bl	8000b08 <__aeabi_dcmpeq>
 80028ee:	b918      	cbnz	r0, 80028f8 <__cvt+0x8c>
 80028f0:	f1c6 0601 	rsb	r6, r6, #1
 80028f4:	f8ca 6000 	str.w	r6, [sl]
 80028f8:	f8da 3000 	ldr.w	r3, [sl]
 80028fc:	4499      	add	r9, r3
 80028fe:	2200      	movs	r2, #0
 8002900:	2300      	movs	r3, #0
 8002902:	4620      	mov	r0, r4
 8002904:	4629      	mov	r1, r5
 8002906:	f7fe f8ff 	bl	8000b08 <__aeabi_dcmpeq>
 800290a:	b108      	cbz	r0, 8002910 <__cvt+0xa4>
 800290c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002910:	2230      	movs	r2, #48	; 0x30
 8002912:	9b03      	ldr	r3, [sp, #12]
 8002914:	454b      	cmp	r3, r9
 8002916:	d307      	bcc.n	8002928 <__cvt+0xbc>
 8002918:	9b03      	ldr	r3, [sp, #12]
 800291a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800291c:	1bdb      	subs	r3, r3, r7
 800291e:	4638      	mov	r0, r7
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	b004      	add	sp, #16
 8002924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002928:	1c59      	adds	r1, r3, #1
 800292a:	9103      	str	r1, [sp, #12]
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e7f0      	b.n	8002912 <__cvt+0xa6>

08002930 <__exponent>:
 8002930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002932:	4603      	mov	r3, r0
 8002934:	2900      	cmp	r1, #0
 8002936:	bfb8      	it	lt
 8002938:	4249      	neglt	r1, r1
 800293a:	f803 2b02 	strb.w	r2, [r3], #2
 800293e:	bfb4      	ite	lt
 8002940:	222d      	movlt	r2, #45	; 0x2d
 8002942:	222b      	movge	r2, #43	; 0x2b
 8002944:	2909      	cmp	r1, #9
 8002946:	7042      	strb	r2, [r0, #1]
 8002948:	dd2a      	ble.n	80029a0 <__exponent+0x70>
 800294a:	f10d 0407 	add.w	r4, sp, #7
 800294e:	46a4      	mov	ip, r4
 8002950:	270a      	movs	r7, #10
 8002952:	46a6      	mov	lr, r4
 8002954:	460a      	mov	r2, r1
 8002956:	fb91 f6f7 	sdiv	r6, r1, r7
 800295a:	fb07 1516 	mls	r5, r7, r6, r1
 800295e:	3530      	adds	r5, #48	; 0x30
 8002960:	2a63      	cmp	r2, #99	; 0x63
 8002962:	f104 34ff 	add.w	r4, r4, #4294967295
 8002966:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800296a:	4631      	mov	r1, r6
 800296c:	dcf1      	bgt.n	8002952 <__exponent+0x22>
 800296e:	3130      	adds	r1, #48	; 0x30
 8002970:	f1ae 0502 	sub.w	r5, lr, #2
 8002974:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002978:	1c44      	adds	r4, r0, #1
 800297a:	4629      	mov	r1, r5
 800297c:	4561      	cmp	r1, ip
 800297e:	d30a      	bcc.n	8002996 <__exponent+0x66>
 8002980:	f10d 0209 	add.w	r2, sp, #9
 8002984:	eba2 020e 	sub.w	r2, r2, lr
 8002988:	4565      	cmp	r5, ip
 800298a:	bf88      	it	hi
 800298c:	2200      	movhi	r2, #0
 800298e:	4413      	add	r3, r2
 8002990:	1a18      	subs	r0, r3, r0
 8002992:	b003      	add	sp, #12
 8002994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800299a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800299e:	e7ed      	b.n	800297c <__exponent+0x4c>
 80029a0:	2330      	movs	r3, #48	; 0x30
 80029a2:	3130      	adds	r1, #48	; 0x30
 80029a4:	7083      	strb	r3, [r0, #2]
 80029a6:	70c1      	strb	r1, [r0, #3]
 80029a8:	1d03      	adds	r3, r0, #4
 80029aa:	e7f1      	b.n	8002990 <__exponent+0x60>

080029ac <_printf_float>:
 80029ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029b0:	ed2d 8b02 	vpush	{d8}
 80029b4:	b08d      	sub	sp, #52	; 0x34
 80029b6:	460c      	mov	r4, r1
 80029b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80029bc:	4616      	mov	r6, r2
 80029be:	461f      	mov	r7, r3
 80029c0:	4605      	mov	r5, r0
 80029c2:	f001 fb91 	bl	80040e8 <_localeconv_r>
 80029c6:	f8d0 a000 	ldr.w	sl, [r0]
 80029ca:	4650      	mov	r0, sl
 80029cc:	f7fd fc20 	bl	8000210 <strlen>
 80029d0:	2300      	movs	r3, #0
 80029d2:	930a      	str	r3, [sp, #40]	; 0x28
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	9305      	str	r3, [sp, #20]
 80029d8:	f8d8 3000 	ldr.w	r3, [r8]
 80029dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80029e0:	3307      	adds	r3, #7
 80029e2:	f023 0307 	bic.w	r3, r3, #7
 80029e6:	f103 0208 	add.w	r2, r3, #8
 80029ea:	f8c8 2000 	str.w	r2, [r8]
 80029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80029f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80029fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80029fe:	9307      	str	r3, [sp, #28]
 8002a00:	f8cd 8018 	str.w	r8, [sp, #24]
 8002a04:	ee08 0a10 	vmov	s16, r0
 8002a08:	4b9f      	ldr	r3, [pc, #636]	; (8002c88 <_printf_float+0x2dc>)
 8002a0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a12:	f7fe f8ab 	bl	8000b6c <__aeabi_dcmpun>
 8002a16:	bb88      	cbnz	r0, 8002a7c <_printf_float+0xd0>
 8002a18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a1c:	4b9a      	ldr	r3, [pc, #616]	; (8002c88 <_printf_float+0x2dc>)
 8002a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a22:	f7fe f885 	bl	8000b30 <__aeabi_dcmple>
 8002a26:	bb48      	cbnz	r0, 8002a7c <_printf_float+0xd0>
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	4640      	mov	r0, r8
 8002a2e:	4649      	mov	r1, r9
 8002a30:	f7fe f874 	bl	8000b1c <__aeabi_dcmplt>
 8002a34:	b110      	cbz	r0, 8002a3c <_printf_float+0x90>
 8002a36:	232d      	movs	r3, #45	; 0x2d
 8002a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a3c:	4b93      	ldr	r3, [pc, #588]	; (8002c8c <_printf_float+0x2e0>)
 8002a3e:	4894      	ldr	r0, [pc, #592]	; (8002c90 <_printf_float+0x2e4>)
 8002a40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002a44:	bf94      	ite	ls
 8002a46:	4698      	movls	r8, r3
 8002a48:	4680      	movhi	r8, r0
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	6123      	str	r3, [r4, #16]
 8002a4e:	9b05      	ldr	r3, [sp, #20]
 8002a50:	f023 0204 	bic.w	r2, r3, #4
 8002a54:	6022      	str	r2, [r4, #0]
 8002a56:	f04f 0900 	mov.w	r9, #0
 8002a5a:	9700      	str	r7, [sp, #0]
 8002a5c:	4633      	mov	r3, r6
 8002a5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002a60:	4621      	mov	r1, r4
 8002a62:	4628      	mov	r0, r5
 8002a64:	f000 f9d8 	bl	8002e18 <_printf_common>
 8002a68:	3001      	adds	r0, #1
 8002a6a:	f040 8090 	bne.w	8002b8e <_printf_float+0x1e2>
 8002a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a72:	b00d      	add	sp, #52	; 0x34
 8002a74:	ecbd 8b02 	vpop	{d8}
 8002a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	464b      	mov	r3, r9
 8002a80:	4640      	mov	r0, r8
 8002a82:	4649      	mov	r1, r9
 8002a84:	f7fe f872 	bl	8000b6c <__aeabi_dcmpun>
 8002a88:	b140      	cbz	r0, 8002a9c <_printf_float+0xf0>
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bfbc      	itt	lt
 8002a90:	232d      	movlt	r3, #45	; 0x2d
 8002a92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002a96:	487f      	ldr	r0, [pc, #508]	; (8002c94 <_printf_float+0x2e8>)
 8002a98:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <_printf_float+0x2ec>)
 8002a9a:	e7d1      	b.n	8002a40 <_printf_float+0x94>
 8002a9c:	6863      	ldr	r3, [r4, #4]
 8002a9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002aa2:	9206      	str	r2, [sp, #24]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	d13f      	bne.n	8002b28 <_printf_float+0x17c>
 8002aa8:	2306      	movs	r3, #6
 8002aaa:	6063      	str	r3, [r4, #4]
 8002aac:	9b05      	ldr	r3, [sp, #20]
 8002aae:	6861      	ldr	r1, [r4, #4]
 8002ab0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	9303      	str	r3, [sp, #12]
 8002ab8:	ab0a      	add	r3, sp, #40	; 0x28
 8002aba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002abe:	ab09      	add	r3, sp, #36	; 0x24
 8002ac0:	ec49 8b10 	vmov	d0, r8, r9
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	6022      	str	r2, [r4, #0]
 8002ac8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002acc:	4628      	mov	r0, r5
 8002ace:	f7ff fecd 	bl	800286c <__cvt>
 8002ad2:	9b06      	ldr	r3, [sp, #24]
 8002ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ad6:	2b47      	cmp	r3, #71	; 0x47
 8002ad8:	4680      	mov	r8, r0
 8002ada:	d108      	bne.n	8002aee <_printf_float+0x142>
 8002adc:	1cc8      	adds	r0, r1, #3
 8002ade:	db02      	blt.n	8002ae6 <_printf_float+0x13a>
 8002ae0:	6863      	ldr	r3, [r4, #4]
 8002ae2:	4299      	cmp	r1, r3
 8002ae4:	dd41      	ble.n	8002b6a <_printf_float+0x1be>
 8002ae6:	f1ab 0b02 	sub.w	fp, fp, #2
 8002aea:	fa5f fb8b 	uxtb.w	fp, fp
 8002aee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002af2:	d820      	bhi.n	8002b36 <_printf_float+0x18a>
 8002af4:	3901      	subs	r1, #1
 8002af6:	465a      	mov	r2, fp
 8002af8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002afc:	9109      	str	r1, [sp, #36]	; 0x24
 8002afe:	f7ff ff17 	bl	8002930 <__exponent>
 8002b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b04:	1813      	adds	r3, r2, r0
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	4681      	mov	r9, r0
 8002b0a:	6123      	str	r3, [r4, #16]
 8002b0c:	dc02      	bgt.n	8002b14 <_printf_float+0x168>
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	07d2      	lsls	r2, r2, #31
 8002b12:	d501      	bpl.n	8002b18 <_printf_float+0x16c>
 8002b14:	3301      	adds	r3, #1
 8002b16:	6123      	str	r3, [r4, #16]
 8002b18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d09c      	beq.n	8002a5a <_printf_float+0xae>
 8002b20:	232d      	movs	r3, #45	; 0x2d
 8002b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b26:	e798      	b.n	8002a5a <_printf_float+0xae>
 8002b28:	9a06      	ldr	r2, [sp, #24]
 8002b2a:	2a47      	cmp	r2, #71	; 0x47
 8002b2c:	d1be      	bne.n	8002aac <_printf_float+0x100>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1bc      	bne.n	8002aac <_printf_float+0x100>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e7b9      	b.n	8002aaa <_printf_float+0xfe>
 8002b36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002b3a:	d118      	bne.n	8002b6e <_printf_float+0x1c2>
 8002b3c:	2900      	cmp	r1, #0
 8002b3e:	6863      	ldr	r3, [r4, #4]
 8002b40:	dd0b      	ble.n	8002b5a <_printf_float+0x1ae>
 8002b42:	6121      	str	r1, [r4, #16]
 8002b44:	b913      	cbnz	r3, 8002b4c <_printf_float+0x1a0>
 8002b46:	6822      	ldr	r2, [r4, #0]
 8002b48:	07d0      	lsls	r0, r2, #31
 8002b4a:	d502      	bpl.n	8002b52 <_printf_float+0x1a6>
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	440b      	add	r3, r1
 8002b50:	6123      	str	r3, [r4, #16]
 8002b52:	65a1      	str	r1, [r4, #88]	; 0x58
 8002b54:	f04f 0900 	mov.w	r9, #0
 8002b58:	e7de      	b.n	8002b18 <_printf_float+0x16c>
 8002b5a:	b913      	cbnz	r3, 8002b62 <_printf_float+0x1b6>
 8002b5c:	6822      	ldr	r2, [r4, #0]
 8002b5e:	07d2      	lsls	r2, r2, #31
 8002b60:	d501      	bpl.n	8002b66 <_printf_float+0x1ba>
 8002b62:	3302      	adds	r3, #2
 8002b64:	e7f4      	b.n	8002b50 <_printf_float+0x1a4>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e7f2      	b.n	8002b50 <_printf_float+0x1a4>
 8002b6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b70:	4299      	cmp	r1, r3
 8002b72:	db05      	blt.n	8002b80 <_printf_float+0x1d4>
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	6121      	str	r1, [r4, #16]
 8002b78:	07d8      	lsls	r0, r3, #31
 8002b7a:	d5ea      	bpl.n	8002b52 <_printf_float+0x1a6>
 8002b7c:	1c4b      	adds	r3, r1, #1
 8002b7e:	e7e7      	b.n	8002b50 <_printf_float+0x1a4>
 8002b80:	2900      	cmp	r1, #0
 8002b82:	bfd4      	ite	le
 8002b84:	f1c1 0202 	rsble	r2, r1, #2
 8002b88:	2201      	movgt	r2, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	e7e0      	b.n	8002b50 <_printf_float+0x1a4>
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	055a      	lsls	r2, r3, #21
 8002b92:	d407      	bmi.n	8002ba4 <_printf_float+0x1f8>
 8002b94:	6923      	ldr	r3, [r4, #16]
 8002b96:	4642      	mov	r2, r8
 8002b98:	4631      	mov	r1, r6
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	47b8      	blx	r7
 8002b9e:	3001      	adds	r0, #1
 8002ba0:	d12c      	bne.n	8002bfc <_printf_float+0x250>
 8002ba2:	e764      	b.n	8002a6e <_printf_float+0xc2>
 8002ba4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002ba8:	f240 80e0 	bls.w	8002d6c <_printf_float+0x3c0>
 8002bac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f7fd ffa8 	bl	8000b08 <__aeabi_dcmpeq>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d034      	beq.n	8002c26 <_printf_float+0x27a>
 8002bbc:	4a37      	ldr	r2, [pc, #220]	; (8002c9c <_printf_float+0x2f0>)
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	4631      	mov	r1, r6
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	47b8      	blx	r7
 8002bc6:	3001      	adds	r0, #1
 8002bc8:	f43f af51 	beq.w	8002a6e <_printf_float+0xc2>
 8002bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	db02      	blt.n	8002bda <_printf_float+0x22e>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	07d8      	lsls	r0, r3, #31
 8002bd8:	d510      	bpl.n	8002bfc <_printf_float+0x250>
 8002bda:	ee18 3a10 	vmov	r3, s16
 8002bde:	4652      	mov	r2, sl
 8002be0:	4631      	mov	r1, r6
 8002be2:	4628      	mov	r0, r5
 8002be4:	47b8      	blx	r7
 8002be6:	3001      	adds	r0, #1
 8002be8:	f43f af41 	beq.w	8002a6e <_printf_float+0xc2>
 8002bec:	f04f 0800 	mov.w	r8, #0
 8002bf0:	f104 091a 	add.w	r9, r4, #26
 8002bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	4543      	cmp	r3, r8
 8002bfa:	dc09      	bgt.n	8002c10 <_printf_float+0x264>
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	079b      	lsls	r3, r3, #30
 8002c00:	f100 8105 	bmi.w	8002e0e <_printf_float+0x462>
 8002c04:	68e0      	ldr	r0, [r4, #12]
 8002c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c08:	4298      	cmp	r0, r3
 8002c0a:	bfb8      	it	lt
 8002c0c:	4618      	movlt	r0, r3
 8002c0e:	e730      	b.n	8002a72 <_printf_float+0xc6>
 8002c10:	2301      	movs	r3, #1
 8002c12:	464a      	mov	r2, r9
 8002c14:	4631      	mov	r1, r6
 8002c16:	4628      	mov	r0, r5
 8002c18:	47b8      	blx	r7
 8002c1a:	3001      	adds	r0, #1
 8002c1c:	f43f af27 	beq.w	8002a6e <_printf_float+0xc2>
 8002c20:	f108 0801 	add.w	r8, r8, #1
 8002c24:	e7e6      	b.n	8002bf4 <_printf_float+0x248>
 8002c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	dc39      	bgt.n	8002ca0 <_printf_float+0x2f4>
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <_printf_float+0x2f0>)
 8002c2e:	2301      	movs	r3, #1
 8002c30:	4631      	mov	r1, r6
 8002c32:	4628      	mov	r0, r5
 8002c34:	47b8      	blx	r7
 8002c36:	3001      	adds	r0, #1
 8002c38:	f43f af19 	beq.w	8002a6e <_printf_float+0xc2>
 8002c3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c40:	4313      	orrs	r3, r2
 8002c42:	d102      	bne.n	8002c4a <_printf_float+0x29e>
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	07d9      	lsls	r1, r3, #31
 8002c48:	d5d8      	bpl.n	8002bfc <_printf_float+0x250>
 8002c4a:	ee18 3a10 	vmov	r3, s16
 8002c4e:	4652      	mov	r2, sl
 8002c50:	4631      	mov	r1, r6
 8002c52:	4628      	mov	r0, r5
 8002c54:	47b8      	blx	r7
 8002c56:	3001      	adds	r0, #1
 8002c58:	f43f af09 	beq.w	8002a6e <_printf_float+0xc2>
 8002c5c:	f04f 0900 	mov.w	r9, #0
 8002c60:	f104 0a1a 	add.w	sl, r4, #26
 8002c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c66:	425b      	negs	r3, r3
 8002c68:	454b      	cmp	r3, r9
 8002c6a:	dc01      	bgt.n	8002c70 <_printf_float+0x2c4>
 8002c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c6e:	e792      	b.n	8002b96 <_printf_float+0x1ea>
 8002c70:	2301      	movs	r3, #1
 8002c72:	4652      	mov	r2, sl
 8002c74:	4631      	mov	r1, r6
 8002c76:	4628      	mov	r0, r5
 8002c78:	47b8      	blx	r7
 8002c7a:	3001      	adds	r0, #1
 8002c7c:	f43f aef7 	beq.w	8002a6e <_printf_float+0xc2>
 8002c80:	f109 0901 	add.w	r9, r9, #1
 8002c84:	e7ee      	b.n	8002c64 <_printf_float+0x2b8>
 8002c86:	bf00      	nop
 8002c88:	7fefffff 	.word	0x7fefffff
 8002c8c:	080053d8 	.word	0x080053d8
 8002c90:	080053dc 	.word	0x080053dc
 8002c94:	080053e4 	.word	0x080053e4
 8002c98:	080053e0 	.word	0x080053e0
 8002c9c:	080053e8 	.word	0x080053e8
 8002ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ca2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	bfa8      	it	ge
 8002ca8:	461a      	movge	r2, r3
 8002caa:	2a00      	cmp	r2, #0
 8002cac:	4691      	mov	r9, r2
 8002cae:	dc37      	bgt.n	8002d20 <_printf_float+0x374>
 8002cb0:	f04f 0b00 	mov.w	fp, #0
 8002cb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002cb8:	f104 021a 	add.w	r2, r4, #26
 8002cbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cbe:	9305      	str	r3, [sp, #20]
 8002cc0:	eba3 0309 	sub.w	r3, r3, r9
 8002cc4:	455b      	cmp	r3, fp
 8002cc6:	dc33      	bgt.n	8002d30 <_printf_float+0x384>
 8002cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	db3b      	blt.n	8002d48 <_printf_float+0x39c>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	07da      	lsls	r2, r3, #31
 8002cd4:	d438      	bmi.n	8002d48 <_printf_float+0x39c>
 8002cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cd8:	9a05      	ldr	r2, [sp, #20]
 8002cda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cdc:	1a9a      	subs	r2, r3, r2
 8002cde:	eba3 0901 	sub.w	r9, r3, r1
 8002ce2:	4591      	cmp	r9, r2
 8002ce4:	bfa8      	it	ge
 8002ce6:	4691      	movge	r9, r2
 8002ce8:	f1b9 0f00 	cmp.w	r9, #0
 8002cec:	dc35      	bgt.n	8002d5a <_printf_float+0x3ae>
 8002cee:	f04f 0800 	mov.w	r8, #0
 8002cf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002cf6:	f104 0a1a 	add.w	sl, r4, #26
 8002cfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	eba3 0309 	sub.w	r3, r3, r9
 8002d04:	4543      	cmp	r3, r8
 8002d06:	f77f af79 	ble.w	8002bfc <_printf_float+0x250>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	4652      	mov	r2, sl
 8002d0e:	4631      	mov	r1, r6
 8002d10:	4628      	mov	r0, r5
 8002d12:	47b8      	blx	r7
 8002d14:	3001      	adds	r0, #1
 8002d16:	f43f aeaa 	beq.w	8002a6e <_printf_float+0xc2>
 8002d1a:	f108 0801 	add.w	r8, r8, #1
 8002d1e:	e7ec      	b.n	8002cfa <_printf_float+0x34e>
 8002d20:	4613      	mov	r3, r2
 8002d22:	4631      	mov	r1, r6
 8002d24:	4642      	mov	r2, r8
 8002d26:	4628      	mov	r0, r5
 8002d28:	47b8      	blx	r7
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	d1c0      	bne.n	8002cb0 <_printf_float+0x304>
 8002d2e:	e69e      	b.n	8002a6e <_printf_float+0xc2>
 8002d30:	2301      	movs	r3, #1
 8002d32:	4631      	mov	r1, r6
 8002d34:	4628      	mov	r0, r5
 8002d36:	9205      	str	r2, [sp, #20]
 8002d38:	47b8      	blx	r7
 8002d3a:	3001      	adds	r0, #1
 8002d3c:	f43f ae97 	beq.w	8002a6e <_printf_float+0xc2>
 8002d40:	9a05      	ldr	r2, [sp, #20]
 8002d42:	f10b 0b01 	add.w	fp, fp, #1
 8002d46:	e7b9      	b.n	8002cbc <_printf_float+0x310>
 8002d48:	ee18 3a10 	vmov	r3, s16
 8002d4c:	4652      	mov	r2, sl
 8002d4e:	4631      	mov	r1, r6
 8002d50:	4628      	mov	r0, r5
 8002d52:	47b8      	blx	r7
 8002d54:	3001      	adds	r0, #1
 8002d56:	d1be      	bne.n	8002cd6 <_printf_float+0x32a>
 8002d58:	e689      	b.n	8002a6e <_printf_float+0xc2>
 8002d5a:	9a05      	ldr	r2, [sp, #20]
 8002d5c:	464b      	mov	r3, r9
 8002d5e:	4442      	add	r2, r8
 8002d60:	4631      	mov	r1, r6
 8002d62:	4628      	mov	r0, r5
 8002d64:	47b8      	blx	r7
 8002d66:	3001      	adds	r0, #1
 8002d68:	d1c1      	bne.n	8002cee <_printf_float+0x342>
 8002d6a:	e680      	b.n	8002a6e <_printf_float+0xc2>
 8002d6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d6e:	2a01      	cmp	r2, #1
 8002d70:	dc01      	bgt.n	8002d76 <_printf_float+0x3ca>
 8002d72:	07db      	lsls	r3, r3, #31
 8002d74:	d538      	bpl.n	8002de8 <_printf_float+0x43c>
 8002d76:	2301      	movs	r3, #1
 8002d78:	4642      	mov	r2, r8
 8002d7a:	4631      	mov	r1, r6
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	47b8      	blx	r7
 8002d80:	3001      	adds	r0, #1
 8002d82:	f43f ae74 	beq.w	8002a6e <_printf_float+0xc2>
 8002d86:	ee18 3a10 	vmov	r3, s16
 8002d8a:	4652      	mov	r2, sl
 8002d8c:	4631      	mov	r1, r6
 8002d8e:	4628      	mov	r0, r5
 8002d90:	47b8      	blx	r7
 8002d92:	3001      	adds	r0, #1
 8002d94:	f43f ae6b 	beq.w	8002a6e <_printf_float+0xc2>
 8002d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f7fd feb2 	bl	8000b08 <__aeabi_dcmpeq>
 8002da4:	b9d8      	cbnz	r0, 8002dde <_printf_float+0x432>
 8002da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002da8:	f108 0201 	add.w	r2, r8, #1
 8002dac:	3b01      	subs	r3, #1
 8002dae:	4631      	mov	r1, r6
 8002db0:	4628      	mov	r0, r5
 8002db2:	47b8      	blx	r7
 8002db4:	3001      	adds	r0, #1
 8002db6:	d10e      	bne.n	8002dd6 <_printf_float+0x42a>
 8002db8:	e659      	b.n	8002a6e <_printf_float+0xc2>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4652      	mov	r2, sl
 8002dbe:	4631      	mov	r1, r6
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	47b8      	blx	r7
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	f43f ae52 	beq.w	8002a6e <_printf_float+0xc2>
 8002dca:	f108 0801 	add.w	r8, r8, #1
 8002dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	4543      	cmp	r3, r8
 8002dd4:	dcf1      	bgt.n	8002dba <_printf_float+0x40e>
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002ddc:	e6dc      	b.n	8002b98 <_printf_float+0x1ec>
 8002dde:	f04f 0800 	mov.w	r8, #0
 8002de2:	f104 0a1a 	add.w	sl, r4, #26
 8002de6:	e7f2      	b.n	8002dce <_printf_float+0x422>
 8002de8:	2301      	movs	r3, #1
 8002dea:	4642      	mov	r2, r8
 8002dec:	e7df      	b.n	8002dae <_printf_float+0x402>
 8002dee:	2301      	movs	r3, #1
 8002df0:	464a      	mov	r2, r9
 8002df2:	4631      	mov	r1, r6
 8002df4:	4628      	mov	r0, r5
 8002df6:	47b8      	blx	r7
 8002df8:	3001      	adds	r0, #1
 8002dfa:	f43f ae38 	beq.w	8002a6e <_printf_float+0xc2>
 8002dfe:	f108 0801 	add.w	r8, r8, #1
 8002e02:	68e3      	ldr	r3, [r4, #12]
 8002e04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e06:	1a5b      	subs	r3, r3, r1
 8002e08:	4543      	cmp	r3, r8
 8002e0a:	dcf0      	bgt.n	8002dee <_printf_float+0x442>
 8002e0c:	e6fa      	b.n	8002c04 <_printf_float+0x258>
 8002e0e:	f04f 0800 	mov.w	r8, #0
 8002e12:	f104 0919 	add.w	r9, r4, #25
 8002e16:	e7f4      	b.n	8002e02 <_printf_float+0x456>

08002e18 <_printf_common>:
 8002e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e1c:	4616      	mov	r6, r2
 8002e1e:	4699      	mov	r9, r3
 8002e20:	688a      	ldr	r2, [r1, #8]
 8002e22:	690b      	ldr	r3, [r1, #16]
 8002e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	bfb8      	it	lt
 8002e2c:	4613      	movlt	r3, r2
 8002e2e:	6033      	str	r3, [r6, #0]
 8002e30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e34:	4607      	mov	r7, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	b10a      	cbz	r2, 8002e3e <_printf_common+0x26>
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	6033      	str	r3, [r6, #0]
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	0699      	lsls	r1, r3, #26
 8002e42:	bf42      	ittt	mi
 8002e44:	6833      	ldrmi	r3, [r6, #0]
 8002e46:	3302      	addmi	r3, #2
 8002e48:	6033      	strmi	r3, [r6, #0]
 8002e4a:	6825      	ldr	r5, [r4, #0]
 8002e4c:	f015 0506 	ands.w	r5, r5, #6
 8002e50:	d106      	bne.n	8002e60 <_printf_common+0x48>
 8002e52:	f104 0a19 	add.w	sl, r4, #25
 8002e56:	68e3      	ldr	r3, [r4, #12]
 8002e58:	6832      	ldr	r2, [r6, #0]
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	42ab      	cmp	r3, r5
 8002e5e:	dc26      	bgt.n	8002eae <_printf_common+0x96>
 8002e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e64:	1e13      	subs	r3, r2, #0
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	bf18      	it	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	0692      	lsls	r2, r2, #26
 8002e6e:	d42b      	bmi.n	8002ec8 <_printf_common+0xb0>
 8002e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e74:	4649      	mov	r1, r9
 8002e76:	4638      	mov	r0, r7
 8002e78:	47c0      	blx	r8
 8002e7a:	3001      	adds	r0, #1
 8002e7c:	d01e      	beq.n	8002ebc <_printf_common+0xa4>
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	68e5      	ldr	r5, [r4, #12]
 8002e82:	6832      	ldr	r2, [r6, #0]
 8002e84:	f003 0306 	and.w	r3, r3, #6
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	bf08      	it	eq
 8002e8c:	1aad      	subeq	r5, r5, r2
 8002e8e:	68a3      	ldr	r3, [r4, #8]
 8002e90:	6922      	ldr	r2, [r4, #16]
 8002e92:	bf0c      	ite	eq
 8002e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e98:	2500      	movne	r5, #0
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	bfc4      	itt	gt
 8002e9e:	1a9b      	subgt	r3, r3, r2
 8002ea0:	18ed      	addgt	r5, r5, r3
 8002ea2:	2600      	movs	r6, #0
 8002ea4:	341a      	adds	r4, #26
 8002ea6:	42b5      	cmp	r5, r6
 8002ea8:	d11a      	bne.n	8002ee0 <_printf_common+0xc8>
 8002eaa:	2000      	movs	r0, #0
 8002eac:	e008      	b.n	8002ec0 <_printf_common+0xa8>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	4652      	mov	r2, sl
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	4638      	mov	r0, r7
 8002eb6:	47c0      	blx	r8
 8002eb8:	3001      	adds	r0, #1
 8002eba:	d103      	bne.n	8002ec4 <_printf_common+0xac>
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec4:	3501      	adds	r5, #1
 8002ec6:	e7c6      	b.n	8002e56 <_printf_common+0x3e>
 8002ec8:	18e1      	adds	r1, r4, r3
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	2030      	movs	r0, #48	; 0x30
 8002ece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ed2:	4422      	add	r2, r4
 8002ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002edc:	3302      	adds	r3, #2
 8002ede:	e7c7      	b.n	8002e70 <_printf_common+0x58>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	4638      	mov	r0, r7
 8002ee8:	47c0      	blx	r8
 8002eea:	3001      	adds	r0, #1
 8002eec:	d0e6      	beq.n	8002ebc <_printf_common+0xa4>
 8002eee:	3601      	adds	r6, #1
 8002ef0:	e7d9      	b.n	8002ea6 <_printf_common+0x8e>
	...

08002ef4 <_printf_i>:
 8002ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef8:	7e0f      	ldrb	r7, [r1, #24]
 8002efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002efc:	2f78      	cmp	r7, #120	; 0x78
 8002efe:	4691      	mov	r9, r2
 8002f00:	4680      	mov	r8, r0
 8002f02:	460c      	mov	r4, r1
 8002f04:	469a      	mov	sl, r3
 8002f06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f0a:	d807      	bhi.n	8002f1c <_printf_i+0x28>
 8002f0c:	2f62      	cmp	r7, #98	; 0x62
 8002f0e:	d80a      	bhi.n	8002f26 <_printf_i+0x32>
 8002f10:	2f00      	cmp	r7, #0
 8002f12:	f000 80d8 	beq.w	80030c6 <_printf_i+0x1d2>
 8002f16:	2f58      	cmp	r7, #88	; 0x58
 8002f18:	f000 80a3 	beq.w	8003062 <_printf_i+0x16e>
 8002f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f24:	e03a      	b.n	8002f9c <_printf_i+0xa8>
 8002f26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f2a:	2b15      	cmp	r3, #21
 8002f2c:	d8f6      	bhi.n	8002f1c <_printf_i+0x28>
 8002f2e:	a101      	add	r1, pc, #4	; (adr r1, 8002f34 <_printf_i+0x40>)
 8002f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f34:	08002f8d 	.word	0x08002f8d
 8002f38:	08002fa1 	.word	0x08002fa1
 8002f3c:	08002f1d 	.word	0x08002f1d
 8002f40:	08002f1d 	.word	0x08002f1d
 8002f44:	08002f1d 	.word	0x08002f1d
 8002f48:	08002f1d 	.word	0x08002f1d
 8002f4c:	08002fa1 	.word	0x08002fa1
 8002f50:	08002f1d 	.word	0x08002f1d
 8002f54:	08002f1d 	.word	0x08002f1d
 8002f58:	08002f1d 	.word	0x08002f1d
 8002f5c:	08002f1d 	.word	0x08002f1d
 8002f60:	080030ad 	.word	0x080030ad
 8002f64:	08002fd1 	.word	0x08002fd1
 8002f68:	0800308f 	.word	0x0800308f
 8002f6c:	08002f1d 	.word	0x08002f1d
 8002f70:	08002f1d 	.word	0x08002f1d
 8002f74:	080030cf 	.word	0x080030cf
 8002f78:	08002f1d 	.word	0x08002f1d
 8002f7c:	08002fd1 	.word	0x08002fd1
 8002f80:	08002f1d 	.word	0x08002f1d
 8002f84:	08002f1d 	.word	0x08002f1d
 8002f88:	08003097 	.word	0x08003097
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	1d1a      	adds	r2, r3, #4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	602a      	str	r2, [r5, #0]
 8002f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0a3      	b.n	80030e8 <_printf_i+0x1f4>
 8002fa0:	6820      	ldr	r0, [r4, #0]
 8002fa2:	6829      	ldr	r1, [r5, #0]
 8002fa4:	0606      	lsls	r6, r0, #24
 8002fa6:	f101 0304 	add.w	r3, r1, #4
 8002faa:	d50a      	bpl.n	8002fc2 <_printf_i+0xce>
 8002fac:	680e      	ldr	r6, [r1, #0]
 8002fae:	602b      	str	r3, [r5, #0]
 8002fb0:	2e00      	cmp	r6, #0
 8002fb2:	da03      	bge.n	8002fbc <_printf_i+0xc8>
 8002fb4:	232d      	movs	r3, #45	; 0x2d
 8002fb6:	4276      	negs	r6, r6
 8002fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fbc:	485e      	ldr	r0, [pc, #376]	; (8003138 <_printf_i+0x244>)
 8002fbe:	230a      	movs	r3, #10
 8002fc0:	e019      	b.n	8002ff6 <_printf_i+0x102>
 8002fc2:	680e      	ldr	r6, [r1, #0]
 8002fc4:	602b      	str	r3, [r5, #0]
 8002fc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fca:	bf18      	it	ne
 8002fcc:	b236      	sxthne	r6, r6
 8002fce:	e7ef      	b.n	8002fb0 <_printf_i+0xbc>
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	6820      	ldr	r0, [r4, #0]
 8002fd4:	1d19      	adds	r1, r3, #4
 8002fd6:	6029      	str	r1, [r5, #0]
 8002fd8:	0601      	lsls	r1, r0, #24
 8002fda:	d501      	bpl.n	8002fe0 <_printf_i+0xec>
 8002fdc:	681e      	ldr	r6, [r3, #0]
 8002fde:	e002      	b.n	8002fe6 <_printf_i+0xf2>
 8002fe0:	0646      	lsls	r6, r0, #25
 8002fe2:	d5fb      	bpl.n	8002fdc <_printf_i+0xe8>
 8002fe4:	881e      	ldrh	r6, [r3, #0]
 8002fe6:	4854      	ldr	r0, [pc, #336]	; (8003138 <_printf_i+0x244>)
 8002fe8:	2f6f      	cmp	r7, #111	; 0x6f
 8002fea:	bf0c      	ite	eq
 8002fec:	2308      	moveq	r3, #8
 8002fee:	230a      	movne	r3, #10
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ff6:	6865      	ldr	r5, [r4, #4]
 8002ff8:	60a5      	str	r5, [r4, #8]
 8002ffa:	2d00      	cmp	r5, #0
 8002ffc:	bfa2      	ittt	ge
 8002ffe:	6821      	ldrge	r1, [r4, #0]
 8003000:	f021 0104 	bicge.w	r1, r1, #4
 8003004:	6021      	strge	r1, [r4, #0]
 8003006:	b90e      	cbnz	r6, 800300c <_printf_i+0x118>
 8003008:	2d00      	cmp	r5, #0
 800300a:	d04d      	beq.n	80030a8 <_printf_i+0x1b4>
 800300c:	4615      	mov	r5, r2
 800300e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003012:	fb03 6711 	mls	r7, r3, r1, r6
 8003016:	5dc7      	ldrb	r7, [r0, r7]
 8003018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800301c:	4637      	mov	r7, r6
 800301e:	42bb      	cmp	r3, r7
 8003020:	460e      	mov	r6, r1
 8003022:	d9f4      	bls.n	800300e <_printf_i+0x11a>
 8003024:	2b08      	cmp	r3, #8
 8003026:	d10b      	bne.n	8003040 <_printf_i+0x14c>
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	07de      	lsls	r6, r3, #31
 800302c:	d508      	bpl.n	8003040 <_printf_i+0x14c>
 800302e:	6923      	ldr	r3, [r4, #16]
 8003030:	6861      	ldr	r1, [r4, #4]
 8003032:	4299      	cmp	r1, r3
 8003034:	bfde      	ittt	le
 8003036:	2330      	movle	r3, #48	; 0x30
 8003038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800303c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003040:	1b52      	subs	r2, r2, r5
 8003042:	6122      	str	r2, [r4, #16]
 8003044:	f8cd a000 	str.w	sl, [sp]
 8003048:	464b      	mov	r3, r9
 800304a:	aa03      	add	r2, sp, #12
 800304c:	4621      	mov	r1, r4
 800304e:	4640      	mov	r0, r8
 8003050:	f7ff fee2 	bl	8002e18 <_printf_common>
 8003054:	3001      	adds	r0, #1
 8003056:	d14c      	bne.n	80030f2 <_printf_i+0x1fe>
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	b004      	add	sp, #16
 800305e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003062:	4835      	ldr	r0, [pc, #212]	; (8003138 <_printf_i+0x244>)
 8003064:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003068:	6829      	ldr	r1, [r5, #0]
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003070:	6029      	str	r1, [r5, #0]
 8003072:	061d      	lsls	r5, r3, #24
 8003074:	d514      	bpl.n	80030a0 <_printf_i+0x1ac>
 8003076:	07df      	lsls	r7, r3, #31
 8003078:	bf44      	itt	mi
 800307a:	f043 0320 	orrmi.w	r3, r3, #32
 800307e:	6023      	strmi	r3, [r4, #0]
 8003080:	b91e      	cbnz	r6, 800308a <_printf_i+0x196>
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	f023 0320 	bic.w	r3, r3, #32
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	2310      	movs	r3, #16
 800308c:	e7b0      	b.n	8002ff0 <_printf_i+0xfc>
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	f043 0320 	orr.w	r3, r3, #32
 8003094:	6023      	str	r3, [r4, #0]
 8003096:	2378      	movs	r3, #120	; 0x78
 8003098:	4828      	ldr	r0, [pc, #160]	; (800313c <_printf_i+0x248>)
 800309a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800309e:	e7e3      	b.n	8003068 <_printf_i+0x174>
 80030a0:	0659      	lsls	r1, r3, #25
 80030a2:	bf48      	it	mi
 80030a4:	b2b6      	uxthmi	r6, r6
 80030a6:	e7e6      	b.n	8003076 <_printf_i+0x182>
 80030a8:	4615      	mov	r5, r2
 80030aa:	e7bb      	b.n	8003024 <_printf_i+0x130>
 80030ac:	682b      	ldr	r3, [r5, #0]
 80030ae:	6826      	ldr	r6, [r4, #0]
 80030b0:	6961      	ldr	r1, [r4, #20]
 80030b2:	1d18      	adds	r0, r3, #4
 80030b4:	6028      	str	r0, [r5, #0]
 80030b6:	0635      	lsls	r5, r6, #24
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	d501      	bpl.n	80030c0 <_printf_i+0x1cc>
 80030bc:	6019      	str	r1, [r3, #0]
 80030be:	e002      	b.n	80030c6 <_printf_i+0x1d2>
 80030c0:	0670      	lsls	r0, r6, #25
 80030c2:	d5fb      	bpl.n	80030bc <_printf_i+0x1c8>
 80030c4:	8019      	strh	r1, [r3, #0]
 80030c6:	2300      	movs	r3, #0
 80030c8:	6123      	str	r3, [r4, #16]
 80030ca:	4615      	mov	r5, r2
 80030cc:	e7ba      	b.n	8003044 <_printf_i+0x150>
 80030ce:	682b      	ldr	r3, [r5, #0]
 80030d0:	1d1a      	adds	r2, r3, #4
 80030d2:	602a      	str	r2, [r5, #0]
 80030d4:	681d      	ldr	r5, [r3, #0]
 80030d6:	6862      	ldr	r2, [r4, #4]
 80030d8:	2100      	movs	r1, #0
 80030da:	4628      	mov	r0, r5
 80030dc:	f7fd f8a0 	bl	8000220 <memchr>
 80030e0:	b108      	cbz	r0, 80030e6 <_printf_i+0x1f2>
 80030e2:	1b40      	subs	r0, r0, r5
 80030e4:	6060      	str	r0, [r4, #4]
 80030e6:	6863      	ldr	r3, [r4, #4]
 80030e8:	6123      	str	r3, [r4, #16]
 80030ea:	2300      	movs	r3, #0
 80030ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030f0:	e7a8      	b.n	8003044 <_printf_i+0x150>
 80030f2:	6923      	ldr	r3, [r4, #16]
 80030f4:	462a      	mov	r2, r5
 80030f6:	4649      	mov	r1, r9
 80030f8:	4640      	mov	r0, r8
 80030fa:	47d0      	blx	sl
 80030fc:	3001      	adds	r0, #1
 80030fe:	d0ab      	beq.n	8003058 <_printf_i+0x164>
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	079b      	lsls	r3, r3, #30
 8003104:	d413      	bmi.n	800312e <_printf_i+0x23a>
 8003106:	68e0      	ldr	r0, [r4, #12]
 8003108:	9b03      	ldr	r3, [sp, #12]
 800310a:	4298      	cmp	r0, r3
 800310c:	bfb8      	it	lt
 800310e:	4618      	movlt	r0, r3
 8003110:	e7a4      	b.n	800305c <_printf_i+0x168>
 8003112:	2301      	movs	r3, #1
 8003114:	4632      	mov	r2, r6
 8003116:	4649      	mov	r1, r9
 8003118:	4640      	mov	r0, r8
 800311a:	47d0      	blx	sl
 800311c:	3001      	adds	r0, #1
 800311e:	d09b      	beq.n	8003058 <_printf_i+0x164>
 8003120:	3501      	adds	r5, #1
 8003122:	68e3      	ldr	r3, [r4, #12]
 8003124:	9903      	ldr	r1, [sp, #12]
 8003126:	1a5b      	subs	r3, r3, r1
 8003128:	42ab      	cmp	r3, r5
 800312a:	dcf2      	bgt.n	8003112 <_printf_i+0x21e>
 800312c:	e7eb      	b.n	8003106 <_printf_i+0x212>
 800312e:	2500      	movs	r5, #0
 8003130:	f104 0619 	add.w	r6, r4, #25
 8003134:	e7f5      	b.n	8003122 <_printf_i+0x22e>
 8003136:	bf00      	nop
 8003138:	080053ea 	.word	0x080053ea
 800313c:	080053fb 	.word	0x080053fb

08003140 <_sbrk_r>:
 8003140:	b538      	push	{r3, r4, r5, lr}
 8003142:	4d06      	ldr	r5, [pc, #24]	; (800315c <_sbrk_r+0x1c>)
 8003144:	2300      	movs	r3, #0
 8003146:	4604      	mov	r4, r0
 8003148:	4608      	mov	r0, r1
 800314a:	602b      	str	r3, [r5, #0]
 800314c:	f7ff f95e 	bl	800240c <_sbrk>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	d102      	bne.n	800315a <_sbrk_r+0x1a>
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	b103      	cbz	r3, 800315a <_sbrk_r+0x1a>
 8003158:	6023      	str	r3, [r4, #0]
 800315a:	bd38      	pop	{r3, r4, r5, pc}
 800315c:	20000360 	.word	0x20000360

08003160 <siprintf>:
 8003160:	b40e      	push	{r1, r2, r3}
 8003162:	b500      	push	{lr}
 8003164:	b09c      	sub	sp, #112	; 0x70
 8003166:	ab1d      	add	r3, sp, #116	; 0x74
 8003168:	9002      	str	r0, [sp, #8]
 800316a:	9006      	str	r0, [sp, #24]
 800316c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003170:	4809      	ldr	r0, [pc, #36]	; (8003198 <siprintf+0x38>)
 8003172:	9107      	str	r1, [sp, #28]
 8003174:	9104      	str	r1, [sp, #16]
 8003176:	4909      	ldr	r1, [pc, #36]	; (800319c <siprintf+0x3c>)
 8003178:	f853 2b04 	ldr.w	r2, [r3], #4
 800317c:	9105      	str	r1, [sp, #20]
 800317e:	6800      	ldr	r0, [r0, #0]
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	a902      	add	r1, sp, #8
 8003184:	f001 fc2a 	bl	80049dc <_svfiprintf_r>
 8003188:	9b02      	ldr	r3, [sp, #8]
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	b01c      	add	sp, #112	; 0x70
 8003190:	f85d eb04 	ldr.w	lr, [sp], #4
 8003194:	b003      	add	sp, #12
 8003196:	4770      	bx	lr
 8003198:	20000010 	.word	0x20000010
 800319c:	ffff0208 	.word	0xffff0208

080031a0 <__sread>:
 80031a0:	b510      	push	{r4, lr}
 80031a2:	460c      	mov	r4, r1
 80031a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031a8:	f001 fd18 	bl	8004bdc <_read_r>
 80031ac:	2800      	cmp	r0, #0
 80031ae:	bfab      	itete	ge
 80031b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031b2:	89a3      	ldrhlt	r3, [r4, #12]
 80031b4:	181b      	addge	r3, r3, r0
 80031b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031ba:	bfac      	ite	ge
 80031bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80031be:	81a3      	strhlt	r3, [r4, #12]
 80031c0:	bd10      	pop	{r4, pc}

080031c2 <__swrite>:
 80031c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c6:	461f      	mov	r7, r3
 80031c8:	898b      	ldrh	r3, [r1, #12]
 80031ca:	05db      	lsls	r3, r3, #23
 80031cc:	4605      	mov	r5, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	4616      	mov	r6, r2
 80031d2:	d505      	bpl.n	80031e0 <__swrite+0x1e>
 80031d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d8:	2302      	movs	r3, #2
 80031da:	2200      	movs	r2, #0
 80031dc:	f000 ff88 	bl	80040f0 <_lseek_r>
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031ea:	81a3      	strh	r3, [r4, #12]
 80031ec:	4632      	mov	r2, r6
 80031ee:	463b      	mov	r3, r7
 80031f0:	4628      	mov	r0, r5
 80031f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031f6:	f000 b817 	b.w	8003228 <_write_r>

080031fa <__sseek>:
 80031fa:	b510      	push	{r4, lr}
 80031fc:	460c      	mov	r4, r1
 80031fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003202:	f000 ff75 	bl	80040f0 <_lseek_r>
 8003206:	1c43      	adds	r3, r0, #1
 8003208:	89a3      	ldrh	r3, [r4, #12]
 800320a:	bf15      	itete	ne
 800320c:	6560      	strne	r0, [r4, #84]	; 0x54
 800320e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003216:	81a3      	strheq	r3, [r4, #12]
 8003218:	bf18      	it	ne
 800321a:	81a3      	strhne	r3, [r4, #12]
 800321c:	bd10      	pop	{r4, pc}

0800321e <__sclose>:
 800321e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003222:	f000 b813 	b.w	800324c <_close_r>
	...

08003228 <_write_r>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	4d07      	ldr	r5, [pc, #28]	; (8003248 <_write_r+0x20>)
 800322c:	4604      	mov	r4, r0
 800322e:	4608      	mov	r0, r1
 8003230:	4611      	mov	r1, r2
 8003232:	2200      	movs	r2, #0
 8003234:	602a      	str	r2, [r5, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	f7ff f88f 	bl	800235a <_write>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	d102      	bne.n	8003246 <_write_r+0x1e>
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	b103      	cbz	r3, 8003246 <_write_r+0x1e>
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	bd38      	pop	{r3, r4, r5, pc}
 8003248:	20000360 	.word	0x20000360

0800324c <_close_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4d06      	ldr	r5, [pc, #24]	; (8003268 <_close_r+0x1c>)
 8003250:	2300      	movs	r3, #0
 8003252:	4604      	mov	r4, r0
 8003254:	4608      	mov	r0, r1
 8003256:	602b      	str	r3, [r5, #0]
 8003258:	f7ff f8b0 	bl	80023bc <_close>
 800325c:	1c43      	adds	r3, r0, #1
 800325e:	d102      	bne.n	8003266 <_close_r+0x1a>
 8003260:	682b      	ldr	r3, [r5, #0]
 8003262:	b103      	cbz	r3, 8003266 <_close_r+0x1a>
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	bd38      	pop	{r3, r4, r5, pc}
 8003268:	20000360 	.word	0x20000360

0800326c <quorem>:
 800326c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003270:	6903      	ldr	r3, [r0, #16]
 8003272:	690c      	ldr	r4, [r1, #16]
 8003274:	42a3      	cmp	r3, r4
 8003276:	4607      	mov	r7, r0
 8003278:	f2c0 8081 	blt.w	800337e <quorem+0x112>
 800327c:	3c01      	subs	r4, #1
 800327e:	f101 0814 	add.w	r8, r1, #20
 8003282:	f100 0514 	add.w	r5, r0, #20
 8003286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003290:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003294:	3301      	adds	r3, #1
 8003296:	429a      	cmp	r2, r3
 8003298:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800329c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80032a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80032a4:	d331      	bcc.n	800330a <quorem+0x9e>
 80032a6:	f04f 0e00 	mov.w	lr, #0
 80032aa:	4640      	mov	r0, r8
 80032ac:	46ac      	mov	ip, r5
 80032ae:	46f2      	mov	sl, lr
 80032b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80032b4:	b293      	uxth	r3, r2
 80032b6:	fb06 e303 	mla	r3, r6, r3, lr
 80032ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80032be:	b29b      	uxth	r3, r3
 80032c0:	ebaa 0303 	sub.w	r3, sl, r3
 80032c4:	f8dc a000 	ldr.w	sl, [ip]
 80032c8:	0c12      	lsrs	r2, r2, #16
 80032ca:	fa13 f38a 	uxtah	r3, r3, sl
 80032ce:	fb06 e202 	mla	r2, r6, r2, lr
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	9b00      	ldr	r3, [sp, #0]
 80032d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80032da:	b292      	uxth	r2, r2
 80032dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80032e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80032e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80032e8:	4581      	cmp	r9, r0
 80032ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032ee:	f84c 3b04 	str.w	r3, [ip], #4
 80032f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80032f6:	d2db      	bcs.n	80032b0 <quorem+0x44>
 80032f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80032fc:	b92b      	cbnz	r3, 800330a <quorem+0x9e>
 80032fe:	9b01      	ldr	r3, [sp, #4]
 8003300:	3b04      	subs	r3, #4
 8003302:	429d      	cmp	r5, r3
 8003304:	461a      	mov	r2, r3
 8003306:	d32e      	bcc.n	8003366 <quorem+0xfa>
 8003308:	613c      	str	r4, [r7, #16]
 800330a:	4638      	mov	r0, r7
 800330c:	f001 f9a6 	bl	800465c <__mcmp>
 8003310:	2800      	cmp	r0, #0
 8003312:	db24      	blt.n	800335e <quorem+0xf2>
 8003314:	3601      	adds	r6, #1
 8003316:	4628      	mov	r0, r5
 8003318:	f04f 0c00 	mov.w	ip, #0
 800331c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003320:	f8d0 e000 	ldr.w	lr, [r0]
 8003324:	b293      	uxth	r3, r2
 8003326:	ebac 0303 	sub.w	r3, ip, r3
 800332a:	0c12      	lsrs	r2, r2, #16
 800332c:	fa13 f38e 	uxtah	r3, r3, lr
 8003330:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003338:	b29b      	uxth	r3, r3
 800333a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800333e:	45c1      	cmp	r9, r8
 8003340:	f840 3b04 	str.w	r3, [r0], #4
 8003344:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003348:	d2e8      	bcs.n	800331c <quorem+0xb0>
 800334a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800334e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003352:	b922      	cbnz	r2, 800335e <quorem+0xf2>
 8003354:	3b04      	subs	r3, #4
 8003356:	429d      	cmp	r5, r3
 8003358:	461a      	mov	r2, r3
 800335a:	d30a      	bcc.n	8003372 <quorem+0x106>
 800335c:	613c      	str	r4, [r7, #16]
 800335e:	4630      	mov	r0, r6
 8003360:	b003      	add	sp, #12
 8003362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	3b04      	subs	r3, #4
 800336a:	2a00      	cmp	r2, #0
 800336c:	d1cc      	bne.n	8003308 <quorem+0x9c>
 800336e:	3c01      	subs	r4, #1
 8003370:	e7c7      	b.n	8003302 <quorem+0x96>
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	3b04      	subs	r3, #4
 8003376:	2a00      	cmp	r2, #0
 8003378:	d1f0      	bne.n	800335c <quorem+0xf0>
 800337a:	3c01      	subs	r4, #1
 800337c:	e7eb      	b.n	8003356 <quorem+0xea>
 800337e:	2000      	movs	r0, #0
 8003380:	e7ee      	b.n	8003360 <quorem+0xf4>
 8003382:	0000      	movs	r0, r0
 8003384:	0000      	movs	r0, r0
	...

08003388 <_dtoa_r>:
 8003388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800338c:	ed2d 8b04 	vpush	{d8-d9}
 8003390:	ec57 6b10 	vmov	r6, r7, d0
 8003394:	b093      	sub	sp, #76	; 0x4c
 8003396:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003398:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800339c:	9106      	str	r1, [sp, #24]
 800339e:	ee10 aa10 	vmov	sl, s0
 80033a2:	4604      	mov	r4, r0
 80033a4:	9209      	str	r2, [sp, #36]	; 0x24
 80033a6:	930c      	str	r3, [sp, #48]	; 0x30
 80033a8:	46bb      	mov	fp, r7
 80033aa:	b975      	cbnz	r5, 80033ca <_dtoa_r+0x42>
 80033ac:	2010      	movs	r0, #16
 80033ae:	f000 feb1 	bl	8004114 <malloc>
 80033b2:	4602      	mov	r2, r0
 80033b4:	6260      	str	r0, [r4, #36]	; 0x24
 80033b6:	b920      	cbnz	r0, 80033c2 <_dtoa_r+0x3a>
 80033b8:	4ba7      	ldr	r3, [pc, #668]	; (8003658 <_dtoa_r+0x2d0>)
 80033ba:	21ea      	movs	r1, #234	; 0xea
 80033bc:	48a7      	ldr	r0, [pc, #668]	; (800365c <_dtoa_r+0x2d4>)
 80033be:	f001 fc1f 	bl	8004c00 <__assert_func>
 80033c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80033c6:	6005      	str	r5, [r0, #0]
 80033c8:	60c5      	str	r5, [r0, #12]
 80033ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	b151      	cbz	r1, 80033e6 <_dtoa_r+0x5e>
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	604a      	str	r2, [r1, #4]
 80033d4:	2301      	movs	r3, #1
 80033d6:	4093      	lsls	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 fefc 	bl	80041d8 <_Bfree>
 80033e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	1e3b      	subs	r3, r7, #0
 80033e8:	bfaa      	itet	ge
 80033ea:	2300      	movge	r3, #0
 80033ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80033f0:	f8c8 3000 	strge.w	r3, [r8]
 80033f4:	4b9a      	ldr	r3, [pc, #616]	; (8003660 <_dtoa_r+0x2d8>)
 80033f6:	bfbc      	itt	lt
 80033f8:	2201      	movlt	r2, #1
 80033fa:	f8c8 2000 	strlt.w	r2, [r8]
 80033fe:	ea33 030b 	bics.w	r3, r3, fp
 8003402:	d11b      	bne.n	800343c <_dtoa_r+0xb4>
 8003404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003406:	f242 730f 	movw	r3, #9999	; 0x270f
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003410:	4333      	orrs	r3, r6
 8003412:	f000 8592 	beq.w	8003f3a <_dtoa_r+0xbb2>
 8003416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003418:	b963      	cbnz	r3, 8003434 <_dtoa_r+0xac>
 800341a:	4b92      	ldr	r3, [pc, #584]	; (8003664 <_dtoa_r+0x2dc>)
 800341c:	e022      	b.n	8003464 <_dtoa_r+0xdc>
 800341e:	4b92      	ldr	r3, [pc, #584]	; (8003668 <_dtoa_r+0x2e0>)
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	3308      	adds	r3, #8
 8003424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	9801      	ldr	r0, [sp, #4]
 800342a:	b013      	add	sp, #76	; 0x4c
 800342c:	ecbd 8b04 	vpop	{d8-d9}
 8003430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003434:	4b8b      	ldr	r3, [pc, #556]	; (8003664 <_dtoa_r+0x2dc>)
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	3303      	adds	r3, #3
 800343a:	e7f3      	b.n	8003424 <_dtoa_r+0x9c>
 800343c:	2200      	movs	r2, #0
 800343e:	2300      	movs	r3, #0
 8003440:	4650      	mov	r0, sl
 8003442:	4659      	mov	r1, fp
 8003444:	f7fd fb60 	bl	8000b08 <__aeabi_dcmpeq>
 8003448:	ec4b ab19 	vmov	d9, sl, fp
 800344c:	4680      	mov	r8, r0
 800344e:	b158      	cbz	r0, 8003468 <_dtoa_r+0xe0>
 8003450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003452:	2301      	movs	r3, #1
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 856b 	beq.w	8003f34 <_dtoa_r+0xbac>
 800345e:	4883      	ldr	r0, [pc, #524]	; (800366c <_dtoa_r+0x2e4>)
 8003460:	6018      	str	r0, [r3, #0]
 8003462:	1e43      	subs	r3, r0, #1
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	e7df      	b.n	8003428 <_dtoa_r+0xa0>
 8003468:	ec4b ab10 	vmov	d0, sl, fp
 800346c:	aa10      	add	r2, sp, #64	; 0x40
 800346e:	a911      	add	r1, sp, #68	; 0x44
 8003470:	4620      	mov	r0, r4
 8003472:	f001 f999 	bl	80047a8 <__d2b>
 8003476:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800347a:	ee08 0a10 	vmov	s16, r0
 800347e:	2d00      	cmp	r5, #0
 8003480:	f000 8084 	beq.w	800358c <_dtoa_r+0x204>
 8003484:	ee19 3a90 	vmov	r3, s19
 8003488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800348c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003490:	4656      	mov	r6, sl
 8003492:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800349a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800349e:	4b74      	ldr	r3, [pc, #464]	; (8003670 <_dtoa_r+0x2e8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	4630      	mov	r0, r6
 80034a4:	4639      	mov	r1, r7
 80034a6:	f7fc ff0f 	bl	80002c8 <__aeabi_dsub>
 80034aa:	a365      	add	r3, pc, #404	; (adr r3, 8003640 <_dtoa_r+0x2b8>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fd f8c2 	bl	8000638 <__aeabi_dmul>
 80034b4:	a364      	add	r3, pc, #400	; (adr r3, 8003648 <_dtoa_r+0x2c0>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f7fc ff07 	bl	80002cc <__adddf3>
 80034be:	4606      	mov	r6, r0
 80034c0:	4628      	mov	r0, r5
 80034c2:	460f      	mov	r7, r1
 80034c4:	f7fd f84e 	bl	8000564 <__aeabi_i2d>
 80034c8:	a361      	add	r3, pc, #388	; (adr r3, 8003650 <_dtoa_r+0x2c8>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f7fd f8b3 	bl	8000638 <__aeabi_dmul>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4630      	mov	r0, r6
 80034d8:	4639      	mov	r1, r7
 80034da:	f7fc fef7 	bl	80002cc <__adddf3>
 80034de:	4606      	mov	r6, r0
 80034e0:	460f      	mov	r7, r1
 80034e2:	f7fd fb59 	bl	8000b98 <__aeabi_d2iz>
 80034e6:	2200      	movs	r2, #0
 80034e8:	9000      	str	r0, [sp, #0]
 80034ea:	2300      	movs	r3, #0
 80034ec:	4630      	mov	r0, r6
 80034ee:	4639      	mov	r1, r7
 80034f0:	f7fd fb14 	bl	8000b1c <__aeabi_dcmplt>
 80034f4:	b150      	cbz	r0, 800350c <_dtoa_r+0x184>
 80034f6:	9800      	ldr	r0, [sp, #0]
 80034f8:	f7fd f834 	bl	8000564 <__aeabi_i2d>
 80034fc:	4632      	mov	r2, r6
 80034fe:	463b      	mov	r3, r7
 8003500:	f7fd fb02 	bl	8000b08 <__aeabi_dcmpeq>
 8003504:	b910      	cbnz	r0, 800350c <_dtoa_r+0x184>
 8003506:	9b00      	ldr	r3, [sp, #0]
 8003508:	3b01      	subs	r3, #1
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	9b00      	ldr	r3, [sp, #0]
 800350e:	2b16      	cmp	r3, #22
 8003510:	d85a      	bhi.n	80035c8 <_dtoa_r+0x240>
 8003512:	9a00      	ldr	r2, [sp, #0]
 8003514:	4b57      	ldr	r3, [pc, #348]	; (8003674 <_dtoa_r+0x2ec>)
 8003516:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	ec51 0b19 	vmov	r0, r1, d9
 8003522:	f7fd fafb 	bl	8000b1c <__aeabi_dcmplt>
 8003526:	2800      	cmp	r0, #0
 8003528:	d050      	beq.n	80035cc <_dtoa_r+0x244>
 800352a:	9b00      	ldr	r3, [sp, #0]
 800352c:	3b01      	subs	r3, #1
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2300      	movs	r3, #0
 8003532:	930b      	str	r3, [sp, #44]	; 0x2c
 8003534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003536:	1b5d      	subs	r5, r3, r5
 8003538:	1e6b      	subs	r3, r5, #1
 800353a:	9305      	str	r3, [sp, #20]
 800353c:	bf45      	ittet	mi
 800353e:	f1c5 0301 	rsbmi	r3, r5, #1
 8003542:	9304      	strmi	r3, [sp, #16]
 8003544:	2300      	movpl	r3, #0
 8003546:	2300      	movmi	r3, #0
 8003548:	bf4c      	ite	mi
 800354a:	9305      	strmi	r3, [sp, #20]
 800354c:	9304      	strpl	r3, [sp, #16]
 800354e:	9b00      	ldr	r3, [sp, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	db3d      	blt.n	80035d0 <_dtoa_r+0x248>
 8003554:	9b05      	ldr	r3, [sp, #20]
 8003556:	9a00      	ldr	r2, [sp, #0]
 8003558:	920a      	str	r2, [sp, #40]	; 0x28
 800355a:	4413      	add	r3, r2
 800355c:	9305      	str	r3, [sp, #20]
 800355e:	2300      	movs	r3, #0
 8003560:	9307      	str	r3, [sp, #28]
 8003562:	9b06      	ldr	r3, [sp, #24]
 8003564:	2b09      	cmp	r3, #9
 8003566:	f200 8089 	bhi.w	800367c <_dtoa_r+0x2f4>
 800356a:	2b05      	cmp	r3, #5
 800356c:	bfc4      	itt	gt
 800356e:	3b04      	subgt	r3, #4
 8003570:	9306      	strgt	r3, [sp, #24]
 8003572:	9b06      	ldr	r3, [sp, #24]
 8003574:	f1a3 0302 	sub.w	r3, r3, #2
 8003578:	bfcc      	ite	gt
 800357a:	2500      	movgt	r5, #0
 800357c:	2501      	movle	r5, #1
 800357e:	2b03      	cmp	r3, #3
 8003580:	f200 8087 	bhi.w	8003692 <_dtoa_r+0x30a>
 8003584:	e8df f003 	tbb	[pc, r3]
 8003588:	59383a2d 	.word	0x59383a2d
 800358c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003590:	441d      	add	r5, r3
 8003592:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003596:	2b20      	cmp	r3, #32
 8003598:	bfc1      	itttt	gt
 800359a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800359e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80035a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80035a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80035aa:	bfda      	itte	le
 80035ac:	f1c3 0320 	rsble	r3, r3, #32
 80035b0:	fa06 f003 	lslle.w	r0, r6, r3
 80035b4:	4318      	orrgt	r0, r3
 80035b6:	f7fc ffc5 	bl	8000544 <__aeabi_ui2d>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4606      	mov	r6, r0
 80035be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80035c2:	3d01      	subs	r5, #1
 80035c4:	930e      	str	r3, [sp, #56]	; 0x38
 80035c6:	e76a      	b.n	800349e <_dtoa_r+0x116>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e7b2      	b.n	8003532 <_dtoa_r+0x1aa>
 80035cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80035ce:	e7b1      	b.n	8003534 <_dtoa_r+0x1ac>
 80035d0:	9b04      	ldr	r3, [sp, #16]
 80035d2:	9a00      	ldr	r2, [sp, #0]
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	9304      	str	r3, [sp, #16]
 80035d8:	4253      	negs	r3, r2
 80035da:	9307      	str	r3, [sp, #28]
 80035dc:	2300      	movs	r3, #0
 80035de:	930a      	str	r3, [sp, #40]	; 0x28
 80035e0:	e7bf      	b.n	8003562 <_dtoa_r+0x1da>
 80035e2:	2300      	movs	r3, #0
 80035e4:	9308      	str	r3, [sp, #32]
 80035e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	dc55      	bgt.n	8003698 <_dtoa_r+0x310>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80035f2:	461a      	mov	r2, r3
 80035f4:	9209      	str	r2, [sp, #36]	; 0x24
 80035f6:	e00c      	b.n	8003612 <_dtoa_r+0x28a>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e7f3      	b.n	80035e4 <_dtoa_r+0x25c>
 80035fc:	2300      	movs	r3, #0
 80035fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003600:	9308      	str	r3, [sp, #32]
 8003602:	9b00      	ldr	r3, [sp, #0]
 8003604:	4413      	add	r3, r2
 8003606:	9302      	str	r3, [sp, #8]
 8003608:	3301      	adds	r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	9303      	str	r3, [sp, #12]
 800360e:	bfb8      	it	lt
 8003610:	2301      	movlt	r3, #1
 8003612:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003614:	2200      	movs	r2, #0
 8003616:	6042      	str	r2, [r0, #4]
 8003618:	2204      	movs	r2, #4
 800361a:	f102 0614 	add.w	r6, r2, #20
 800361e:	429e      	cmp	r6, r3
 8003620:	6841      	ldr	r1, [r0, #4]
 8003622:	d93d      	bls.n	80036a0 <_dtoa_r+0x318>
 8003624:	4620      	mov	r0, r4
 8003626:	f000 fd97 	bl	8004158 <_Balloc>
 800362a:	9001      	str	r0, [sp, #4]
 800362c:	2800      	cmp	r0, #0
 800362e:	d13b      	bne.n	80036a8 <_dtoa_r+0x320>
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <_dtoa_r+0x2f0>)
 8003632:	4602      	mov	r2, r0
 8003634:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003638:	e6c0      	b.n	80033bc <_dtoa_r+0x34>
 800363a:	2301      	movs	r3, #1
 800363c:	e7df      	b.n	80035fe <_dtoa_r+0x276>
 800363e:	bf00      	nop
 8003640:	636f4361 	.word	0x636f4361
 8003644:	3fd287a7 	.word	0x3fd287a7
 8003648:	8b60c8b3 	.word	0x8b60c8b3
 800364c:	3fc68a28 	.word	0x3fc68a28
 8003650:	509f79fb 	.word	0x509f79fb
 8003654:	3fd34413 	.word	0x3fd34413
 8003658:	08005419 	.word	0x08005419
 800365c:	08005430 	.word	0x08005430
 8003660:	7ff00000 	.word	0x7ff00000
 8003664:	08005415 	.word	0x08005415
 8003668:	0800540c 	.word	0x0800540c
 800366c:	080053e9 	.word	0x080053e9
 8003670:	3ff80000 	.word	0x3ff80000
 8003674:	08005520 	.word	0x08005520
 8003678:	0800548b 	.word	0x0800548b
 800367c:	2501      	movs	r5, #1
 800367e:	2300      	movs	r3, #0
 8003680:	9306      	str	r3, [sp, #24]
 8003682:	9508      	str	r5, [sp, #32]
 8003684:	f04f 33ff 	mov.w	r3, #4294967295
 8003688:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800368c:	2200      	movs	r2, #0
 800368e:	2312      	movs	r3, #18
 8003690:	e7b0      	b.n	80035f4 <_dtoa_r+0x26c>
 8003692:	2301      	movs	r3, #1
 8003694:	9308      	str	r3, [sp, #32]
 8003696:	e7f5      	b.n	8003684 <_dtoa_r+0x2fc>
 8003698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800369a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800369e:	e7b8      	b.n	8003612 <_dtoa_r+0x28a>
 80036a0:	3101      	adds	r1, #1
 80036a2:	6041      	str	r1, [r0, #4]
 80036a4:	0052      	lsls	r2, r2, #1
 80036a6:	e7b8      	b.n	800361a <_dtoa_r+0x292>
 80036a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036aa:	9a01      	ldr	r2, [sp, #4]
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	9b03      	ldr	r3, [sp, #12]
 80036b0:	2b0e      	cmp	r3, #14
 80036b2:	f200 809d 	bhi.w	80037f0 <_dtoa_r+0x468>
 80036b6:	2d00      	cmp	r5, #0
 80036b8:	f000 809a 	beq.w	80037f0 <_dtoa_r+0x468>
 80036bc:	9b00      	ldr	r3, [sp, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	dd32      	ble.n	8003728 <_dtoa_r+0x3a0>
 80036c2:	4ab7      	ldr	r2, [pc, #732]	; (80039a0 <_dtoa_r+0x618>)
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80036cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036d0:	9b00      	ldr	r3, [sp, #0]
 80036d2:	05d8      	lsls	r0, r3, #23
 80036d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80036d8:	d516      	bpl.n	8003708 <_dtoa_r+0x380>
 80036da:	4bb2      	ldr	r3, [pc, #712]	; (80039a4 <_dtoa_r+0x61c>)
 80036dc:	ec51 0b19 	vmov	r0, r1, d9
 80036e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80036e4:	f7fd f8d2 	bl	800088c <__aeabi_ddiv>
 80036e8:	f007 070f 	and.w	r7, r7, #15
 80036ec:	4682      	mov	sl, r0
 80036ee:	468b      	mov	fp, r1
 80036f0:	2503      	movs	r5, #3
 80036f2:	4eac      	ldr	r6, [pc, #688]	; (80039a4 <_dtoa_r+0x61c>)
 80036f4:	b957      	cbnz	r7, 800370c <_dtoa_r+0x384>
 80036f6:	4642      	mov	r2, r8
 80036f8:	464b      	mov	r3, r9
 80036fa:	4650      	mov	r0, sl
 80036fc:	4659      	mov	r1, fp
 80036fe:	f7fd f8c5 	bl	800088c <__aeabi_ddiv>
 8003702:	4682      	mov	sl, r0
 8003704:	468b      	mov	fp, r1
 8003706:	e028      	b.n	800375a <_dtoa_r+0x3d2>
 8003708:	2502      	movs	r5, #2
 800370a:	e7f2      	b.n	80036f2 <_dtoa_r+0x36a>
 800370c:	07f9      	lsls	r1, r7, #31
 800370e:	d508      	bpl.n	8003722 <_dtoa_r+0x39a>
 8003710:	4640      	mov	r0, r8
 8003712:	4649      	mov	r1, r9
 8003714:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003718:	f7fc ff8e 	bl	8000638 <__aeabi_dmul>
 800371c:	3501      	adds	r5, #1
 800371e:	4680      	mov	r8, r0
 8003720:	4689      	mov	r9, r1
 8003722:	107f      	asrs	r7, r7, #1
 8003724:	3608      	adds	r6, #8
 8003726:	e7e5      	b.n	80036f4 <_dtoa_r+0x36c>
 8003728:	f000 809b 	beq.w	8003862 <_dtoa_r+0x4da>
 800372c:	9b00      	ldr	r3, [sp, #0]
 800372e:	4f9d      	ldr	r7, [pc, #628]	; (80039a4 <_dtoa_r+0x61c>)
 8003730:	425e      	negs	r6, r3
 8003732:	4b9b      	ldr	r3, [pc, #620]	; (80039a0 <_dtoa_r+0x618>)
 8003734:	f006 020f 	and.w	r2, r6, #15
 8003738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	ec51 0b19 	vmov	r0, r1, d9
 8003744:	f7fc ff78 	bl	8000638 <__aeabi_dmul>
 8003748:	1136      	asrs	r6, r6, #4
 800374a:	4682      	mov	sl, r0
 800374c:	468b      	mov	fp, r1
 800374e:	2300      	movs	r3, #0
 8003750:	2502      	movs	r5, #2
 8003752:	2e00      	cmp	r6, #0
 8003754:	d17a      	bne.n	800384c <_dtoa_r+0x4c4>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1d3      	bne.n	8003702 <_dtoa_r+0x37a>
 800375a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8082 	beq.w	8003866 <_dtoa_r+0x4de>
 8003762:	4b91      	ldr	r3, [pc, #580]	; (80039a8 <_dtoa_r+0x620>)
 8003764:	2200      	movs	r2, #0
 8003766:	4650      	mov	r0, sl
 8003768:	4659      	mov	r1, fp
 800376a:	f7fd f9d7 	bl	8000b1c <__aeabi_dcmplt>
 800376e:	2800      	cmp	r0, #0
 8003770:	d079      	beq.n	8003866 <_dtoa_r+0x4de>
 8003772:	9b03      	ldr	r3, [sp, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d076      	beq.n	8003866 <_dtoa_r+0x4de>
 8003778:	9b02      	ldr	r3, [sp, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	dd36      	ble.n	80037ec <_dtoa_r+0x464>
 800377e:	9b00      	ldr	r3, [sp, #0]
 8003780:	4650      	mov	r0, sl
 8003782:	4659      	mov	r1, fp
 8003784:	1e5f      	subs	r7, r3, #1
 8003786:	2200      	movs	r2, #0
 8003788:	4b88      	ldr	r3, [pc, #544]	; (80039ac <_dtoa_r+0x624>)
 800378a:	f7fc ff55 	bl	8000638 <__aeabi_dmul>
 800378e:	9e02      	ldr	r6, [sp, #8]
 8003790:	4682      	mov	sl, r0
 8003792:	468b      	mov	fp, r1
 8003794:	3501      	adds	r5, #1
 8003796:	4628      	mov	r0, r5
 8003798:	f7fc fee4 	bl	8000564 <__aeabi_i2d>
 800379c:	4652      	mov	r2, sl
 800379e:	465b      	mov	r3, fp
 80037a0:	f7fc ff4a 	bl	8000638 <__aeabi_dmul>
 80037a4:	4b82      	ldr	r3, [pc, #520]	; (80039b0 <_dtoa_r+0x628>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	f7fc fd90 	bl	80002cc <__adddf3>
 80037ac:	46d0      	mov	r8, sl
 80037ae:	46d9      	mov	r9, fp
 80037b0:	4682      	mov	sl, r0
 80037b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80037b6:	2e00      	cmp	r6, #0
 80037b8:	d158      	bne.n	800386c <_dtoa_r+0x4e4>
 80037ba:	4b7e      	ldr	r3, [pc, #504]	; (80039b4 <_dtoa_r+0x62c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	4640      	mov	r0, r8
 80037c0:	4649      	mov	r1, r9
 80037c2:	f7fc fd81 	bl	80002c8 <__aeabi_dsub>
 80037c6:	4652      	mov	r2, sl
 80037c8:	465b      	mov	r3, fp
 80037ca:	4680      	mov	r8, r0
 80037cc:	4689      	mov	r9, r1
 80037ce:	f7fd f9c3 	bl	8000b58 <__aeabi_dcmpgt>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	f040 8295 	bne.w	8003d02 <_dtoa_r+0x97a>
 80037d8:	4652      	mov	r2, sl
 80037da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80037de:	4640      	mov	r0, r8
 80037e0:	4649      	mov	r1, r9
 80037e2:	f7fd f99b 	bl	8000b1c <__aeabi_dcmplt>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	f040 8289 	bne.w	8003cfe <_dtoa_r+0x976>
 80037ec:	ec5b ab19 	vmov	sl, fp, d9
 80037f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f2c0 8148 	blt.w	8003a88 <_dtoa_r+0x700>
 80037f8:	9a00      	ldr	r2, [sp, #0]
 80037fa:	2a0e      	cmp	r2, #14
 80037fc:	f300 8144 	bgt.w	8003a88 <_dtoa_r+0x700>
 8003800:	4b67      	ldr	r3, [pc, #412]	; (80039a0 <_dtoa_r+0x618>)
 8003802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003806:	e9d3 8900 	ldrd	r8, r9, [r3]
 800380a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800380c:	2b00      	cmp	r3, #0
 800380e:	f280 80d5 	bge.w	80039bc <_dtoa_r+0x634>
 8003812:	9b03      	ldr	r3, [sp, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	f300 80d1 	bgt.w	80039bc <_dtoa_r+0x634>
 800381a:	f040 826f 	bne.w	8003cfc <_dtoa_r+0x974>
 800381e:	4b65      	ldr	r3, [pc, #404]	; (80039b4 <_dtoa_r+0x62c>)
 8003820:	2200      	movs	r2, #0
 8003822:	4640      	mov	r0, r8
 8003824:	4649      	mov	r1, r9
 8003826:	f7fc ff07 	bl	8000638 <__aeabi_dmul>
 800382a:	4652      	mov	r2, sl
 800382c:	465b      	mov	r3, fp
 800382e:	f7fd f989 	bl	8000b44 <__aeabi_dcmpge>
 8003832:	9e03      	ldr	r6, [sp, #12]
 8003834:	4637      	mov	r7, r6
 8003836:	2800      	cmp	r0, #0
 8003838:	f040 8245 	bne.w	8003cc6 <_dtoa_r+0x93e>
 800383c:	9d01      	ldr	r5, [sp, #4]
 800383e:	2331      	movs	r3, #49	; 0x31
 8003840:	f805 3b01 	strb.w	r3, [r5], #1
 8003844:	9b00      	ldr	r3, [sp, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	e240      	b.n	8003cce <_dtoa_r+0x946>
 800384c:	07f2      	lsls	r2, r6, #31
 800384e:	d505      	bpl.n	800385c <_dtoa_r+0x4d4>
 8003850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003854:	f7fc fef0 	bl	8000638 <__aeabi_dmul>
 8003858:	3501      	adds	r5, #1
 800385a:	2301      	movs	r3, #1
 800385c:	1076      	asrs	r6, r6, #1
 800385e:	3708      	adds	r7, #8
 8003860:	e777      	b.n	8003752 <_dtoa_r+0x3ca>
 8003862:	2502      	movs	r5, #2
 8003864:	e779      	b.n	800375a <_dtoa_r+0x3d2>
 8003866:	9f00      	ldr	r7, [sp, #0]
 8003868:	9e03      	ldr	r6, [sp, #12]
 800386a:	e794      	b.n	8003796 <_dtoa_r+0x40e>
 800386c:	9901      	ldr	r1, [sp, #4]
 800386e:	4b4c      	ldr	r3, [pc, #304]	; (80039a0 <_dtoa_r+0x618>)
 8003870:	4431      	add	r1, r6
 8003872:	910d      	str	r1, [sp, #52]	; 0x34
 8003874:	9908      	ldr	r1, [sp, #32]
 8003876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800387a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800387e:	2900      	cmp	r1, #0
 8003880:	d043      	beq.n	800390a <_dtoa_r+0x582>
 8003882:	494d      	ldr	r1, [pc, #308]	; (80039b8 <_dtoa_r+0x630>)
 8003884:	2000      	movs	r0, #0
 8003886:	f7fd f801 	bl	800088c <__aeabi_ddiv>
 800388a:	4652      	mov	r2, sl
 800388c:	465b      	mov	r3, fp
 800388e:	f7fc fd1b 	bl	80002c8 <__aeabi_dsub>
 8003892:	9d01      	ldr	r5, [sp, #4]
 8003894:	4682      	mov	sl, r0
 8003896:	468b      	mov	fp, r1
 8003898:	4649      	mov	r1, r9
 800389a:	4640      	mov	r0, r8
 800389c:	f7fd f97c 	bl	8000b98 <__aeabi_d2iz>
 80038a0:	4606      	mov	r6, r0
 80038a2:	f7fc fe5f 	bl	8000564 <__aeabi_i2d>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4640      	mov	r0, r8
 80038ac:	4649      	mov	r1, r9
 80038ae:	f7fc fd0b 	bl	80002c8 <__aeabi_dsub>
 80038b2:	3630      	adds	r6, #48	; 0x30
 80038b4:	f805 6b01 	strb.w	r6, [r5], #1
 80038b8:	4652      	mov	r2, sl
 80038ba:	465b      	mov	r3, fp
 80038bc:	4680      	mov	r8, r0
 80038be:	4689      	mov	r9, r1
 80038c0:	f7fd f92c 	bl	8000b1c <__aeabi_dcmplt>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d163      	bne.n	8003990 <_dtoa_r+0x608>
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	4936      	ldr	r1, [pc, #216]	; (80039a8 <_dtoa_r+0x620>)
 80038ce:	2000      	movs	r0, #0
 80038d0:	f7fc fcfa 	bl	80002c8 <__aeabi_dsub>
 80038d4:	4652      	mov	r2, sl
 80038d6:	465b      	mov	r3, fp
 80038d8:	f7fd f920 	bl	8000b1c <__aeabi_dcmplt>
 80038dc:	2800      	cmp	r0, #0
 80038de:	f040 80b5 	bne.w	8003a4c <_dtoa_r+0x6c4>
 80038e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038e4:	429d      	cmp	r5, r3
 80038e6:	d081      	beq.n	80037ec <_dtoa_r+0x464>
 80038e8:	4b30      	ldr	r3, [pc, #192]	; (80039ac <_dtoa_r+0x624>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	4650      	mov	r0, sl
 80038ee:	4659      	mov	r1, fp
 80038f0:	f7fc fea2 	bl	8000638 <__aeabi_dmul>
 80038f4:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <_dtoa_r+0x624>)
 80038f6:	4682      	mov	sl, r0
 80038f8:	468b      	mov	fp, r1
 80038fa:	4640      	mov	r0, r8
 80038fc:	4649      	mov	r1, r9
 80038fe:	2200      	movs	r2, #0
 8003900:	f7fc fe9a 	bl	8000638 <__aeabi_dmul>
 8003904:	4680      	mov	r8, r0
 8003906:	4689      	mov	r9, r1
 8003908:	e7c6      	b.n	8003898 <_dtoa_r+0x510>
 800390a:	4650      	mov	r0, sl
 800390c:	4659      	mov	r1, fp
 800390e:	f7fc fe93 	bl	8000638 <__aeabi_dmul>
 8003912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003914:	9d01      	ldr	r5, [sp, #4]
 8003916:	930f      	str	r3, [sp, #60]	; 0x3c
 8003918:	4682      	mov	sl, r0
 800391a:	468b      	mov	fp, r1
 800391c:	4649      	mov	r1, r9
 800391e:	4640      	mov	r0, r8
 8003920:	f7fd f93a 	bl	8000b98 <__aeabi_d2iz>
 8003924:	4606      	mov	r6, r0
 8003926:	f7fc fe1d 	bl	8000564 <__aeabi_i2d>
 800392a:	3630      	adds	r6, #48	; 0x30
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4640      	mov	r0, r8
 8003932:	4649      	mov	r1, r9
 8003934:	f7fc fcc8 	bl	80002c8 <__aeabi_dsub>
 8003938:	f805 6b01 	strb.w	r6, [r5], #1
 800393c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800393e:	429d      	cmp	r5, r3
 8003940:	4680      	mov	r8, r0
 8003942:	4689      	mov	r9, r1
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	d124      	bne.n	8003994 <_dtoa_r+0x60c>
 800394a:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <_dtoa_r+0x630>)
 800394c:	4650      	mov	r0, sl
 800394e:	4659      	mov	r1, fp
 8003950:	f7fc fcbc 	bl	80002cc <__adddf3>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4640      	mov	r0, r8
 800395a:	4649      	mov	r1, r9
 800395c:	f7fd f8fc 	bl	8000b58 <__aeabi_dcmpgt>
 8003960:	2800      	cmp	r0, #0
 8003962:	d173      	bne.n	8003a4c <_dtoa_r+0x6c4>
 8003964:	4652      	mov	r2, sl
 8003966:	465b      	mov	r3, fp
 8003968:	4913      	ldr	r1, [pc, #76]	; (80039b8 <_dtoa_r+0x630>)
 800396a:	2000      	movs	r0, #0
 800396c:	f7fc fcac 	bl	80002c8 <__aeabi_dsub>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4640      	mov	r0, r8
 8003976:	4649      	mov	r1, r9
 8003978:	f7fd f8d0 	bl	8000b1c <__aeabi_dcmplt>
 800397c:	2800      	cmp	r0, #0
 800397e:	f43f af35 	beq.w	80037ec <_dtoa_r+0x464>
 8003982:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003984:	1e6b      	subs	r3, r5, #1
 8003986:	930f      	str	r3, [sp, #60]	; 0x3c
 8003988:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800398c:	2b30      	cmp	r3, #48	; 0x30
 800398e:	d0f8      	beq.n	8003982 <_dtoa_r+0x5fa>
 8003990:	9700      	str	r7, [sp, #0]
 8003992:	e049      	b.n	8003a28 <_dtoa_r+0x6a0>
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <_dtoa_r+0x624>)
 8003996:	f7fc fe4f 	bl	8000638 <__aeabi_dmul>
 800399a:	4680      	mov	r8, r0
 800399c:	4689      	mov	r9, r1
 800399e:	e7bd      	b.n	800391c <_dtoa_r+0x594>
 80039a0:	08005520 	.word	0x08005520
 80039a4:	080054f8 	.word	0x080054f8
 80039a8:	3ff00000 	.word	0x3ff00000
 80039ac:	40240000 	.word	0x40240000
 80039b0:	401c0000 	.word	0x401c0000
 80039b4:	40140000 	.word	0x40140000
 80039b8:	3fe00000 	.word	0x3fe00000
 80039bc:	9d01      	ldr	r5, [sp, #4]
 80039be:	4656      	mov	r6, sl
 80039c0:	465f      	mov	r7, fp
 80039c2:	4642      	mov	r2, r8
 80039c4:	464b      	mov	r3, r9
 80039c6:	4630      	mov	r0, r6
 80039c8:	4639      	mov	r1, r7
 80039ca:	f7fc ff5f 	bl	800088c <__aeabi_ddiv>
 80039ce:	f7fd f8e3 	bl	8000b98 <__aeabi_d2iz>
 80039d2:	4682      	mov	sl, r0
 80039d4:	f7fc fdc6 	bl	8000564 <__aeabi_i2d>
 80039d8:	4642      	mov	r2, r8
 80039da:	464b      	mov	r3, r9
 80039dc:	f7fc fe2c 	bl	8000638 <__aeabi_dmul>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4630      	mov	r0, r6
 80039e6:	4639      	mov	r1, r7
 80039e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80039ec:	f7fc fc6c 	bl	80002c8 <__aeabi_dsub>
 80039f0:	f805 6b01 	strb.w	r6, [r5], #1
 80039f4:	9e01      	ldr	r6, [sp, #4]
 80039f6:	9f03      	ldr	r7, [sp, #12]
 80039f8:	1bae      	subs	r6, r5, r6
 80039fa:	42b7      	cmp	r7, r6
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	d135      	bne.n	8003a6e <_dtoa_r+0x6e6>
 8003a02:	f7fc fc63 	bl	80002cc <__adddf3>
 8003a06:	4642      	mov	r2, r8
 8003a08:	464b      	mov	r3, r9
 8003a0a:	4606      	mov	r6, r0
 8003a0c:	460f      	mov	r7, r1
 8003a0e:	f7fd f8a3 	bl	8000b58 <__aeabi_dcmpgt>
 8003a12:	b9d0      	cbnz	r0, 8003a4a <_dtoa_r+0x6c2>
 8003a14:	4642      	mov	r2, r8
 8003a16:	464b      	mov	r3, r9
 8003a18:	4630      	mov	r0, r6
 8003a1a:	4639      	mov	r1, r7
 8003a1c:	f7fd f874 	bl	8000b08 <__aeabi_dcmpeq>
 8003a20:	b110      	cbz	r0, 8003a28 <_dtoa_r+0x6a0>
 8003a22:	f01a 0f01 	tst.w	sl, #1
 8003a26:	d110      	bne.n	8003a4a <_dtoa_r+0x6c2>
 8003a28:	4620      	mov	r0, r4
 8003a2a:	ee18 1a10 	vmov	r1, s16
 8003a2e:	f000 fbd3 	bl	80041d8 <_Bfree>
 8003a32:	2300      	movs	r3, #0
 8003a34:	9800      	ldr	r0, [sp, #0]
 8003a36:	702b      	strb	r3, [r5, #0]
 8003a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	6018      	str	r0, [r3, #0]
 8003a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f43f acf1 	beq.w	8003428 <_dtoa_r+0xa0>
 8003a46:	601d      	str	r5, [r3, #0]
 8003a48:	e4ee      	b.n	8003428 <_dtoa_r+0xa0>
 8003a4a:	9f00      	ldr	r7, [sp, #0]
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	461d      	mov	r5, r3
 8003a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003a54:	2a39      	cmp	r2, #57	; 0x39
 8003a56:	d106      	bne.n	8003a66 <_dtoa_r+0x6de>
 8003a58:	9a01      	ldr	r2, [sp, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d1f7      	bne.n	8003a4e <_dtoa_r+0x6c6>
 8003a5e:	9901      	ldr	r1, [sp, #4]
 8003a60:	2230      	movs	r2, #48	; 0x30
 8003a62:	3701      	adds	r7, #1
 8003a64:	700a      	strb	r2, [r1, #0]
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	3201      	adds	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e790      	b.n	8003990 <_dtoa_r+0x608>
 8003a6e:	4ba6      	ldr	r3, [pc, #664]	; (8003d08 <_dtoa_r+0x980>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	f7fc fde1 	bl	8000638 <__aeabi_dmul>
 8003a76:	2200      	movs	r2, #0
 8003a78:	2300      	movs	r3, #0
 8003a7a:	4606      	mov	r6, r0
 8003a7c:	460f      	mov	r7, r1
 8003a7e:	f7fd f843 	bl	8000b08 <__aeabi_dcmpeq>
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d09d      	beq.n	80039c2 <_dtoa_r+0x63a>
 8003a86:	e7cf      	b.n	8003a28 <_dtoa_r+0x6a0>
 8003a88:	9a08      	ldr	r2, [sp, #32]
 8003a8a:	2a00      	cmp	r2, #0
 8003a8c:	f000 80d7 	beq.w	8003c3e <_dtoa_r+0x8b6>
 8003a90:	9a06      	ldr	r2, [sp, #24]
 8003a92:	2a01      	cmp	r2, #1
 8003a94:	f300 80ba 	bgt.w	8003c0c <_dtoa_r+0x884>
 8003a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a9a:	2a00      	cmp	r2, #0
 8003a9c:	f000 80b2 	beq.w	8003c04 <_dtoa_r+0x87c>
 8003aa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003aa4:	9e07      	ldr	r6, [sp, #28]
 8003aa6:	9d04      	ldr	r5, [sp, #16]
 8003aa8:	9a04      	ldr	r2, [sp, #16]
 8003aaa:	441a      	add	r2, r3
 8003aac:	9204      	str	r2, [sp, #16]
 8003aae:	9a05      	ldr	r2, [sp, #20]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	441a      	add	r2, r3
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	9205      	str	r2, [sp, #20]
 8003ab8:	f000 fc46 	bl	8004348 <__i2b>
 8003abc:	4607      	mov	r7, r0
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	dd0c      	ble.n	8003adc <_dtoa_r+0x754>
 8003ac2:	9b05      	ldr	r3, [sp, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	dd09      	ble.n	8003adc <_dtoa_r+0x754>
 8003ac8:	42ab      	cmp	r3, r5
 8003aca:	9a04      	ldr	r2, [sp, #16]
 8003acc:	bfa8      	it	ge
 8003ace:	462b      	movge	r3, r5
 8003ad0:	1ad2      	subs	r2, r2, r3
 8003ad2:	9204      	str	r2, [sp, #16]
 8003ad4:	9a05      	ldr	r2, [sp, #20]
 8003ad6:	1aed      	subs	r5, r5, r3
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	9305      	str	r3, [sp, #20]
 8003adc:	9b07      	ldr	r3, [sp, #28]
 8003ade:	b31b      	cbz	r3, 8003b28 <_dtoa_r+0x7a0>
 8003ae0:	9b08      	ldr	r3, [sp, #32]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80af 	beq.w	8003c46 <_dtoa_r+0x8be>
 8003ae8:	2e00      	cmp	r6, #0
 8003aea:	dd13      	ble.n	8003b14 <_dtoa_r+0x78c>
 8003aec:	4639      	mov	r1, r7
 8003aee:	4632      	mov	r2, r6
 8003af0:	4620      	mov	r0, r4
 8003af2:	f000 fce9 	bl	80044c8 <__pow5mult>
 8003af6:	ee18 2a10 	vmov	r2, s16
 8003afa:	4601      	mov	r1, r0
 8003afc:	4607      	mov	r7, r0
 8003afe:	4620      	mov	r0, r4
 8003b00:	f000 fc38 	bl	8004374 <__multiply>
 8003b04:	ee18 1a10 	vmov	r1, s16
 8003b08:	4680      	mov	r8, r0
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f000 fb64 	bl	80041d8 <_Bfree>
 8003b10:	ee08 8a10 	vmov	s16, r8
 8003b14:	9b07      	ldr	r3, [sp, #28]
 8003b16:	1b9a      	subs	r2, r3, r6
 8003b18:	d006      	beq.n	8003b28 <_dtoa_r+0x7a0>
 8003b1a:	ee18 1a10 	vmov	r1, s16
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f000 fcd2 	bl	80044c8 <__pow5mult>
 8003b24:	ee08 0a10 	vmov	s16, r0
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f000 fc0c 	bl	8004348 <__i2b>
 8003b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	4606      	mov	r6, r0
 8003b36:	f340 8088 	ble.w	8003c4a <_dtoa_r+0x8c2>
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4601      	mov	r1, r0
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f000 fcc2 	bl	80044c8 <__pow5mult>
 8003b44:	9b06      	ldr	r3, [sp, #24]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	4606      	mov	r6, r0
 8003b4a:	f340 8081 	ble.w	8003c50 <_dtoa_r+0x8c8>
 8003b4e:	f04f 0800 	mov.w	r8, #0
 8003b52:	6933      	ldr	r3, [r6, #16]
 8003b54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003b58:	6918      	ldr	r0, [r3, #16]
 8003b5a:	f000 fba5 	bl	80042a8 <__hi0bits>
 8003b5e:	f1c0 0020 	rsb	r0, r0, #32
 8003b62:	9b05      	ldr	r3, [sp, #20]
 8003b64:	4418      	add	r0, r3
 8003b66:	f010 001f 	ands.w	r0, r0, #31
 8003b6a:	f000 8092 	beq.w	8003c92 <_dtoa_r+0x90a>
 8003b6e:	f1c0 0320 	rsb	r3, r0, #32
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	f340 808a 	ble.w	8003c8c <_dtoa_r+0x904>
 8003b78:	f1c0 001c 	rsb	r0, r0, #28
 8003b7c:	9b04      	ldr	r3, [sp, #16]
 8003b7e:	4403      	add	r3, r0
 8003b80:	9304      	str	r3, [sp, #16]
 8003b82:	9b05      	ldr	r3, [sp, #20]
 8003b84:	4403      	add	r3, r0
 8003b86:	4405      	add	r5, r0
 8003b88:	9305      	str	r3, [sp, #20]
 8003b8a:	9b04      	ldr	r3, [sp, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	dd07      	ble.n	8003ba0 <_dtoa_r+0x818>
 8003b90:	ee18 1a10 	vmov	r1, s16
 8003b94:	461a      	mov	r2, r3
 8003b96:	4620      	mov	r0, r4
 8003b98:	f000 fcf0 	bl	800457c <__lshift>
 8003b9c:	ee08 0a10 	vmov	s16, r0
 8003ba0:	9b05      	ldr	r3, [sp, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	dd05      	ble.n	8003bb2 <_dtoa_r+0x82a>
 8003ba6:	4631      	mov	r1, r6
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4620      	mov	r0, r4
 8003bac:	f000 fce6 	bl	800457c <__lshift>
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d06e      	beq.n	8003c96 <_dtoa_r+0x90e>
 8003bb8:	ee18 0a10 	vmov	r0, s16
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	f000 fd4d 	bl	800465c <__mcmp>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	da67      	bge.n	8003c96 <_dtoa_r+0x90e>
 8003bc6:	9b00      	ldr	r3, [sp, #0]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	ee18 1a10 	vmov	r1, s16
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	220a      	movs	r2, #10
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f000 fb21 	bl	800421c <__multadd>
 8003bda:	9b08      	ldr	r3, [sp, #32]
 8003bdc:	ee08 0a10 	vmov	s16, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 81b1 	beq.w	8003f48 <_dtoa_r+0xbc0>
 8003be6:	2300      	movs	r3, #0
 8003be8:	4639      	mov	r1, r7
 8003bea:	220a      	movs	r2, #10
 8003bec:	4620      	mov	r0, r4
 8003bee:	f000 fb15 	bl	800421c <__multadd>
 8003bf2:	9b02      	ldr	r3, [sp, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	4607      	mov	r7, r0
 8003bf8:	f300 808e 	bgt.w	8003d18 <_dtoa_r+0x990>
 8003bfc:	9b06      	ldr	r3, [sp, #24]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	dc51      	bgt.n	8003ca6 <_dtoa_r+0x91e>
 8003c02:	e089      	b.n	8003d18 <_dtoa_r+0x990>
 8003c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003c0a:	e74b      	b.n	8003aa4 <_dtoa_r+0x71c>
 8003c0c:	9b03      	ldr	r3, [sp, #12]
 8003c0e:	1e5e      	subs	r6, r3, #1
 8003c10:	9b07      	ldr	r3, [sp, #28]
 8003c12:	42b3      	cmp	r3, r6
 8003c14:	bfbf      	itttt	lt
 8003c16:	9b07      	ldrlt	r3, [sp, #28]
 8003c18:	9607      	strlt	r6, [sp, #28]
 8003c1a:	1af2      	sublt	r2, r6, r3
 8003c1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003c1e:	bfb6      	itet	lt
 8003c20:	189b      	addlt	r3, r3, r2
 8003c22:	1b9e      	subge	r6, r3, r6
 8003c24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8003c26:	9b03      	ldr	r3, [sp, #12]
 8003c28:	bfb8      	it	lt
 8003c2a:	2600      	movlt	r6, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bfb7      	itett	lt
 8003c30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8003c34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003c38:	1a9d      	sublt	r5, r3, r2
 8003c3a:	2300      	movlt	r3, #0
 8003c3c:	e734      	b.n	8003aa8 <_dtoa_r+0x720>
 8003c3e:	9e07      	ldr	r6, [sp, #28]
 8003c40:	9d04      	ldr	r5, [sp, #16]
 8003c42:	9f08      	ldr	r7, [sp, #32]
 8003c44:	e73b      	b.n	8003abe <_dtoa_r+0x736>
 8003c46:	9a07      	ldr	r2, [sp, #28]
 8003c48:	e767      	b.n	8003b1a <_dtoa_r+0x792>
 8003c4a:	9b06      	ldr	r3, [sp, #24]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	dc18      	bgt.n	8003c82 <_dtoa_r+0x8fa>
 8003c50:	f1ba 0f00 	cmp.w	sl, #0
 8003c54:	d115      	bne.n	8003c82 <_dtoa_r+0x8fa>
 8003c56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003c5a:	b993      	cbnz	r3, 8003c82 <_dtoa_r+0x8fa>
 8003c5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003c60:	0d1b      	lsrs	r3, r3, #20
 8003c62:	051b      	lsls	r3, r3, #20
 8003c64:	b183      	cbz	r3, 8003c88 <_dtoa_r+0x900>
 8003c66:	9b04      	ldr	r3, [sp, #16]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	9304      	str	r3, [sp, #16]
 8003c6c:	9b05      	ldr	r3, [sp, #20]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	9305      	str	r3, [sp, #20]
 8003c72:	f04f 0801 	mov.w	r8, #1
 8003c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f47f af6a 	bne.w	8003b52 <_dtoa_r+0x7ca>
 8003c7e:	2001      	movs	r0, #1
 8003c80:	e76f      	b.n	8003b62 <_dtoa_r+0x7da>
 8003c82:	f04f 0800 	mov.w	r8, #0
 8003c86:	e7f6      	b.n	8003c76 <_dtoa_r+0x8ee>
 8003c88:	4698      	mov	r8, r3
 8003c8a:	e7f4      	b.n	8003c76 <_dtoa_r+0x8ee>
 8003c8c:	f43f af7d 	beq.w	8003b8a <_dtoa_r+0x802>
 8003c90:	4618      	mov	r0, r3
 8003c92:	301c      	adds	r0, #28
 8003c94:	e772      	b.n	8003b7c <_dtoa_r+0x7f4>
 8003c96:	9b03      	ldr	r3, [sp, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dc37      	bgt.n	8003d0c <_dtoa_r+0x984>
 8003c9c:	9b06      	ldr	r3, [sp, #24]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	dd34      	ble.n	8003d0c <_dtoa_r+0x984>
 8003ca2:	9b03      	ldr	r3, [sp, #12]
 8003ca4:	9302      	str	r3, [sp, #8]
 8003ca6:	9b02      	ldr	r3, [sp, #8]
 8003ca8:	b96b      	cbnz	r3, 8003cc6 <_dtoa_r+0x93e>
 8003caa:	4631      	mov	r1, r6
 8003cac:	2205      	movs	r2, #5
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f000 fab4 	bl	800421c <__multadd>
 8003cb4:	4601      	mov	r1, r0
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	ee18 0a10 	vmov	r0, s16
 8003cbc:	f000 fcce 	bl	800465c <__mcmp>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	f73f adbb 	bgt.w	800383c <_dtoa_r+0x4b4>
 8003cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cc8:	9d01      	ldr	r5, [sp, #4]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	f04f 0800 	mov.w	r8, #0
 8003cd2:	4631      	mov	r1, r6
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f000 fa7f 	bl	80041d8 <_Bfree>
 8003cda:	2f00      	cmp	r7, #0
 8003cdc:	f43f aea4 	beq.w	8003a28 <_dtoa_r+0x6a0>
 8003ce0:	f1b8 0f00 	cmp.w	r8, #0
 8003ce4:	d005      	beq.n	8003cf2 <_dtoa_r+0x96a>
 8003ce6:	45b8      	cmp	r8, r7
 8003ce8:	d003      	beq.n	8003cf2 <_dtoa_r+0x96a>
 8003cea:	4641      	mov	r1, r8
 8003cec:	4620      	mov	r0, r4
 8003cee:	f000 fa73 	bl	80041d8 <_Bfree>
 8003cf2:	4639      	mov	r1, r7
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f000 fa6f 	bl	80041d8 <_Bfree>
 8003cfa:	e695      	b.n	8003a28 <_dtoa_r+0x6a0>
 8003cfc:	2600      	movs	r6, #0
 8003cfe:	4637      	mov	r7, r6
 8003d00:	e7e1      	b.n	8003cc6 <_dtoa_r+0x93e>
 8003d02:	9700      	str	r7, [sp, #0]
 8003d04:	4637      	mov	r7, r6
 8003d06:	e599      	b.n	800383c <_dtoa_r+0x4b4>
 8003d08:	40240000 	.word	0x40240000
 8003d0c:	9b08      	ldr	r3, [sp, #32]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80ca 	beq.w	8003ea8 <_dtoa_r+0xb20>
 8003d14:	9b03      	ldr	r3, [sp, #12]
 8003d16:	9302      	str	r3, [sp, #8]
 8003d18:	2d00      	cmp	r5, #0
 8003d1a:	dd05      	ble.n	8003d28 <_dtoa_r+0x9a0>
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	462a      	mov	r2, r5
 8003d20:	4620      	mov	r0, r4
 8003d22:	f000 fc2b 	bl	800457c <__lshift>
 8003d26:	4607      	mov	r7, r0
 8003d28:	f1b8 0f00 	cmp.w	r8, #0
 8003d2c:	d05b      	beq.n	8003de6 <_dtoa_r+0xa5e>
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4620      	mov	r0, r4
 8003d32:	f000 fa11 	bl	8004158 <_Balloc>
 8003d36:	4605      	mov	r5, r0
 8003d38:	b928      	cbnz	r0, 8003d46 <_dtoa_r+0x9be>
 8003d3a:	4b87      	ldr	r3, [pc, #540]	; (8003f58 <_dtoa_r+0xbd0>)
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003d42:	f7ff bb3b 	b.w	80033bc <_dtoa_r+0x34>
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	3202      	adds	r2, #2
 8003d4a:	0092      	lsls	r2, r2, #2
 8003d4c:	f107 010c 	add.w	r1, r7, #12
 8003d50:	300c      	adds	r0, #12
 8003d52:	f000 f9e7 	bl	8004124 <memcpy>
 8003d56:	2201      	movs	r2, #1
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f000 fc0e 	bl	800457c <__lshift>
 8003d60:	9b01      	ldr	r3, [sp, #4]
 8003d62:	f103 0901 	add.w	r9, r3, #1
 8003d66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	9305      	str	r3, [sp, #20]
 8003d6e:	f00a 0301 	and.w	r3, sl, #1
 8003d72:	46b8      	mov	r8, r7
 8003d74:	9304      	str	r3, [sp, #16]
 8003d76:	4607      	mov	r7, r0
 8003d78:	4631      	mov	r1, r6
 8003d7a:	ee18 0a10 	vmov	r0, s16
 8003d7e:	f7ff fa75 	bl	800326c <quorem>
 8003d82:	4641      	mov	r1, r8
 8003d84:	9002      	str	r0, [sp, #8]
 8003d86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003d8a:	ee18 0a10 	vmov	r0, s16
 8003d8e:	f000 fc65 	bl	800465c <__mcmp>
 8003d92:	463a      	mov	r2, r7
 8003d94:	9003      	str	r0, [sp, #12]
 8003d96:	4631      	mov	r1, r6
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f000 fc7b 	bl	8004694 <__mdiff>
 8003d9e:	68c2      	ldr	r2, [r0, #12]
 8003da0:	f109 3bff 	add.w	fp, r9, #4294967295
 8003da4:	4605      	mov	r5, r0
 8003da6:	bb02      	cbnz	r2, 8003dea <_dtoa_r+0xa62>
 8003da8:	4601      	mov	r1, r0
 8003daa:	ee18 0a10 	vmov	r0, s16
 8003dae:	f000 fc55 	bl	800465c <__mcmp>
 8003db2:	4602      	mov	r2, r0
 8003db4:	4629      	mov	r1, r5
 8003db6:	4620      	mov	r0, r4
 8003db8:	9207      	str	r2, [sp, #28]
 8003dba:	f000 fa0d 	bl	80041d8 <_Bfree>
 8003dbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8003dc2:	ea43 0102 	orr.w	r1, r3, r2
 8003dc6:	9b04      	ldr	r3, [sp, #16]
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	464d      	mov	r5, r9
 8003dcc:	d10f      	bne.n	8003dee <_dtoa_r+0xa66>
 8003dce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003dd2:	d02a      	beq.n	8003e2a <_dtoa_r+0xaa2>
 8003dd4:	9b03      	ldr	r3, [sp, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	dd02      	ble.n	8003de0 <_dtoa_r+0xa58>
 8003dda:	9b02      	ldr	r3, [sp, #8]
 8003ddc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8003de0:	f88b a000 	strb.w	sl, [fp]
 8003de4:	e775      	b.n	8003cd2 <_dtoa_r+0x94a>
 8003de6:	4638      	mov	r0, r7
 8003de8:	e7ba      	b.n	8003d60 <_dtoa_r+0x9d8>
 8003dea:	2201      	movs	r2, #1
 8003dec:	e7e2      	b.n	8003db4 <_dtoa_r+0xa2c>
 8003dee:	9b03      	ldr	r3, [sp, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	db04      	blt.n	8003dfe <_dtoa_r+0xa76>
 8003df4:	9906      	ldr	r1, [sp, #24]
 8003df6:	430b      	orrs	r3, r1
 8003df8:	9904      	ldr	r1, [sp, #16]
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	d122      	bne.n	8003e44 <_dtoa_r+0xabc>
 8003dfe:	2a00      	cmp	r2, #0
 8003e00:	ddee      	ble.n	8003de0 <_dtoa_r+0xa58>
 8003e02:	ee18 1a10 	vmov	r1, s16
 8003e06:	2201      	movs	r2, #1
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f000 fbb7 	bl	800457c <__lshift>
 8003e0e:	4631      	mov	r1, r6
 8003e10:	ee08 0a10 	vmov	s16, r0
 8003e14:	f000 fc22 	bl	800465c <__mcmp>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	dc03      	bgt.n	8003e24 <_dtoa_r+0xa9c>
 8003e1c:	d1e0      	bne.n	8003de0 <_dtoa_r+0xa58>
 8003e1e:	f01a 0f01 	tst.w	sl, #1
 8003e22:	d0dd      	beq.n	8003de0 <_dtoa_r+0xa58>
 8003e24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003e28:	d1d7      	bne.n	8003dda <_dtoa_r+0xa52>
 8003e2a:	2339      	movs	r3, #57	; 0x39
 8003e2c:	f88b 3000 	strb.w	r3, [fp]
 8003e30:	462b      	mov	r3, r5
 8003e32:	461d      	mov	r5, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003e3a:	2a39      	cmp	r2, #57	; 0x39
 8003e3c:	d071      	beq.n	8003f22 <_dtoa_r+0xb9a>
 8003e3e:	3201      	adds	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e746      	b.n	8003cd2 <_dtoa_r+0x94a>
 8003e44:	2a00      	cmp	r2, #0
 8003e46:	dd07      	ble.n	8003e58 <_dtoa_r+0xad0>
 8003e48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003e4c:	d0ed      	beq.n	8003e2a <_dtoa_r+0xaa2>
 8003e4e:	f10a 0301 	add.w	r3, sl, #1
 8003e52:	f88b 3000 	strb.w	r3, [fp]
 8003e56:	e73c      	b.n	8003cd2 <_dtoa_r+0x94a>
 8003e58:	9b05      	ldr	r3, [sp, #20]
 8003e5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8003e5e:	4599      	cmp	r9, r3
 8003e60:	d047      	beq.n	8003ef2 <_dtoa_r+0xb6a>
 8003e62:	ee18 1a10 	vmov	r1, s16
 8003e66:	2300      	movs	r3, #0
 8003e68:	220a      	movs	r2, #10
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f000 f9d6 	bl	800421c <__multadd>
 8003e70:	45b8      	cmp	r8, r7
 8003e72:	ee08 0a10 	vmov	s16, r0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	f04f 020a 	mov.w	r2, #10
 8003e7e:	4641      	mov	r1, r8
 8003e80:	4620      	mov	r0, r4
 8003e82:	d106      	bne.n	8003e92 <_dtoa_r+0xb0a>
 8003e84:	f000 f9ca 	bl	800421c <__multadd>
 8003e88:	4680      	mov	r8, r0
 8003e8a:	4607      	mov	r7, r0
 8003e8c:	f109 0901 	add.w	r9, r9, #1
 8003e90:	e772      	b.n	8003d78 <_dtoa_r+0x9f0>
 8003e92:	f000 f9c3 	bl	800421c <__multadd>
 8003e96:	4639      	mov	r1, r7
 8003e98:	4680      	mov	r8, r0
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	220a      	movs	r2, #10
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f000 f9bc 	bl	800421c <__multadd>
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	e7f1      	b.n	8003e8c <_dtoa_r+0xb04>
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	9302      	str	r3, [sp, #8]
 8003eac:	9d01      	ldr	r5, [sp, #4]
 8003eae:	ee18 0a10 	vmov	r0, s16
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	f7ff f9da 	bl	800326c <quorem>
 8003eb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003ebc:	9b01      	ldr	r3, [sp, #4]
 8003ebe:	f805 ab01 	strb.w	sl, [r5], #1
 8003ec2:	1aea      	subs	r2, r5, r3
 8003ec4:	9b02      	ldr	r3, [sp, #8]
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	dd09      	ble.n	8003ede <_dtoa_r+0xb56>
 8003eca:	ee18 1a10 	vmov	r1, s16
 8003ece:	2300      	movs	r3, #0
 8003ed0:	220a      	movs	r2, #10
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f000 f9a2 	bl	800421c <__multadd>
 8003ed8:	ee08 0a10 	vmov	s16, r0
 8003edc:	e7e7      	b.n	8003eae <_dtoa_r+0xb26>
 8003ede:	9b02      	ldr	r3, [sp, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bfc8      	it	gt
 8003ee4:	461d      	movgt	r5, r3
 8003ee6:	9b01      	ldr	r3, [sp, #4]
 8003ee8:	bfd8      	it	le
 8003eea:	2501      	movle	r5, #1
 8003eec:	441d      	add	r5, r3
 8003eee:	f04f 0800 	mov.w	r8, #0
 8003ef2:	ee18 1a10 	vmov	r1, s16
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f000 fb3f 	bl	800457c <__lshift>
 8003efe:	4631      	mov	r1, r6
 8003f00:	ee08 0a10 	vmov	s16, r0
 8003f04:	f000 fbaa 	bl	800465c <__mcmp>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	dc91      	bgt.n	8003e30 <_dtoa_r+0xaa8>
 8003f0c:	d102      	bne.n	8003f14 <_dtoa_r+0xb8c>
 8003f0e:	f01a 0f01 	tst.w	sl, #1
 8003f12:	d18d      	bne.n	8003e30 <_dtoa_r+0xaa8>
 8003f14:	462b      	mov	r3, r5
 8003f16:	461d      	mov	r5, r3
 8003f18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003f1c:	2a30      	cmp	r2, #48	; 0x30
 8003f1e:	d0fa      	beq.n	8003f16 <_dtoa_r+0xb8e>
 8003f20:	e6d7      	b.n	8003cd2 <_dtoa_r+0x94a>
 8003f22:	9a01      	ldr	r2, [sp, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d184      	bne.n	8003e32 <_dtoa_r+0xaaa>
 8003f28:	9b00      	ldr	r3, [sp, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	2331      	movs	r3, #49	; 0x31
 8003f30:	7013      	strb	r3, [r2, #0]
 8003f32:	e6ce      	b.n	8003cd2 <_dtoa_r+0x94a>
 8003f34:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <_dtoa_r+0xbd4>)
 8003f36:	f7ff ba95 	b.w	8003464 <_dtoa_r+0xdc>
 8003f3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f47f aa6e 	bne.w	800341e <_dtoa_r+0x96>
 8003f42:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <_dtoa_r+0xbd8>)
 8003f44:	f7ff ba8e 	b.w	8003464 <_dtoa_r+0xdc>
 8003f48:	9b02      	ldr	r3, [sp, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	dcae      	bgt.n	8003eac <_dtoa_r+0xb24>
 8003f4e:	9b06      	ldr	r3, [sp, #24]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	f73f aea8 	bgt.w	8003ca6 <_dtoa_r+0x91e>
 8003f56:	e7a9      	b.n	8003eac <_dtoa_r+0xb24>
 8003f58:	0800548b 	.word	0x0800548b
 8003f5c:	080053e8 	.word	0x080053e8
 8003f60:	0800540c 	.word	0x0800540c

08003f64 <__sflush_r>:
 8003f64:	898a      	ldrh	r2, [r1, #12]
 8003f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6a:	4605      	mov	r5, r0
 8003f6c:	0710      	lsls	r0, r2, #28
 8003f6e:	460c      	mov	r4, r1
 8003f70:	d458      	bmi.n	8004024 <__sflush_r+0xc0>
 8003f72:	684b      	ldr	r3, [r1, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	dc05      	bgt.n	8003f84 <__sflush_r+0x20>
 8003f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	dc02      	bgt.n	8003f84 <__sflush_r+0x20>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f86:	2e00      	cmp	r6, #0
 8003f88:	d0f9      	beq.n	8003f7e <__sflush_r+0x1a>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f90:	682f      	ldr	r7, [r5, #0]
 8003f92:	602b      	str	r3, [r5, #0]
 8003f94:	d032      	beq.n	8003ffc <__sflush_r+0x98>
 8003f96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f98:	89a3      	ldrh	r3, [r4, #12]
 8003f9a:	075a      	lsls	r2, r3, #29
 8003f9c:	d505      	bpl.n	8003faa <__sflush_r+0x46>
 8003f9e:	6863      	ldr	r3, [r4, #4]
 8003fa0:	1ac0      	subs	r0, r0, r3
 8003fa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fa4:	b10b      	cbz	r3, 8003faa <__sflush_r+0x46>
 8003fa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fa8:	1ac0      	subs	r0, r0, r3
 8003faa:	2300      	movs	r3, #0
 8003fac:	4602      	mov	r2, r0
 8003fae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fb0:	6a21      	ldr	r1, [r4, #32]
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	47b0      	blx	r6
 8003fb6:	1c43      	adds	r3, r0, #1
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	d106      	bne.n	8003fca <__sflush_r+0x66>
 8003fbc:	6829      	ldr	r1, [r5, #0]
 8003fbe:	291d      	cmp	r1, #29
 8003fc0:	d82c      	bhi.n	800401c <__sflush_r+0xb8>
 8003fc2:	4a2a      	ldr	r2, [pc, #168]	; (800406c <__sflush_r+0x108>)
 8003fc4:	40ca      	lsrs	r2, r1
 8003fc6:	07d6      	lsls	r6, r2, #31
 8003fc8:	d528      	bpl.n	800401c <__sflush_r+0xb8>
 8003fca:	2200      	movs	r2, #0
 8003fcc:	6062      	str	r2, [r4, #4]
 8003fce:	04d9      	lsls	r1, r3, #19
 8003fd0:	6922      	ldr	r2, [r4, #16]
 8003fd2:	6022      	str	r2, [r4, #0]
 8003fd4:	d504      	bpl.n	8003fe0 <__sflush_r+0x7c>
 8003fd6:	1c42      	adds	r2, r0, #1
 8003fd8:	d101      	bne.n	8003fde <__sflush_r+0x7a>
 8003fda:	682b      	ldr	r3, [r5, #0]
 8003fdc:	b903      	cbnz	r3, 8003fe0 <__sflush_r+0x7c>
 8003fde:	6560      	str	r0, [r4, #84]	; 0x54
 8003fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fe2:	602f      	str	r7, [r5, #0]
 8003fe4:	2900      	cmp	r1, #0
 8003fe6:	d0ca      	beq.n	8003f7e <__sflush_r+0x1a>
 8003fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fec:	4299      	cmp	r1, r3
 8003fee:	d002      	beq.n	8003ff6 <__sflush_r+0x92>
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	f000 fc4b 	bl	800488c <_free_r>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	6360      	str	r0, [r4, #52]	; 0x34
 8003ffa:	e7c1      	b.n	8003f80 <__sflush_r+0x1c>
 8003ffc:	6a21      	ldr	r1, [r4, #32]
 8003ffe:	2301      	movs	r3, #1
 8004000:	4628      	mov	r0, r5
 8004002:	47b0      	blx	r6
 8004004:	1c41      	adds	r1, r0, #1
 8004006:	d1c7      	bne.n	8003f98 <__sflush_r+0x34>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0c4      	beq.n	8003f98 <__sflush_r+0x34>
 800400e:	2b1d      	cmp	r3, #29
 8004010:	d001      	beq.n	8004016 <__sflush_r+0xb2>
 8004012:	2b16      	cmp	r3, #22
 8004014:	d101      	bne.n	800401a <__sflush_r+0xb6>
 8004016:	602f      	str	r7, [r5, #0]
 8004018:	e7b1      	b.n	8003f7e <__sflush_r+0x1a>
 800401a:	89a3      	ldrh	r3, [r4, #12]
 800401c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004020:	81a3      	strh	r3, [r4, #12]
 8004022:	e7ad      	b.n	8003f80 <__sflush_r+0x1c>
 8004024:	690f      	ldr	r7, [r1, #16]
 8004026:	2f00      	cmp	r7, #0
 8004028:	d0a9      	beq.n	8003f7e <__sflush_r+0x1a>
 800402a:	0793      	lsls	r3, r2, #30
 800402c:	680e      	ldr	r6, [r1, #0]
 800402e:	bf08      	it	eq
 8004030:	694b      	ldreq	r3, [r1, #20]
 8004032:	600f      	str	r7, [r1, #0]
 8004034:	bf18      	it	ne
 8004036:	2300      	movne	r3, #0
 8004038:	eba6 0807 	sub.w	r8, r6, r7
 800403c:	608b      	str	r3, [r1, #8]
 800403e:	f1b8 0f00 	cmp.w	r8, #0
 8004042:	dd9c      	ble.n	8003f7e <__sflush_r+0x1a>
 8004044:	6a21      	ldr	r1, [r4, #32]
 8004046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004048:	4643      	mov	r3, r8
 800404a:	463a      	mov	r2, r7
 800404c:	4628      	mov	r0, r5
 800404e:	47b0      	blx	r6
 8004050:	2800      	cmp	r0, #0
 8004052:	dc06      	bgt.n	8004062 <__sflush_r+0xfe>
 8004054:	89a3      	ldrh	r3, [r4, #12]
 8004056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800405a:	81a3      	strh	r3, [r4, #12]
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	e78e      	b.n	8003f80 <__sflush_r+0x1c>
 8004062:	4407      	add	r7, r0
 8004064:	eba8 0800 	sub.w	r8, r8, r0
 8004068:	e7e9      	b.n	800403e <__sflush_r+0xda>
 800406a:	bf00      	nop
 800406c:	20400001 	.word	0x20400001

08004070 <_fflush_r>:
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	690b      	ldr	r3, [r1, #16]
 8004074:	4605      	mov	r5, r0
 8004076:	460c      	mov	r4, r1
 8004078:	b913      	cbnz	r3, 8004080 <_fflush_r+0x10>
 800407a:	2500      	movs	r5, #0
 800407c:	4628      	mov	r0, r5
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	b118      	cbz	r0, 800408a <_fflush_r+0x1a>
 8004082:	6983      	ldr	r3, [r0, #24]
 8004084:	b90b      	cbnz	r3, 800408a <_fflush_r+0x1a>
 8004086:	f7fe fa8f 	bl	80025a8 <__sinit>
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <_fflush_r+0x6c>)
 800408c:	429c      	cmp	r4, r3
 800408e:	d11b      	bne.n	80040c8 <_fflush_r+0x58>
 8004090:	686c      	ldr	r4, [r5, #4]
 8004092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0ef      	beq.n	800407a <_fflush_r+0xa>
 800409a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800409c:	07d0      	lsls	r0, r2, #31
 800409e:	d404      	bmi.n	80040aa <_fflush_r+0x3a>
 80040a0:	0599      	lsls	r1, r3, #22
 80040a2:	d402      	bmi.n	80040aa <_fflush_r+0x3a>
 80040a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040a6:	f7fe fb42 	bl	800272e <__retarget_lock_acquire_recursive>
 80040aa:	4628      	mov	r0, r5
 80040ac:	4621      	mov	r1, r4
 80040ae:	f7ff ff59 	bl	8003f64 <__sflush_r>
 80040b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040b4:	07da      	lsls	r2, r3, #31
 80040b6:	4605      	mov	r5, r0
 80040b8:	d4e0      	bmi.n	800407c <_fflush_r+0xc>
 80040ba:	89a3      	ldrh	r3, [r4, #12]
 80040bc:	059b      	lsls	r3, r3, #22
 80040be:	d4dd      	bmi.n	800407c <_fflush_r+0xc>
 80040c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040c2:	f7fe fb35 	bl	8002730 <__retarget_lock_release_recursive>
 80040c6:	e7d9      	b.n	800407c <_fflush_r+0xc>
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <_fflush_r+0x70>)
 80040ca:	429c      	cmp	r4, r3
 80040cc:	d101      	bne.n	80040d2 <_fflush_r+0x62>
 80040ce:	68ac      	ldr	r4, [r5, #8]
 80040d0:	e7df      	b.n	8004092 <_fflush_r+0x22>
 80040d2:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <_fflush_r+0x74>)
 80040d4:	429c      	cmp	r4, r3
 80040d6:	bf08      	it	eq
 80040d8:	68ec      	ldreq	r4, [r5, #12]
 80040da:	e7da      	b.n	8004092 <_fflush_r+0x22>
 80040dc:	08005394 	.word	0x08005394
 80040e0:	080053b4 	.word	0x080053b4
 80040e4:	08005374 	.word	0x08005374

080040e8 <_localeconv_r>:
 80040e8:	4800      	ldr	r0, [pc, #0]	; (80040ec <_localeconv_r+0x4>)
 80040ea:	4770      	bx	lr
 80040ec:	20000164 	.word	0x20000164

080040f0 <_lseek_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4d07      	ldr	r5, [pc, #28]	; (8004110 <_lseek_r+0x20>)
 80040f4:	4604      	mov	r4, r0
 80040f6:	4608      	mov	r0, r1
 80040f8:	4611      	mov	r1, r2
 80040fa:	2200      	movs	r2, #0
 80040fc:	602a      	str	r2, [r5, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	f7fe f919 	bl	8002336 <_lseek>
 8004104:	1c43      	adds	r3, r0, #1
 8004106:	d102      	bne.n	800410e <_lseek_r+0x1e>
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	b103      	cbz	r3, 800410e <_lseek_r+0x1e>
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	20000360 	.word	0x20000360

08004114 <malloc>:
 8004114:	4b02      	ldr	r3, [pc, #8]	; (8004120 <malloc+0xc>)
 8004116:	4601      	mov	r1, r0
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	f7fe bb33 	b.w	8002784 <_malloc_r>
 800411e:	bf00      	nop
 8004120:	20000010 	.word	0x20000010

08004124 <memcpy>:
 8004124:	440a      	add	r2, r1
 8004126:	4291      	cmp	r1, r2
 8004128:	f100 33ff 	add.w	r3, r0, #4294967295
 800412c:	d100      	bne.n	8004130 <memcpy+0xc>
 800412e:	4770      	bx	lr
 8004130:	b510      	push	{r4, lr}
 8004132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800413a:	4291      	cmp	r1, r2
 800413c:	d1f9      	bne.n	8004132 <memcpy+0xe>
 800413e:	bd10      	pop	{r4, pc}

08004140 <__malloc_lock>:
 8004140:	4801      	ldr	r0, [pc, #4]	; (8004148 <__malloc_lock+0x8>)
 8004142:	f7fe baf4 	b.w	800272e <__retarget_lock_acquire_recursive>
 8004146:	bf00      	nop
 8004148:	20000354 	.word	0x20000354

0800414c <__malloc_unlock>:
 800414c:	4801      	ldr	r0, [pc, #4]	; (8004154 <__malloc_unlock+0x8>)
 800414e:	f7fe baef 	b.w	8002730 <__retarget_lock_release_recursive>
 8004152:	bf00      	nop
 8004154:	20000354 	.word	0x20000354

08004158 <_Balloc>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800415c:	4604      	mov	r4, r0
 800415e:	460d      	mov	r5, r1
 8004160:	b976      	cbnz	r6, 8004180 <_Balloc+0x28>
 8004162:	2010      	movs	r0, #16
 8004164:	f7ff ffd6 	bl	8004114 <malloc>
 8004168:	4602      	mov	r2, r0
 800416a:	6260      	str	r0, [r4, #36]	; 0x24
 800416c:	b920      	cbnz	r0, 8004178 <_Balloc+0x20>
 800416e:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <_Balloc+0x78>)
 8004170:	4818      	ldr	r0, [pc, #96]	; (80041d4 <_Balloc+0x7c>)
 8004172:	2166      	movs	r1, #102	; 0x66
 8004174:	f000 fd44 	bl	8004c00 <__assert_func>
 8004178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800417c:	6006      	str	r6, [r0, #0]
 800417e:	60c6      	str	r6, [r0, #12]
 8004180:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004182:	68f3      	ldr	r3, [r6, #12]
 8004184:	b183      	cbz	r3, 80041a8 <_Balloc+0x50>
 8004186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800418e:	b9b8      	cbnz	r0, 80041c0 <_Balloc+0x68>
 8004190:	2101      	movs	r1, #1
 8004192:	fa01 f605 	lsl.w	r6, r1, r5
 8004196:	1d72      	adds	r2, r6, #5
 8004198:	0092      	lsls	r2, r2, #2
 800419a:	4620      	mov	r0, r4
 800419c:	f000 fb60 	bl	8004860 <_calloc_r>
 80041a0:	b160      	cbz	r0, 80041bc <_Balloc+0x64>
 80041a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80041a6:	e00e      	b.n	80041c6 <_Balloc+0x6e>
 80041a8:	2221      	movs	r2, #33	; 0x21
 80041aa:	2104      	movs	r1, #4
 80041ac:	4620      	mov	r0, r4
 80041ae:	f000 fb57 	bl	8004860 <_calloc_r>
 80041b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041b4:	60f0      	str	r0, [r6, #12]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e4      	bne.n	8004186 <_Balloc+0x2e>
 80041bc:	2000      	movs	r0, #0
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	6802      	ldr	r2, [r0, #0]
 80041c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80041c6:	2300      	movs	r3, #0
 80041c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80041cc:	e7f7      	b.n	80041be <_Balloc+0x66>
 80041ce:	bf00      	nop
 80041d0:	08005419 	.word	0x08005419
 80041d4:	0800549c 	.word	0x0800549c

080041d8 <_Bfree>:
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80041dc:	4605      	mov	r5, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	b976      	cbnz	r6, 8004200 <_Bfree+0x28>
 80041e2:	2010      	movs	r0, #16
 80041e4:	f7ff ff96 	bl	8004114 <malloc>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6268      	str	r0, [r5, #36]	; 0x24
 80041ec:	b920      	cbnz	r0, 80041f8 <_Bfree+0x20>
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <_Bfree+0x3c>)
 80041f0:	4809      	ldr	r0, [pc, #36]	; (8004218 <_Bfree+0x40>)
 80041f2:	218a      	movs	r1, #138	; 0x8a
 80041f4:	f000 fd04 	bl	8004c00 <__assert_func>
 80041f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80041fc:	6006      	str	r6, [r0, #0]
 80041fe:	60c6      	str	r6, [r0, #12]
 8004200:	b13c      	cbz	r4, 8004212 <_Bfree+0x3a>
 8004202:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004204:	6862      	ldr	r2, [r4, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800420c:	6021      	str	r1, [r4, #0]
 800420e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	08005419 	.word	0x08005419
 8004218:	0800549c 	.word	0x0800549c

0800421c <__multadd>:
 800421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004220:	690d      	ldr	r5, [r1, #16]
 8004222:	4607      	mov	r7, r0
 8004224:	460c      	mov	r4, r1
 8004226:	461e      	mov	r6, r3
 8004228:	f101 0c14 	add.w	ip, r1, #20
 800422c:	2000      	movs	r0, #0
 800422e:	f8dc 3000 	ldr.w	r3, [ip]
 8004232:	b299      	uxth	r1, r3
 8004234:	fb02 6101 	mla	r1, r2, r1, r6
 8004238:	0c1e      	lsrs	r6, r3, #16
 800423a:	0c0b      	lsrs	r3, r1, #16
 800423c:	fb02 3306 	mla	r3, r2, r6, r3
 8004240:	b289      	uxth	r1, r1
 8004242:	3001      	adds	r0, #1
 8004244:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004248:	4285      	cmp	r5, r0
 800424a:	f84c 1b04 	str.w	r1, [ip], #4
 800424e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004252:	dcec      	bgt.n	800422e <__multadd+0x12>
 8004254:	b30e      	cbz	r6, 800429a <__multadd+0x7e>
 8004256:	68a3      	ldr	r3, [r4, #8]
 8004258:	42ab      	cmp	r3, r5
 800425a:	dc19      	bgt.n	8004290 <__multadd+0x74>
 800425c:	6861      	ldr	r1, [r4, #4]
 800425e:	4638      	mov	r0, r7
 8004260:	3101      	adds	r1, #1
 8004262:	f7ff ff79 	bl	8004158 <_Balloc>
 8004266:	4680      	mov	r8, r0
 8004268:	b928      	cbnz	r0, 8004276 <__multadd+0x5a>
 800426a:	4602      	mov	r2, r0
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <__multadd+0x84>)
 800426e:	480d      	ldr	r0, [pc, #52]	; (80042a4 <__multadd+0x88>)
 8004270:	21b5      	movs	r1, #181	; 0xb5
 8004272:	f000 fcc5 	bl	8004c00 <__assert_func>
 8004276:	6922      	ldr	r2, [r4, #16]
 8004278:	3202      	adds	r2, #2
 800427a:	f104 010c 	add.w	r1, r4, #12
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	300c      	adds	r0, #12
 8004282:	f7ff ff4f 	bl	8004124 <memcpy>
 8004286:	4621      	mov	r1, r4
 8004288:	4638      	mov	r0, r7
 800428a:	f7ff ffa5 	bl	80041d8 <_Bfree>
 800428e:	4644      	mov	r4, r8
 8004290:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004294:	3501      	adds	r5, #1
 8004296:	615e      	str	r6, [r3, #20]
 8004298:	6125      	str	r5, [r4, #16]
 800429a:	4620      	mov	r0, r4
 800429c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a0:	0800548b 	.word	0x0800548b
 80042a4:	0800549c 	.word	0x0800549c

080042a8 <__hi0bits>:
 80042a8:	0c03      	lsrs	r3, r0, #16
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	b9d3      	cbnz	r3, 80042e4 <__hi0bits+0x3c>
 80042ae:	0400      	lsls	r0, r0, #16
 80042b0:	2310      	movs	r3, #16
 80042b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80042b6:	bf04      	itt	eq
 80042b8:	0200      	lsleq	r0, r0, #8
 80042ba:	3308      	addeq	r3, #8
 80042bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80042c0:	bf04      	itt	eq
 80042c2:	0100      	lsleq	r0, r0, #4
 80042c4:	3304      	addeq	r3, #4
 80042c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80042ca:	bf04      	itt	eq
 80042cc:	0080      	lsleq	r0, r0, #2
 80042ce:	3302      	addeq	r3, #2
 80042d0:	2800      	cmp	r0, #0
 80042d2:	db05      	blt.n	80042e0 <__hi0bits+0x38>
 80042d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80042d8:	f103 0301 	add.w	r3, r3, #1
 80042dc:	bf08      	it	eq
 80042de:	2320      	moveq	r3, #32
 80042e0:	4618      	mov	r0, r3
 80042e2:	4770      	bx	lr
 80042e4:	2300      	movs	r3, #0
 80042e6:	e7e4      	b.n	80042b2 <__hi0bits+0xa>

080042e8 <__lo0bits>:
 80042e8:	6803      	ldr	r3, [r0, #0]
 80042ea:	f013 0207 	ands.w	r2, r3, #7
 80042ee:	4601      	mov	r1, r0
 80042f0:	d00b      	beq.n	800430a <__lo0bits+0x22>
 80042f2:	07da      	lsls	r2, r3, #31
 80042f4:	d423      	bmi.n	800433e <__lo0bits+0x56>
 80042f6:	0798      	lsls	r0, r3, #30
 80042f8:	bf49      	itett	mi
 80042fa:	085b      	lsrmi	r3, r3, #1
 80042fc:	089b      	lsrpl	r3, r3, #2
 80042fe:	2001      	movmi	r0, #1
 8004300:	600b      	strmi	r3, [r1, #0]
 8004302:	bf5c      	itt	pl
 8004304:	600b      	strpl	r3, [r1, #0]
 8004306:	2002      	movpl	r0, #2
 8004308:	4770      	bx	lr
 800430a:	b298      	uxth	r0, r3
 800430c:	b9a8      	cbnz	r0, 800433a <__lo0bits+0x52>
 800430e:	0c1b      	lsrs	r3, r3, #16
 8004310:	2010      	movs	r0, #16
 8004312:	b2da      	uxtb	r2, r3
 8004314:	b90a      	cbnz	r2, 800431a <__lo0bits+0x32>
 8004316:	3008      	adds	r0, #8
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	071a      	lsls	r2, r3, #28
 800431c:	bf04      	itt	eq
 800431e:	091b      	lsreq	r3, r3, #4
 8004320:	3004      	addeq	r0, #4
 8004322:	079a      	lsls	r2, r3, #30
 8004324:	bf04      	itt	eq
 8004326:	089b      	lsreq	r3, r3, #2
 8004328:	3002      	addeq	r0, #2
 800432a:	07da      	lsls	r2, r3, #31
 800432c:	d403      	bmi.n	8004336 <__lo0bits+0x4e>
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	f100 0001 	add.w	r0, r0, #1
 8004334:	d005      	beq.n	8004342 <__lo0bits+0x5a>
 8004336:	600b      	str	r3, [r1, #0]
 8004338:	4770      	bx	lr
 800433a:	4610      	mov	r0, r2
 800433c:	e7e9      	b.n	8004312 <__lo0bits+0x2a>
 800433e:	2000      	movs	r0, #0
 8004340:	4770      	bx	lr
 8004342:	2020      	movs	r0, #32
 8004344:	4770      	bx	lr
	...

08004348 <__i2b>:
 8004348:	b510      	push	{r4, lr}
 800434a:	460c      	mov	r4, r1
 800434c:	2101      	movs	r1, #1
 800434e:	f7ff ff03 	bl	8004158 <_Balloc>
 8004352:	4602      	mov	r2, r0
 8004354:	b928      	cbnz	r0, 8004362 <__i2b+0x1a>
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <__i2b+0x24>)
 8004358:	4805      	ldr	r0, [pc, #20]	; (8004370 <__i2b+0x28>)
 800435a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800435e:	f000 fc4f 	bl	8004c00 <__assert_func>
 8004362:	2301      	movs	r3, #1
 8004364:	6144      	str	r4, [r0, #20]
 8004366:	6103      	str	r3, [r0, #16]
 8004368:	bd10      	pop	{r4, pc}
 800436a:	bf00      	nop
 800436c:	0800548b 	.word	0x0800548b
 8004370:	0800549c 	.word	0x0800549c

08004374 <__multiply>:
 8004374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004378:	4691      	mov	r9, r2
 800437a:	690a      	ldr	r2, [r1, #16]
 800437c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004380:	429a      	cmp	r2, r3
 8004382:	bfb8      	it	lt
 8004384:	460b      	movlt	r3, r1
 8004386:	460c      	mov	r4, r1
 8004388:	bfbc      	itt	lt
 800438a:	464c      	movlt	r4, r9
 800438c:	4699      	movlt	r9, r3
 800438e:	6927      	ldr	r7, [r4, #16]
 8004390:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004394:	68a3      	ldr	r3, [r4, #8]
 8004396:	6861      	ldr	r1, [r4, #4]
 8004398:	eb07 060a 	add.w	r6, r7, sl
 800439c:	42b3      	cmp	r3, r6
 800439e:	b085      	sub	sp, #20
 80043a0:	bfb8      	it	lt
 80043a2:	3101      	addlt	r1, #1
 80043a4:	f7ff fed8 	bl	8004158 <_Balloc>
 80043a8:	b930      	cbnz	r0, 80043b8 <__multiply+0x44>
 80043aa:	4602      	mov	r2, r0
 80043ac:	4b44      	ldr	r3, [pc, #272]	; (80044c0 <__multiply+0x14c>)
 80043ae:	4845      	ldr	r0, [pc, #276]	; (80044c4 <__multiply+0x150>)
 80043b0:	f240 115d 	movw	r1, #349	; 0x15d
 80043b4:	f000 fc24 	bl	8004c00 <__assert_func>
 80043b8:	f100 0514 	add.w	r5, r0, #20
 80043bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80043c0:	462b      	mov	r3, r5
 80043c2:	2200      	movs	r2, #0
 80043c4:	4543      	cmp	r3, r8
 80043c6:	d321      	bcc.n	800440c <__multiply+0x98>
 80043c8:	f104 0314 	add.w	r3, r4, #20
 80043cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80043d0:	f109 0314 	add.w	r3, r9, #20
 80043d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80043d8:	9202      	str	r2, [sp, #8]
 80043da:	1b3a      	subs	r2, r7, r4
 80043dc:	3a15      	subs	r2, #21
 80043de:	f022 0203 	bic.w	r2, r2, #3
 80043e2:	3204      	adds	r2, #4
 80043e4:	f104 0115 	add.w	r1, r4, #21
 80043e8:	428f      	cmp	r7, r1
 80043ea:	bf38      	it	cc
 80043ec:	2204      	movcc	r2, #4
 80043ee:	9201      	str	r2, [sp, #4]
 80043f0:	9a02      	ldr	r2, [sp, #8]
 80043f2:	9303      	str	r3, [sp, #12]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d80c      	bhi.n	8004412 <__multiply+0x9e>
 80043f8:	2e00      	cmp	r6, #0
 80043fa:	dd03      	ble.n	8004404 <__multiply+0x90>
 80043fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004400:	2b00      	cmp	r3, #0
 8004402:	d05a      	beq.n	80044ba <__multiply+0x146>
 8004404:	6106      	str	r6, [r0, #16]
 8004406:	b005      	add	sp, #20
 8004408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440c:	f843 2b04 	str.w	r2, [r3], #4
 8004410:	e7d8      	b.n	80043c4 <__multiply+0x50>
 8004412:	f8b3 a000 	ldrh.w	sl, [r3]
 8004416:	f1ba 0f00 	cmp.w	sl, #0
 800441a:	d024      	beq.n	8004466 <__multiply+0xf2>
 800441c:	f104 0e14 	add.w	lr, r4, #20
 8004420:	46a9      	mov	r9, r5
 8004422:	f04f 0c00 	mov.w	ip, #0
 8004426:	f85e 2b04 	ldr.w	r2, [lr], #4
 800442a:	f8d9 1000 	ldr.w	r1, [r9]
 800442e:	fa1f fb82 	uxth.w	fp, r2
 8004432:	b289      	uxth	r1, r1
 8004434:	fb0a 110b 	mla	r1, sl, fp, r1
 8004438:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800443c:	f8d9 2000 	ldr.w	r2, [r9]
 8004440:	4461      	add	r1, ip
 8004442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004446:	fb0a c20b 	mla	r2, sl, fp, ip
 800444a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800444e:	b289      	uxth	r1, r1
 8004450:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004454:	4577      	cmp	r7, lr
 8004456:	f849 1b04 	str.w	r1, [r9], #4
 800445a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800445e:	d8e2      	bhi.n	8004426 <__multiply+0xb2>
 8004460:	9a01      	ldr	r2, [sp, #4]
 8004462:	f845 c002 	str.w	ip, [r5, r2]
 8004466:	9a03      	ldr	r2, [sp, #12]
 8004468:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800446c:	3304      	adds	r3, #4
 800446e:	f1b9 0f00 	cmp.w	r9, #0
 8004472:	d020      	beq.n	80044b6 <__multiply+0x142>
 8004474:	6829      	ldr	r1, [r5, #0]
 8004476:	f104 0c14 	add.w	ip, r4, #20
 800447a:	46ae      	mov	lr, r5
 800447c:	f04f 0a00 	mov.w	sl, #0
 8004480:	f8bc b000 	ldrh.w	fp, [ip]
 8004484:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004488:	fb09 220b 	mla	r2, r9, fp, r2
 800448c:	4492      	add	sl, r2
 800448e:	b289      	uxth	r1, r1
 8004490:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004494:	f84e 1b04 	str.w	r1, [lr], #4
 8004498:	f85c 2b04 	ldr.w	r2, [ip], #4
 800449c:	f8be 1000 	ldrh.w	r1, [lr]
 80044a0:	0c12      	lsrs	r2, r2, #16
 80044a2:	fb09 1102 	mla	r1, r9, r2, r1
 80044a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80044aa:	4567      	cmp	r7, ip
 80044ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80044b0:	d8e6      	bhi.n	8004480 <__multiply+0x10c>
 80044b2:	9a01      	ldr	r2, [sp, #4]
 80044b4:	50a9      	str	r1, [r5, r2]
 80044b6:	3504      	adds	r5, #4
 80044b8:	e79a      	b.n	80043f0 <__multiply+0x7c>
 80044ba:	3e01      	subs	r6, #1
 80044bc:	e79c      	b.n	80043f8 <__multiply+0x84>
 80044be:	bf00      	nop
 80044c0:	0800548b 	.word	0x0800548b
 80044c4:	0800549c 	.word	0x0800549c

080044c8 <__pow5mult>:
 80044c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044cc:	4615      	mov	r5, r2
 80044ce:	f012 0203 	ands.w	r2, r2, #3
 80044d2:	4606      	mov	r6, r0
 80044d4:	460f      	mov	r7, r1
 80044d6:	d007      	beq.n	80044e8 <__pow5mult+0x20>
 80044d8:	4c25      	ldr	r4, [pc, #148]	; (8004570 <__pow5mult+0xa8>)
 80044da:	3a01      	subs	r2, #1
 80044dc:	2300      	movs	r3, #0
 80044de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80044e2:	f7ff fe9b 	bl	800421c <__multadd>
 80044e6:	4607      	mov	r7, r0
 80044e8:	10ad      	asrs	r5, r5, #2
 80044ea:	d03d      	beq.n	8004568 <__pow5mult+0xa0>
 80044ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80044ee:	b97c      	cbnz	r4, 8004510 <__pow5mult+0x48>
 80044f0:	2010      	movs	r0, #16
 80044f2:	f7ff fe0f 	bl	8004114 <malloc>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6270      	str	r0, [r6, #36]	; 0x24
 80044fa:	b928      	cbnz	r0, 8004508 <__pow5mult+0x40>
 80044fc:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <__pow5mult+0xac>)
 80044fe:	481e      	ldr	r0, [pc, #120]	; (8004578 <__pow5mult+0xb0>)
 8004500:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004504:	f000 fb7c 	bl	8004c00 <__assert_func>
 8004508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800450c:	6004      	str	r4, [r0, #0]
 800450e:	60c4      	str	r4, [r0, #12]
 8004510:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004518:	b94c      	cbnz	r4, 800452e <__pow5mult+0x66>
 800451a:	f240 2171 	movw	r1, #625	; 0x271
 800451e:	4630      	mov	r0, r6
 8004520:	f7ff ff12 	bl	8004348 <__i2b>
 8004524:	2300      	movs	r3, #0
 8004526:	f8c8 0008 	str.w	r0, [r8, #8]
 800452a:	4604      	mov	r4, r0
 800452c:	6003      	str	r3, [r0, #0]
 800452e:	f04f 0900 	mov.w	r9, #0
 8004532:	07eb      	lsls	r3, r5, #31
 8004534:	d50a      	bpl.n	800454c <__pow5mult+0x84>
 8004536:	4639      	mov	r1, r7
 8004538:	4622      	mov	r2, r4
 800453a:	4630      	mov	r0, r6
 800453c:	f7ff ff1a 	bl	8004374 <__multiply>
 8004540:	4639      	mov	r1, r7
 8004542:	4680      	mov	r8, r0
 8004544:	4630      	mov	r0, r6
 8004546:	f7ff fe47 	bl	80041d8 <_Bfree>
 800454a:	4647      	mov	r7, r8
 800454c:	106d      	asrs	r5, r5, #1
 800454e:	d00b      	beq.n	8004568 <__pow5mult+0xa0>
 8004550:	6820      	ldr	r0, [r4, #0]
 8004552:	b938      	cbnz	r0, 8004564 <__pow5mult+0x9c>
 8004554:	4622      	mov	r2, r4
 8004556:	4621      	mov	r1, r4
 8004558:	4630      	mov	r0, r6
 800455a:	f7ff ff0b 	bl	8004374 <__multiply>
 800455e:	6020      	str	r0, [r4, #0]
 8004560:	f8c0 9000 	str.w	r9, [r0]
 8004564:	4604      	mov	r4, r0
 8004566:	e7e4      	b.n	8004532 <__pow5mult+0x6a>
 8004568:	4638      	mov	r0, r7
 800456a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456e:	bf00      	nop
 8004570:	080055e8 	.word	0x080055e8
 8004574:	08005419 	.word	0x08005419
 8004578:	0800549c 	.word	0x0800549c

0800457c <__lshift>:
 800457c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004580:	460c      	mov	r4, r1
 8004582:	6849      	ldr	r1, [r1, #4]
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800458a:	68a3      	ldr	r3, [r4, #8]
 800458c:	4607      	mov	r7, r0
 800458e:	4691      	mov	r9, r2
 8004590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004594:	f108 0601 	add.w	r6, r8, #1
 8004598:	42b3      	cmp	r3, r6
 800459a:	db0b      	blt.n	80045b4 <__lshift+0x38>
 800459c:	4638      	mov	r0, r7
 800459e:	f7ff fddb 	bl	8004158 <_Balloc>
 80045a2:	4605      	mov	r5, r0
 80045a4:	b948      	cbnz	r0, 80045ba <__lshift+0x3e>
 80045a6:	4602      	mov	r2, r0
 80045a8:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <__lshift+0xd8>)
 80045aa:	482b      	ldr	r0, [pc, #172]	; (8004658 <__lshift+0xdc>)
 80045ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80045b0:	f000 fb26 	bl	8004c00 <__assert_func>
 80045b4:	3101      	adds	r1, #1
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	e7ee      	b.n	8004598 <__lshift+0x1c>
 80045ba:	2300      	movs	r3, #0
 80045bc:	f100 0114 	add.w	r1, r0, #20
 80045c0:	f100 0210 	add.w	r2, r0, #16
 80045c4:	4618      	mov	r0, r3
 80045c6:	4553      	cmp	r3, sl
 80045c8:	db37      	blt.n	800463a <__lshift+0xbe>
 80045ca:	6920      	ldr	r0, [r4, #16]
 80045cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80045d0:	f104 0314 	add.w	r3, r4, #20
 80045d4:	f019 091f 	ands.w	r9, r9, #31
 80045d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80045dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80045e0:	d02f      	beq.n	8004642 <__lshift+0xc6>
 80045e2:	f1c9 0e20 	rsb	lr, r9, #32
 80045e6:	468a      	mov	sl, r1
 80045e8:	f04f 0c00 	mov.w	ip, #0
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	fa02 f209 	lsl.w	r2, r2, r9
 80045f2:	ea42 020c 	orr.w	r2, r2, ip
 80045f6:	f84a 2b04 	str.w	r2, [sl], #4
 80045fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80045fe:	4298      	cmp	r0, r3
 8004600:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004604:	d8f2      	bhi.n	80045ec <__lshift+0x70>
 8004606:	1b03      	subs	r3, r0, r4
 8004608:	3b15      	subs	r3, #21
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	3304      	adds	r3, #4
 8004610:	f104 0215 	add.w	r2, r4, #21
 8004614:	4290      	cmp	r0, r2
 8004616:	bf38      	it	cc
 8004618:	2304      	movcc	r3, #4
 800461a:	f841 c003 	str.w	ip, [r1, r3]
 800461e:	f1bc 0f00 	cmp.w	ip, #0
 8004622:	d001      	beq.n	8004628 <__lshift+0xac>
 8004624:	f108 0602 	add.w	r6, r8, #2
 8004628:	3e01      	subs	r6, #1
 800462a:	4638      	mov	r0, r7
 800462c:	612e      	str	r6, [r5, #16]
 800462e:	4621      	mov	r1, r4
 8004630:	f7ff fdd2 	bl	80041d8 <_Bfree>
 8004634:	4628      	mov	r0, r5
 8004636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463a:	f842 0f04 	str.w	r0, [r2, #4]!
 800463e:	3301      	adds	r3, #1
 8004640:	e7c1      	b.n	80045c6 <__lshift+0x4a>
 8004642:	3904      	subs	r1, #4
 8004644:	f853 2b04 	ldr.w	r2, [r3], #4
 8004648:	f841 2f04 	str.w	r2, [r1, #4]!
 800464c:	4298      	cmp	r0, r3
 800464e:	d8f9      	bhi.n	8004644 <__lshift+0xc8>
 8004650:	e7ea      	b.n	8004628 <__lshift+0xac>
 8004652:	bf00      	nop
 8004654:	0800548b 	.word	0x0800548b
 8004658:	0800549c 	.word	0x0800549c

0800465c <__mcmp>:
 800465c:	b530      	push	{r4, r5, lr}
 800465e:	6902      	ldr	r2, [r0, #16]
 8004660:	690c      	ldr	r4, [r1, #16]
 8004662:	1b12      	subs	r2, r2, r4
 8004664:	d10e      	bne.n	8004684 <__mcmp+0x28>
 8004666:	f100 0314 	add.w	r3, r0, #20
 800466a:	3114      	adds	r1, #20
 800466c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004670:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004674:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004678:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800467c:	42a5      	cmp	r5, r4
 800467e:	d003      	beq.n	8004688 <__mcmp+0x2c>
 8004680:	d305      	bcc.n	800468e <__mcmp+0x32>
 8004682:	2201      	movs	r2, #1
 8004684:	4610      	mov	r0, r2
 8004686:	bd30      	pop	{r4, r5, pc}
 8004688:	4283      	cmp	r3, r0
 800468a:	d3f3      	bcc.n	8004674 <__mcmp+0x18>
 800468c:	e7fa      	b.n	8004684 <__mcmp+0x28>
 800468e:	f04f 32ff 	mov.w	r2, #4294967295
 8004692:	e7f7      	b.n	8004684 <__mcmp+0x28>

08004694 <__mdiff>:
 8004694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	460c      	mov	r4, r1
 800469a:	4606      	mov	r6, r0
 800469c:	4611      	mov	r1, r2
 800469e:	4620      	mov	r0, r4
 80046a0:	4690      	mov	r8, r2
 80046a2:	f7ff ffdb 	bl	800465c <__mcmp>
 80046a6:	1e05      	subs	r5, r0, #0
 80046a8:	d110      	bne.n	80046cc <__mdiff+0x38>
 80046aa:	4629      	mov	r1, r5
 80046ac:	4630      	mov	r0, r6
 80046ae:	f7ff fd53 	bl	8004158 <_Balloc>
 80046b2:	b930      	cbnz	r0, 80046c2 <__mdiff+0x2e>
 80046b4:	4b3a      	ldr	r3, [pc, #232]	; (80047a0 <__mdiff+0x10c>)
 80046b6:	4602      	mov	r2, r0
 80046b8:	f240 2132 	movw	r1, #562	; 0x232
 80046bc:	4839      	ldr	r0, [pc, #228]	; (80047a4 <__mdiff+0x110>)
 80046be:	f000 fa9f 	bl	8004c00 <__assert_func>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80046c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046cc:	bfa4      	itt	ge
 80046ce:	4643      	movge	r3, r8
 80046d0:	46a0      	movge	r8, r4
 80046d2:	4630      	mov	r0, r6
 80046d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80046d8:	bfa6      	itte	ge
 80046da:	461c      	movge	r4, r3
 80046dc:	2500      	movge	r5, #0
 80046de:	2501      	movlt	r5, #1
 80046e0:	f7ff fd3a 	bl	8004158 <_Balloc>
 80046e4:	b920      	cbnz	r0, 80046f0 <__mdiff+0x5c>
 80046e6:	4b2e      	ldr	r3, [pc, #184]	; (80047a0 <__mdiff+0x10c>)
 80046e8:	4602      	mov	r2, r0
 80046ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80046ee:	e7e5      	b.n	80046bc <__mdiff+0x28>
 80046f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80046f4:	6926      	ldr	r6, [r4, #16]
 80046f6:	60c5      	str	r5, [r0, #12]
 80046f8:	f104 0914 	add.w	r9, r4, #20
 80046fc:	f108 0514 	add.w	r5, r8, #20
 8004700:	f100 0e14 	add.w	lr, r0, #20
 8004704:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004708:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800470c:	f108 0210 	add.w	r2, r8, #16
 8004710:	46f2      	mov	sl, lr
 8004712:	2100      	movs	r1, #0
 8004714:	f859 3b04 	ldr.w	r3, [r9], #4
 8004718:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800471c:	fa1f f883 	uxth.w	r8, r3
 8004720:	fa11 f18b 	uxtah	r1, r1, fp
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	eba1 0808 	sub.w	r8, r1, r8
 800472a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800472e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004732:	fa1f f888 	uxth.w	r8, r8
 8004736:	1419      	asrs	r1, r3, #16
 8004738:	454e      	cmp	r6, r9
 800473a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800473e:	f84a 3b04 	str.w	r3, [sl], #4
 8004742:	d8e7      	bhi.n	8004714 <__mdiff+0x80>
 8004744:	1b33      	subs	r3, r6, r4
 8004746:	3b15      	subs	r3, #21
 8004748:	f023 0303 	bic.w	r3, r3, #3
 800474c:	3304      	adds	r3, #4
 800474e:	3415      	adds	r4, #21
 8004750:	42a6      	cmp	r6, r4
 8004752:	bf38      	it	cc
 8004754:	2304      	movcc	r3, #4
 8004756:	441d      	add	r5, r3
 8004758:	4473      	add	r3, lr
 800475a:	469e      	mov	lr, r3
 800475c:	462e      	mov	r6, r5
 800475e:	4566      	cmp	r6, ip
 8004760:	d30e      	bcc.n	8004780 <__mdiff+0xec>
 8004762:	f10c 0203 	add.w	r2, ip, #3
 8004766:	1b52      	subs	r2, r2, r5
 8004768:	f022 0203 	bic.w	r2, r2, #3
 800476c:	3d03      	subs	r5, #3
 800476e:	45ac      	cmp	ip, r5
 8004770:	bf38      	it	cc
 8004772:	2200      	movcc	r2, #0
 8004774:	441a      	add	r2, r3
 8004776:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800477a:	b17b      	cbz	r3, 800479c <__mdiff+0x108>
 800477c:	6107      	str	r7, [r0, #16]
 800477e:	e7a3      	b.n	80046c8 <__mdiff+0x34>
 8004780:	f856 8b04 	ldr.w	r8, [r6], #4
 8004784:	fa11 f288 	uxtah	r2, r1, r8
 8004788:	1414      	asrs	r4, r2, #16
 800478a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800478e:	b292      	uxth	r2, r2
 8004790:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004794:	f84e 2b04 	str.w	r2, [lr], #4
 8004798:	1421      	asrs	r1, r4, #16
 800479a:	e7e0      	b.n	800475e <__mdiff+0xca>
 800479c:	3f01      	subs	r7, #1
 800479e:	e7ea      	b.n	8004776 <__mdiff+0xe2>
 80047a0:	0800548b 	.word	0x0800548b
 80047a4:	0800549c 	.word	0x0800549c

080047a8 <__d2b>:
 80047a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80047ac:	4689      	mov	r9, r1
 80047ae:	2101      	movs	r1, #1
 80047b0:	ec57 6b10 	vmov	r6, r7, d0
 80047b4:	4690      	mov	r8, r2
 80047b6:	f7ff fccf 	bl	8004158 <_Balloc>
 80047ba:	4604      	mov	r4, r0
 80047bc:	b930      	cbnz	r0, 80047cc <__d2b+0x24>
 80047be:	4602      	mov	r2, r0
 80047c0:	4b25      	ldr	r3, [pc, #148]	; (8004858 <__d2b+0xb0>)
 80047c2:	4826      	ldr	r0, [pc, #152]	; (800485c <__d2b+0xb4>)
 80047c4:	f240 310a 	movw	r1, #778	; 0x30a
 80047c8:	f000 fa1a 	bl	8004c00 <__assert_func>
 80047cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80047d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80047d4:	bb35      	cbnz	r5, 8004824 <__d2b+0x7c>
 80047d6:	2e00      	cmp	r6, #0
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	d028      	beq.n	800482e <__d2b+0x86>
 80047dc:	4668      	mov	r0, sp
 80047de:	9600      	str	r6, [sp, #0]
 80047e0:	f7ff fd82 	bl	80042e8 <__lo0bits>
 80047e4:	9900      	ldr	r1, [sp, #0]
 80047e6:	b300      	cbz	r0, 800482a <__d2b+0x82>
 80047e8:	9a01      	ldr	r2, [sp, #4]
 80047ea:	f1c0 0320 	rsb	r3, r0, #32
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	430b      	orrs	r3, r1
 80047f4:	40c2      	lsrs	r2, r0
 80047f6:	6163      	str	r3, [r4, #20]
 80047f8:	9201      	str	r2, [sp, #4]
 80047fa:	9b01      	ldr	r3, [sp, #4]
 80047fc:	61a3      	str	r3, [r4, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bf14      	ite	ne
 8004802:	2202      	movne	r2, #2
 8004804:	2201      	moveq	r2, #1
 8004806:	6122      	str	r2, [r4, #16]
 8004808:	b1d5      	cbz	r5, 8004840 <__d2b+0x98>
 800480a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800480e:	4405      	add	r5, r0
 8004810:	f8c9 5000 	str.w	r5, [r9]
 8004814:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004818:	f8c8 0000 	str.w	r0, [r8]
 800481c:	4620      	mov	r0, r4
 800481e:	b003      	add	sp, #12
 8004820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004828:	e7d5      	b.n	80047d6 <__d2b+0x2e>
 800482a:	6161      	str	r1, [r4, #20]
 800482c:	e7e5      	b.n	80047fa <__d2b+0x52>
 800482e:	a801      	add	r0, sp, #4
 8004830:	f7ff fd5a 	bl	80042e8 <__lo0bits>
 8004834:	9b01      	ldr	r3, [sp, #4]
 8004836:	6163      	str	r3, [r4, #20]
 8004838:	2201      	movs	r2, #1
 800483a:	6122      	str	r2, [r4, #16]
 800483c:	3020      	adds	r0, #32
 800483e:	e7e3      	b.n	8004808 <__d2b+0x60>
 8004840:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004844:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004848:	f8c9 0000 	str.w	r0, [r9]
 800484c:	6918      	ldr	r0, [r3, #16]
 800484e:	f7ff fd2b 	bl	80042a8 <__hi0bits>
 8004852:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004856:	e7df      	b.n	8004818 <__d2b+0x70>
 8004858:	0800548b 	.word	0x0800548b
 800485c:	0800549c 	.word	0x0800549c

08004860 <_calloc_r>:
 8004860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004862:	fba1 2402 	umull	r2, r4, r1, r2
 8004866:	b94c      	cbnz	r4, 800487c <_calloc_r+0x1c>
 8004868:	4611      	mov	r1, r2
 800486a:	9201      	str	r2, [sp, #4]
 800486c:	f7fd ff8a 	bl	8002784 <_malloc_r>
 8004870:	9a01      	ldr	r2, [sp, #4]
 8004872:	4605      	mov	r5, r0
 8004874:	b930      	cbnz	r0, 8004884 <_calloc_r+0x24>
 8004876:	4628      	mov	r0, r5
 8004878:	b003      	add	sp, #12
 800487a:	bd30      	pop	{r4, r5, pc}
 800487c:	220c      	movs	r2, #12
 800487e:	6002      	str	r2, [r0, #0]
 8004880:	2500      	movs	r5, #0
 8004882:	e7f8      	b.n	8004876 <_calloc_r+0x16>
 8004884:	4621      	mov	r1, r4
 8004886:	f7fd ff54 	bl	8002732 <memset>
 800488a:	e7f4      	b.n	8004876 <_calloc_r+0x16>

0800488c <_free_r>:
 800488c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800488e:	2900      	cmp	r1, #0
 8004890:	d044      	beq.n	800491c <_free_r+0x90>
 8004892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004896:	9001      	str	r0, [sp, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f1a1 0404 	sub.w	r4, r1, #4
 800489e:	bfb8      	it	lt
 80048a0:	18e4      	addlt	r4, r4, r3
 80048a2:	f7ff fc4d 	bl	8004140 <__malloc_lock>
 80048a6:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <_free_r+0x94>)
 80048a8:	9801      	ldr	r0, [sp, #4]
 80048aa:	6813      	ldr	r3, [r2, #0]
 80048ac:	b933      	cbnz	r3, 80048bc <_free_r+0x30>
 80048ae:	6063      	str	r3, [r4, #4]
 80048b0:	6014      	str	r4, [r2, #0]
 80048b2:	b003      	add	sp, #12
 80048b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048b8:	f7ff bc48 	b.w	800414c <__malloc_unlock>
 80048bc:	42a3      	cmp	r3, r4
 80048be:	d908      	bls.n	80048d2 <_free_r+0x46>
 80048c0:	6825      	ldr	r5, [r4, #0]
 80048c2:	1961      	adds	r1, r4, r5
 80048c4:	428b      	cmp	r3, r1
 80048c6:	bf01      	itttt	eq
 80048c8:	6819      	ldreq	r1, [r3, #0]
 80048ca:	685b      	ldreq	r3, [r3, #4]
 80048cc:	1949      	addeq	r1, r1, r5
 80048ce:	6021      	streq	r1, [r4, #0]
 80048d0:	e7ed      	b.n	80048ae <_free_r+0x22>
 80048d2:	461a      	mov	r2, r3
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	b10b      	cbz	r3, 80048dc <_free_r+0x50>
 80048d8:	42a3      	cmp	r3, r4
 80048da:	d9fa      	bls.n	80048d2 <_free_r+0x46>
 80048dc:	6811      	ldr	r1, [r2, #0]
 80048de:	1855      	adds	r5, r2, r1
 80048e0:	42a5      	cmp	r5, r4
 80048e2:	d10b      	bne.n	80048fc <_free_r+0x70>
 80048e4:	6824      	ldr	r4, [r4, #0]
 80048e6:	4421      	add	r1, r4
 80048e8:	1854      	adds	r4, r2, r1
 80048ea:	42a3      	cmp	r3, r4
 80048ec:	6011      	str	r1, [r2, #0]
 80048ee:	d1e0      	bne.n	80048b2 <_free_r+0x26>
 80048f0:	681c      	ldr	r4, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	6053      	str	r3, [r2, #4]
 80048f6:	4421      	add	r1, r4
 80048f8:	6011      	str	r1, [r2, #0]
 80048fa:	e7da      	b.n	80048b2 <_free_r+0x26>
 80048fc:	d902      	bls.n	8004904 <_free_r+0x78>
 80048fe:	230c      	movs	r3, #12
 8004900:	6003      	str	r3, [r0, #0]
 8004902:	e7d6      	b.n	80048b2 <_free_r+0x26>
 8004904:	6825      	ldr	r5, [r4, #0]
 8004906:	1961      	adds	r1, r4, r5
 8004908:	428b      	cmp	r3, r1
 800490a:	bf04      	itt	eq
 800490c:	6819      	ldreq	r1, [r3, #0]
 800490e:	685b      	ldreq	r3, [r3, #4]
 8004910:	6063      	str	r3, [r4, #4]
 8004912:	bf04      	itt	eq
 8004914:	1949      	addeq	r1, r1, r5
 8004916:	6021      	streq	r1, [r4, #0]
 8004918:	6054      	str	r4, [r2, #4]
 800491a:	e7ca      	b.n	80048b2 <_free_r+0x26>
 800491c:	b003      	add	sp, #12
 800491e:	bd30      	pop	{r4, r5, pc}
 8004920:	20000358 	.word	0x20000358

08004924 <__ssputs_r>:
 8004924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004928:	688e      	ldr	r6, [r1, #8]
 800492a:	429e      	cmp	r6, r3
 800492c:	4682      	mov	sl, r0
 800492e:	460c      	mov	r4, r1
 8004930:	4690      	mov	r8, r2
 8004932:	461f      	mov	r7, r3
 8004934:	d838      	bhi.n	80049a8 <__ssputs_r+0x84>
 8004936:	898a      	ldrh	r2, [r1, #12]
 8004938:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800493c:	d032      	beq.n	80049a4 <__ssputs_r+0x80>
 800493e:	6825      	ldr	r5, [r4, #0]
 8004940:	6909      	ldr	r1, [r1, #16]
 8004942:	eba5 0901 	sub.w	r9, r5, r1
 8004946:	6965      	ldr	r5, [r4, #20]
 8004948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800494c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004950:	3301      	adds	r3, #1
 8004952:	444b      	add	r3, r9
 8004954:	106d      	asrs	r5, r5, #1
 8004956:	429d      	cmp	r5, r3
 8004958:	bf38      	it	cc
 800495a:	461d      	movcc	r5, r3
 800495c:	0553      	lsls	r3, r2, #21
 800495e:	d531      	bpl.n	80049c4 <__ssputs_r+0xa0>
 8004960:	4629      	mov	r1, r5
 8004962:	f7fd ff0f 	bl	8002784 <_malloc_r>
 8004966:	4606      	mov	r6, r0
 8004968:	b950      	cbnz	r0, 8004980 <__ssputs_r+0x5c>
 800496a:	230c      	movs	r3, #12
 800496c:	f8ca 3000 	str.w	r3, [sl]
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004980:	6921      	ldr	r1, [r4, #16]
 8004982:	464a      	mov	r2, r9
 8004984:	f7ff fbce 	bl	8004124 <memcpy>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800498e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	6126      	str	r6, [r4, #16]
 8004996:	6165      	str	r5, [r4, #20]
 8004998:	444e      	add	r6, r9
 800499a:	eba5 0509 	sub.w	r5, r5, r9
 800499e:	6026      	str	r6, [r4, #0]
 80049a0:	60a5      	str	r5, [r4, #8]
 80049a2:	463e      	mov	r6, r7
 80049a4:	42be      	cmp	r6, r7
 80049a6:	d900      	bls.n	80049aa <__ssputs_r+0x86>
 80049a8:	463e      	mov	r6, r7
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	4632      	mov	r2, r6
 80049ae:	4641      	mov	r1, r8
 80049b0:	f000 f968 	bl	8004c84 <memmove>
 80049b4:	68a3      	ldr	r3, [r4, #8]
 80049b6:	1b9b      	subs	r3, r3, r6
 80049b8:	60a3      	str	r3, [r4, #8]
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	4433      	add	r3, r6
 80049be:	6023      	str	r3, [r4, #0]
 80049c0:	2000      	movs	r0, #0
 80049c2:	e7db      	b.n	800497c <__ssputs_r+0x58>
 80049c4:	462a      	mov	r2, r5
 80049c6:	f000 f977 	bl	8004cb8 <_realloc_r>
 80049ca:	4606      	mov	r6, r0
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d1e1      	bne.n	8004994 <__ssputs_r+0x70>
 80049d0:	6921      	ldr	r1, [r4, #16]
 80049d2:	4650      	mov	r0, sl
 80049d4:	f7ff ff5a 	bl	800488c <_free_r>
 80049d8:	e7c7      	b.n	800496a <__ssputs_r+0x46>
	...

080049dc <_svfiprintf_r>:
 80049dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e0:	4698      	mov	r8, r3
 80049e2:	898b      	ldrh	r3, [r1, #12]
 80049e4:	061b      	lsls	r3, r3, #24
 80049e6:	b09d      	sub	sp, #116	; 0x74
 80049e8:	4607      	mov	r7, r0
 80049ea:	460d      	mov	r5, r1
 80049ec:	4614      	mov	r4, r2
 80049ee:	d50e      	bpl.n	8004a0e <_svfiprintf_r+0x32>
 80049f0:	690b      	ldr	r3, [r1, #16]
 80049f2:	b963      	cbnz	r3, 8004a0e <_svfiprintf_r+0x32>
 80049f4:	2140      	movs	r1, #64	; 0x40
 80049f6:	f7fd fec5 	bl	8002784 <_malloc_r>
 80049fa:	6028      	str	r0, [r5, #0]
 80049fc:	6128      	str	r0, [r5, #16]
 80049fe:	b920      	cbnz	r0, 8004a0a <_svfiprintf_r+0x2e>
 8004a00:	230c      	movs	r3, #12
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	e0d1      	b.n	8004bae <_svfiprintf_r+0x1d2>
 8004a0a:	2340      	movs	r3, #64	; 0x40
 8004a0c:	616b      	str	r3, [r5, #20]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	9309      	str	r3, [sp, #36]	; 0x24
 8004a12:	2320      	movs	r3, #32
 8004a14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a1c:	2330      	movs	r3, #48	; 0x30
 8004a1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004bc8 <_svfiprintf_r+0x1ec>
 8004a22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a26:	f04f 0901 	mov.w	r9, #1
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	469a      	mov	sl, r3
 8004a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a32:	b10a      	cbz	r2, 8004a38 <_svfiprintf_r+0x5c>
 8004a34:	2a25      	cmp	r2, #37	; 0x25
 8004a36:	d1f9      	bne.n	8004a2c <_svfiprintf_r+0x50>
 8004a38:	ebba 0b04 	subs.w	fp, sl, r4
 8004a3c:	d00b      	beq.n	8004a56 <_svfiprintf_r+0x7a>
 8004a3e:	465b      	mov	r3, fp
 8004a40:	4622      	mov	r2, r4
 8004a42:	4629      	mov	r1, r5
 8004a44:	4638      	mov	r0, r7
 8004a46:	f7ff ff6d 	bl	8004924 <__ssputs_r>
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	f000 80aa 	beq.w	8004ba4 <_svfiprintf_r+0x1c8>
 8004a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a52:	445a      	add	r2, fp
 8004a54:	9209      	str	r2, [sp, #36]	; 0x24
 8004a56:	f89a 3000 	ldrb.w	r3, [sl]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80a2 	beq.w	8004ba4 <_svfiprintf_r+0x1c8>
 8004a60:	2300      	movs	r3, #0
 8004a62:	f04f 32ff 	mov.w	r2, #4294967295
 8004a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a6a:	f10a 0a01 	add.w	sl, sl, #1
 8004a6e:	9304      	str	r3, [sp, #16]
 8004a70:	9307      	str	r3, [sp, #28]
 8004a72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a76:	931a      	str	r3, [sp, #104]	; 0x68
 8004a78:	4654      	mov	r4, sl
 8004a7a:	2205      	movs	r2, #5
 8004a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a80:	4851      	ldr	r0, [pc, #324]	; (8004bc8 <_svfiprintf_r+0x1ec>)
 8004a82:	f7fb fbcd 	bl	8000220 <memchr>
 8004a86:	9a04      	ldr	r2, [sp, #16]
 8004a88:	b9d8      	cbnz	r0, 8004ac2 <_svfiprintf_r+0xe6>
 8004a8a:	06d0      	lsls	r0, r2, #27
 8004a8c:	bf44      	itt	mi
 8004a8e:	2320      	movmi	r3, #32
 8004a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a94:	0711      	lsls	r1, r2, #28
 8004a96:	bf44      	itt	mi
 8004a98:	232b      	movmi	r3, #43	; 0x2b
 8004a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa4:	d015      	beq.n	8004ad2 <_svfiprintf_r+0xf6>
 8004aa6:	9a07      	ldr	r2, [sp, #28]
 8004aa8:	4654      	mov	r4, sl
 8004aaa:	2000      	movs	r0, #0
 8004aac:	f04f 0c0a 	mov.w	ip, #10
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ab6:	3b30      	subs	r3, #48	; 0x30
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d94e      	bls.n	8004b5a <_svfiprintf_r+0x17e>
 8004abc:	b1b0      	cbz	r0, 8004aec <_svfiprintf_r+0x110>
 8004abe:	9207      	str	r2, [sp, #28]
 8004ac0:	e014      	b.n	8004aec <_svfiprintf_r+0x110>
 8004ac2:	eba0 0308 	sub.w	r3, r0, r8
 8004ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8004aca:	4313      	orrs	r3, r2
 8004acc:	9304      	str	r3, [sp, #16]
 8004ace:	46a2      	mov	sl, r4
 8004ad0:	e7d2      	b.n	8004a78 <_svfiprintf_r+0x9c>
 8004ad2:	9b03      	ldr	r3, [sp, #12]
 8004ad4:	1d19      	adds	r1, r3, #4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	9103      	str	r1, [sp, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bfbb      	ittet	lt
 8004ade:	425b      	neglt	r3, r3
 8004ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ae4:	9307      	strge	r3, [sp, #28]
 8004ae6:	9307      	strlt	r3, [sp, #28]
 8004ae8:	bfb8      	it	lt
 8004aea:	9204      	strlt	r2, [sp, #16]
 8004aec:	7823      	ldrb	r3, [r4, #0]
 8004aee:	2b2e      	cmp	r3, #46	; 0x2e
 8004af0:	d10c      	bne.n	8004b0c <_svfiprintf_r+0x130>
 8004af2:	7863      	ldrb	r3, [r4, #1]
 8004af4:	2b2a      	cmp	r3, #42	; 0x2a
 8004af6:	d135      	bne.n	8004b64 <_svfiprintf_r+0x188>
 8004af8:	9b03      	ldr	r3, [sp, #12]
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	9203      	str	r2, [sp, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bfb8      	it	lt
 8004b04:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b08:	3402      	adds	r4, #2
 8004b0a:	9305      	str	r3, [sp, #20]
 8004b0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bd8 <_svfiprintf_r+0x1fc>
 8004b10:	7821      	ldrb	r1, [r4, #0]
 8004b12:	2203      	movs	r2, #3
 8004b14:	4650      	mov	r0, sl
 8004b16:	f7fb fb83 	bl	8000220 <memchr>
 8004b1a:	b140      	cbz	r0, 8004b2e <_svfiprintf_r+0x152>
 8004b1c:	2340      	movs	r3, #64	; 0x40
 8004b1e:	eba0 000a 	sub.w	r0, r0, sl
 8004b22:	fa03 f000 	lsl.w	r0, r3, r0
 8004b26:	9b04      	ldr	r3, [sp, #16]
 8004b28:	4303      	orrs	r3, r0
 8004b2a:	3401      	adds	r4, #1
 8004b2c:	9304      	str	r3, [sp, #16]
 8004b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b32:	4826      	ldr	r0, [pc, #152]	; (8004bcc <_svfiprintf_r+0x1f0>)
 8004b34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b38:	2206      	movs	r2, #6
 8004b3a:	f7fb fb71 	bl	8000220 <memchr>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d038      	beq.n	8004bb4 <_svfiprintf_r+0x1d8>
 8004b42:	4b23      	ldr	r3, [pc, #140]	; (8004bd0 <_svfiprintf_r+0x1f4>)
 8004b44:	bb1b      	cbnz	r3, 8004b8e <_svfiprintf_r+0x1b2>
 8004b46:	9b03      	ldr	r3, [sp, #12]
 8004b48:	3307      	adds	r3, #7
 8004b4a:	f023 0307 	bic.w	r3, r3, #7
 8004b4e:	3308      	adds	r3, #8
 8004b50:	9303      	str	r3, [sp, #12]
 8004b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b54:	4433      	add	r3, r6
 8004b56:	9309      	str	r3, [sp, #36]	; 0x24
 8004b58:	e767      	b.n	8004a2a <_svfiprintf_r+0x4e>
 8004b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b5e:	460c      	mov	r4, r1
 8004b60:	2001      	movs	r0, #1
 8004b62:	e7a5      	b.n	8004ab0 <_svfiprintf_r+0xd4>
 8004b64:	2300      	movs	r3, #0
 8004b66:	3401      	adds	r4, #1
 8004b68:	9305      	str	r3, [sp, #20]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f04f 0c0a 	mov.w	ip, #10
 8004b70:	4620      	mov	r0, r4
 8004b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b76:	3a30      	subs	r2, #48	; 0x30
 8004b78:	2a09      	cmp	r2, #9
 8004b7a:	d903      	bls.n	8004b84 <_svfiprintf_r+0x1a8>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0c5      	beq.n	8004b0c <_svfiprintf_r+0x130>
 8004b80:	9105      	str	r1, [sp, #20]
 8004b82:	e7c3      	b.n	8004b0c <_svfiprintf_r+0x130>
 8004b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b88:	4604      	mov	r4, r0
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e7f0      	b.n	8004b70 <_svfiprintf_r+0x194>
 8004b8e:	ab03      	add	r3, sp, #12
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	462a      	mov	r2, r5
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <_svfiprintf_r+0x1f8>)
 8004b96:	a904      	add	r1, sp, #16
 8004b98:	4638      	mov	r0, r7
 8004b9a:	f7fd ff07 	bl	80029ac <_printf_float>
 8004b9e:	1c42      	adds	r2, r0, #1
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	d1d6      	bne.n	8004b52 <_svfiprintf_r+0x176>
 8004ba4:	89ab      	ldrh	r3, [r5, #12]
 8004ba6:	065b      	lsls	r3, r3, #25
 8004ba8:	f53f af2c 	bmi.w	8004a04 <_svfiprintf_r+0x28>
 8004bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bae:	b01d      	add	sp, #116	; 0x74
 8004bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb4:	ab03      	add	r3, sp, #12
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	462a      	mov	r2, r5
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <_svfiprintf_r+0x1f8>)
 8004bbc:	a904      	add	r1, sp, #16
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f7fe f998 	bl	8002ef4 <_printf_i>
 8004bc4:	e7eb      	b.n	8004b9e <_svfiprintf_r+0x1c2>
 8004bc6:	bf00      	nop
 8004bc8:	080055f4 	.word	0x080055f4
 8004bcc:	080055fe 	.word	0x080055fe
 8004bd0:	080029ad 	.word	0x080029ad
 8004bd4:	08004925 	.word	0x08004925
 8004bd8:	080055fa 	.word	0x080055fa

08004bdc <_read_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	4d07      	ldr	r5, [pc, #28]	; (8004bfc <_read_r+0x20>)
 8004be0:	4604      	mov	r4, r0
 8004be2:	4608      	mov	r0, r1
 8004be4:	4611      	mov	r1, r2
 8004be6:	2200      	movs	r2, #0
 8004be8:	602a      	str	r2, [r5, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f7fd fb4b 	bl	8002286 <_read>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d102      	bne.n	8004bfa <_read_r+0x1e>
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	b103      	cbz	r3, 8004bfa <_read_r+0x1e>
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	20000360 	.word	0x20000360

08004c00 <__assert_func>:
 8004c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c02:	4614      	mov	r4, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <__assert_func+0x2c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	68d8      	ldr	r0, [r3, #12]
 8004c0e:	b14c      	cbz	r4, 8004c24 <__assert_func+0x24>
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <__assert_func+0x30>)
 8004c12:	9100      	str	r1, [sp, #0]
 8004c14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c18:	4906      	ldr	r1, [pc, #24]	; (8004c34 <__assert_func+0x34>)
 8004c1a:	462b      	mov	r3, r5
 8004c1c:	f000 f80e 	bl	8004c3c <fiprintf>
 8004c20:	f000 faa0 	bl	8005164 <abort>
 8004c24:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <__assert_func+0x38>)
 8004c26:	461c      	mov	r4, r3
 8004c28:	e7f3      	b.n	8004c12 <__assert_func+0x12>
 8004c2a:	bf00      	nop
 8004c2c:	20000010 	.word	0x20000010
 8004c30:	08005605 	.word	0x08005605
 8004c34:	08005612 	.word	0x08005612
 8004c38:	08005640 	.word	0x08005640

08004c3c <fiprintf>:
 8004c3c:	b40e      	push	{r1, r2, r3}
 8004c3e:	b503      	push	{r0, r1, lr}
 8004c40:	4601      	mov	r1, r0
 8004c42:	ab03      	add	r3, sp, #12
 8004c44:	4805      	ldr	r0, [pc, #20]	; (8004c5c <fiprintf+0x20>)
 8004c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	f000 f88b 	bl	8004d68 <_vfiprintf_r>
 8004c52:	b002      	add	sp, #8
 8004c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c58:	b003      	add	sp, #12
 8004c5a:	4770      	bx	lr
 8004c5c:	20000010 	.word	0x20000010

08004c60 <__ascii_mbtowc>:
 8004c60:	b082      	sub	sp, #8
 8004c62:	b901      	cbnz	r1, 8004c66 <__ascii_mbtowc+0x6>
 8004c64:	a901      	add	r1, sp, #4
 8004c66:	b142      	cbz	r2, 8004c7a <__ascii_mbtowc+0x1a>
 8004c68:	b14b      	cbz	r3, 8004c7e <__ascii_mbtowc+0x1e>
 8004c6a:	7813      	ldrb	r3, [r2, #0]
 8004c6c:	600b      	str	r3, [r1, #0]
 8004c6e:	7812      	ldrb	r2, [r2, #0]
 8004c70:	1e10      	subs	r0, r2, #0
 8004c72:	bf18      	it	ne
 8004c74:	2001      	movne	r0, #1
 8004c76:	b002      	add	sp, #8
 8004c78:	4770      	bx	lr
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	e7fb      	b.n	8004c76 <__ascii_mbtowc+0x16>
 8004c7e:	f06f 0001 	mvn.w	r0, #1
 8004c82:	e7f8      	b.n	8004c76 <__ascii_mbtowc+0x16>

08004c84 <memmove>:
 8004c84:	4288      	cmp	r0, r1
 8004c86:	b510      	push	{r4, lr}
 8004c88:	eb01 0402 	add.w	r4, r1, r2
 8004c8c:	d902      	bls.n	8004c94 <memmove+0x10>
 8004c8e:	4284      	cmp	r4, r0
 8004c90:	4623      	mov	r3, r4
 8004c92:	d807      	bhi.n	8004ca4 <memmove+0x20>
 8004c94:	1e43      	subs	r3, r0, #1
 8004c96:	42a1      	cmp	r1, r4
 8004c98:	d008      	beq.n	8004cac <memmove+0x28>
 8004c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ca2:	e7f8      	b.n	8004c96 <memmove+0x12>
 8004ca4:	4402      	add	r2, r0
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	428a      	cmp	r2, r1
 8004caa:	d100      	bne.n	8004cae <memmove+0x2a>
 8004cac:	bd10      	pop	{r4, pc}
 8004cae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cb6:	e7f7      	b.n	8004ca8 <memmove+0x24>

08004cb8 <_realloc_r>:
 8004cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	4614      	mov	r4, r2
 8004cc0:	460e      	mov	r6, r1
 8004cc2:	b921      	cbnz	r1, 8004cce <_realloc_r+0x16>
 8004cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc8:	4611      	mov	r1, r2
 8004cca:	f7fd bd5b 	b.w	8002784 <_malloc_r>
 8004cce:	b92a      	cbnz	r2, 8004cdc <_realloc_r+0x24>
 8004cd0:	f7ff fddc 	bl	800488c <_free_r>
 8004cd4:	4625      	mov	r5, r4
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cdc:	f000 faae 	bl	800523c <_malloc_usable_size_r>
 8004ce0:	4284      	cmp	r4, r0
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	d802      	bhi.n	8004cec <_realloc_r+0x34>
 8004ce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cea:	d812      	bhi.n	8004d12 <_realloc_r+0x5a>
 8004cec:	4621      	mov	r1, r4
 8004cee:	4640      	mov	r0, r8
 8004cf0:	f7fd fd48 	bl	8002784 <_malloc_r>
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d0ed      	beq.n	8004cd6 <_realloc_r+0x1e>
 8004cfa:	42bc      	cmp	r4, r7
 8004cfc:	4622      	mov	r2, r4
 8004cfe:	4631      	mov	r1, r6
 8004d00:	bf28      	it	cs
 8004d02:	463a      	movcs	r2, r7
 8004d04:	f7ff fa0e 	bl	8004124 <memcpy>
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	f7ff fdbe 	bl	800488c <_free_r>
 8004d10:	e7e1      	b.n	8004cd6 <_realloc_r+0x1e>
 8004d12:	4635      	mov	r5, r6
 8004d14:	e7df      	b.n	8004cd6 <_realloc_r+0x1e>

08004d16 <__sfputc_r>:
 8004d16:	6893      	ldr	r3, [r2, #8]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	b410      	push	{r4}
 8004d1e:	6093      	str	r3, [r2, #8]
 8004d20:	da08      	bge.n	8004d34 <__sfputc_r+0x1e>
 8004d22:	6994      	ldr	r4, [r2, #24]
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	db01      	blt.n	8004d2c <__sfputc_r+0x16>
 8004d28:	290a      	cmp	r1, #10
 8004d2a:	d103      	bne.n	8004d34 <__sfputc_r+0x1e>
 8004d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d30:	f000 b94a 	b.w	8004fc8 <__swbuf_r>
 8004d34:	6813      	ldr	r3, [r2, #0]
 8004d36:	1c58      	adds	r0, r3, #1
 8004d38:	6010      	str	r0, [r2, #0]
 8004d3a:	7019      	strb	r1, [r3, #0]
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <__sfputs_r>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	4606      	mov	r6, r0
 8004d48:	460f      	mov	r7, r1
 8004d4a:	4614      	mov	r4, r2
 8004d4c:	18d5      	adds	r5, r2, r3
 8004d4e:	42ac      	cmp	r4, r5
 8004d50:	d101      	bne.n	8004d56 <__sfputs_r+0x12>
 8004d52:	2000      	movs	r0, #0
 8004d54:	e007      	b.n	8004d66 <__sfputs_r+0x22>
 8004d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d5a:	463a      	mov	r2, r7
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f7ff ffda 	bl	8004d16 <__sfputc_r>
 8004d62:	1c43      	adds	r3, r0, #1
 8004d64:	d1f3      	bne.n	8004d4e <__sfputs_r+0xa>
 8004d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d68 <_vfiprintf_r>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	460d      	mov	r5, r1
 8004d6e:	b09d      	sub	sp, #116	; 0x74
 8004d70:	4614      	mov	r4, r2
 8004d72:	4698      	mov	r8, r3
 8004d74:	4606      	mov	r6, r0
 8004d76:	b118      	cbz	r0, 8004d80 <_vfiprintf_r+0x18>
 8004d78:	6983      	ldr	r3, [r0, #24]
 8004d7a:	b90b      	cbnz	r3, 8004d80 <_vfiprintf_r+0x18>
 8004d7c:	f7fd fc14 	bl	80025a8 <__sinit>
 8004d80:	4b89      	ldr	r3, [pc, #548]	; (8004fa8 <_vfiprintf_r+0x240>)
 8004d82:	429d      	cmp	r5, r3
 8004d84:	d11b      	bne.n	8004dbe <_vfiprintf_r+0x56>
 8004d86:	6875      	ldr	r5, [r6, #4]
 8004d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d8a:	07d9      	lsls	r1, r3, #31
 8004d8c:	d405      	bmi.n	8004d9a <_vfiprintf_r+0x32>
 8004d8e:	89ab      	ldrh	r3, [r5, #12]
 8004d90:	059a      	lsls	r2, r3, #22
 8004d92:	d402      	bmi.n	8004d9a <_vfiprintf_r+0x32>
 8004d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d96:	f7fd fcca 	bl	800272e <__retarget_lock_acquire_recursive>
 8004d9a:	89ab      	ldrh	r3, [r5, #12]
 8004d9c:	071b      	lsls	r3, r3, #28
 8004d9e:	d501      	bpl.n	8004da4 <_vfiprintf_r+0x3c>
 8004da0:	692b      	ldr	r3, [r5, #16]
 8004da2:	b9eb      	cbnz	r3, 8004de0 <_vfiprintf_r+0x78>
 8004da4:	4629      	mov	r1, r5
 8004da6:	4630      	mov	r0, r6
 8004da8:	f000 f96e 	bl	8005088 <__swsetup_r>
 8004dac:	b1c0      	cbz	r0, 8004de0 <_vfiprintf_r+0x78>
 8004dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004db0:	07dc      	lsls	r4, r3, #31
 8004db2:	d50e      	bpl.n	8004dd2 <_vfiprintf_r+0x6a>
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295
 8004db8:	b01d      	add	sp, #116	; 0x74
 8004dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dbe:	4b7b      	ldr	r3, [pc, #492]	; (8004fac <_vfiprintf_r+0x244>)
 8004dc0:	429d      	cmp	r5, r3
 8004dc2:	d101      	bne.n	8004dc8 <_vfiprintf_r+0x60>
 8004dc4:	68b5      	ldr	r5, [r6, #8]
 8004dc6:	e7df      	b.n	8004d88 <_vfiprintf_r+0x20>
 8004dc8:	4b79      	ldr	r3, [pc, #484]	; (8004fb0 <_vfiprintf_r+0x248>)
 8004dca:	429d      	cmp	r5, r3
 8004dcc:	bf08      	it	eq
 8004dce:	68f5      	ldreq	r5, [r6, #12]
 8004dd0:	e7da      	b.n	8004d88 <_vfiprintf_r+0x20>
 8004dd2:	89ab      	ldrh	r3, [r5, #12]
 8004dd4:	0598      	lsls	r0, r3, #22
 8004dd6:	d4ed      	bmi.n	8004db4 <_vfiprintf_r+0x4c>
 8004dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dda:	f7fd fca9 	bl	8002730 <__retarget_lock_release_recursive>
 8004dde:	e7e9      	b.n	8004db4 <_vfiprintf_r+0x4c>
 8004de0:	2300      	movs	r3, #0
 8004de2:	9309      	str	r3, [sp, #36]	; 0x24
 8004de4:	2320      	movs	r3, #32
 8004de6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dea:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dee:	2330      	movs	r3, #48	; 0x30
 8004df0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004fb4 <_vfiprintf_r+0x24c>
 8004df4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004df8:	f04f 0901 	mov.w	r9, #1
 8004dfc:	4623      	mov	r3, r4
 8004dfe:	469a      	mov	sl, r3
 8004e00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e04:	b10a      	cbz	r2, 8004e0a <_vfiprintf_r+0xa2>
 8004e06:	2a25      	cmp	r2, #37	; 0x25
 8004e08:	d1f9      	bne.n	8004dfe <_vfiprintf_r+0x96>
 8004e0a:	ebba 0b04 	subs.w	fp, sl, r4
 8004e0e:	d00b      	beq.n	8004e28 <_vfiprintf_r+0xc0>
 8004e10:	465b      	mov	r3, fp
 8004e12:	4622      	mov	r2, r4
 8004e14:	4629      	mov	r1, r5
 8004e16:	4630      	mov	r0, r6
 8004e18:	f7ff ff94 	bl	8004d44 <__sfputs_r>
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	f000 80aa 	beq.w	8004f76 <_vfiprintf_r+0x20e>
 8004e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e24:	445a      	add	r2, fp
 8004e26:	9209      	str	r2, [sp, #36]	; 0x24
 8004e28:	f89a 3000 	ldrb.w	r3, [sl]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80a2 	beq.w	8004f76 <_vfiprintf_r+0x20e>
 8004e32:	2300      	movs	r3, #0
 8004e34:	f04f 32ff 	mov.w	r2, #4294967295
 8004e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e3c:	f10a 0a01 	add.w	sl, sl, #1
 8004e40:	9304      	str	r3, [sp, #16]
 8004e42:	9307      	str	r3, [sp, #28]
 8004e44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e48:	931a      	str	r3, [sp, #104]	; 0x68
 8004e4a:	4654      	mov	r4, sl
 8004e4c:	2205      	movs	r2, #5
 8004e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e52:	4858      	ldr	r0, [pc, #352]	; (8004fb4 <_vfiprintf_r+0x24c>)
 8004e54:	f7fb f9e4 	bl	8000220 <memchr>
 8004e58:	9a04      	ldr	r2, [sp, #16]
 8004e5a:	b9d8      	cbnz	r0, 8004e94 <_vfiprintf_r+0x12c>
 8004e5c:	06d1      	lsls	r1, r2, #27
 8004e5e:	bf44      	itt	mi
 8004e60:	2320      	movmi	r3, #32
 8004e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e66:	0713      	lsls	r3, r2, #28
 8004e68:	bf44      	itt	mi
 8004e6a:	232b      	movmi	r3, #43	; 0x2b
 8004e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e70:	f89a 3000 	ldrb.w	r3, [sl]
 8004e74:	2b2a      	cmp	r3, #42	; 0x2a
 8004e76:	d015      	beq.n	8004ea4 <_vfiprintf_r+0x13c>
 8004e78:	9a07      	ldr	r2, [sp, #28]
 8004e7a:	4654      	mov	r4, sl
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	f04f 0c0a 	mov.w	ip, #10
 8004e82:	4621      	mov	r1, r4
 8004e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e88:	3b30      	subs	r3, #48	; 0x30
 8004e8a:	2b09      	cmp	r3, #9
 8004e8c:	d94e      	bls.n	8004f2c <_vfiprintf_r+0x1c4>
 8004e8e:	b1b0      	cbz	r0, 8004ebe <_vfiprintf_r+0x156>
 8004e90:	9207      	str	r2, [sp, #28]
 8004e92:	e014      	b.n	8004ebe <_vfiprintf_r+0x156>
 8004e94:	eba0 0308 	sub.w	r3, r0, r8
 8004e98:	fa09 f303 	lsl.w	r3, r9, r3
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	46a2      	mov	sl, r4
 8004ea2:	e7d2      	b.n	8004e4a <_vfiprintf_r+0xe2>
 8004ea4:	9b03      	ldr	r3, [sp, #12]
 8004ea6:	1d19      	adds	r1, r3, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	9103      	str	r1, [sp, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bfbb      	ittet	lt
 8004eb0:	425b      	neglt	r3, r3
 8004eb2:	f042 0202 	orrlt.w	r2, r2, #2
 8004eb6:	9307      	strge	r3, [sp, #28]
 8004eb8:	9307      	strlt	r3, [sp, #28]
 8004eba:	bfb8      	it	lt
 8004ebc:	9204      	strlt	r2, [sp, #16]
 8004ebe:	7823      	ldrb	r3, [r4, #0]
 8004ec0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ec2:	d10c      	bne.n	8004ede <_vfiprintf_r+0x176>
 8004ec4:	7863      	ldrb	r3, [r4, #1]
 8004ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec8:	d135      	bne.n	8004f36 <_vfiprintf_r+0x1ce>
 8004eca:	9b03      	ldr	r3, [sp, #12]
 8004ecc:	1d1a      	adds	r2, r3, #4
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	9203      	str	r2, [sp, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bfb8      	it	lt
 8004ed6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eda:	3402      	adds	r4, #2
 8004edc:	9305      	str	r3, [sp, #20]
 8004ede:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004fc4 <_vfiprintf_r+0x25c>
 8004ee2:	7821      	ldrb	r1, [r4, #0]
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	4650      	mov	r0, sl
 8004ee8:	f7fb f99a 	bl	8000220 <memchr>
 8004eec:	b140      	cbz	r0, 8004f00 <_vfiprintf_r+0x198>
 8004eee:	2340      	movs	r3, #64	; 0x40
 8004ef0:	eba0 000a 	sub.w	r0, r0, sl
 8004ef4:	fa03 f000 	lsl.w	r0, r3, r0
 8004ef8:	9b04      	ldr	r3, [sp, #16]
 8004efa:	4303      	orrs	r3, r0
 8004efc:	3401      	adds	r4, #1
 8004efe:	9304      	str	r3, [sp, #16]
 8004f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f04:	482c      	ldr	r0, [pc, #176]	; (8004fb8 <_vfiprintf_r+0x250>)
 8004f06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f0a:	2206      	movs	r2, #6
 8004f0c:	f7fb f988 	bl	8000220 <memchr>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d03f      	beq.n	8004f94 <_vfiprintf_r+0x22c>
 8004f14:	4b29      	ldr	r3, [pc, #164]	; (8004fbc <_vfiprintf_r+0x254>)
 8004f16:	bb1b      	cbnz	r3, 8004f60 <_vfiprintf_r+0x1f8>
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	3307      	adds	r3, #7
 8004f1c:	f023 0307 	bic.w	r3, r3, #7
 8004f20:	3308      	adds	r3, #8
 8004f22:	9303      	str	r3, [sp, #12]
 8004f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f26:	443b      	add	r3, r7
 8004f28:	9309      	str	r3, [sp, #36]	; 0x24
 8004f2a:	e767      	b.n	8004dfc <_vfiprintf_r+0x94>
 8004f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f30:	460c      	mov	r4, r1
 8004f32:	2001      	movs	r0, #1
 8004f34:	e7a5      	b.n	8004e82 <_vfiprintf_r+0x11a>
 8004f36:	2300      	movs	r3, #0
 8004f38:	3401      	adds	r4, #1
 8004f3a:	9305      	str	r3, [sp, #20]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f04f 0c0a 	mov.w	ip, #10
 8004f42:	4620      	mov	r0, r4
 8004f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f48:	3a30      	subs	r2, #48	; 0x30
 8004f4a:	2a09      	cmp	r2, #9
 8004f4c:	d903      	bls.n	8004f56 <_vfiprintf_r+0x1ee>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0c5      	beq.n	8004ede <_vfiprintf_r+0x176>
 8004f52:	9105      	str	r1, [sp, #20]
 8004f54:	e7c3      	b.n	8004ede <_vfiprintf_r+0x176>
 8004f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e7f0      	b.n	8004f42 <_vfiprintf_r+0x1da>
 8004f60:	ab03      	add	r3, sp, #12
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	462a      	mov	r2, r5
 8004f66:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <_vfiprintf_r+0x258>)
 8004f68:	a904      	add	r1, sp, #16
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f7fd fd1e 	bl	80029ac <_printf_float>
 8004f70:	4607      	mov	r7, r0
 8004f72:	1c78      	adds	r0, r7, #1
 8004f74:	d1d6      	bne.n	8004f24 <_vfiprintf_r+0x1bc>
 8004f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f78:	07d9      	lsls	r1, r3, #31
 8004f7a:	d405      	bmi.n	8004f88 <_vfiprintf_r+0x220>
 8004f7c:	89ab      	ldrh	r3, [r5, #12]
 8004f7e:	059a      	lsls	r2, r3, #22
 8004f80:	d402      	bmi.n	8004f88 <_vfiprintf_r+0x220>
 8004f82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f84:	f7fd fbd4 	bl	8002730 <__retarget_lock_release_recursive>
 8004f88:	89ab      	ldrh	r3, [r5, #12]
 8004f8a:	065b      	lsls	r3, r3, #25
 8004f8c:	f53f af12 	bmi.w	8004db4 <_vfiprintf_r+0x4c>
 8004f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f92:	e711      	b.n	8004db8 <_vfiprintf_r+0x50>
 8004f94:	ab03      	add	r3, sp, #12
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	462a      	mov	r2, r5
 8004f9a:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <_vfiprintf_r+0x258>)
 8004f9c:	a904      	add	r1, sp, #16
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	f7fd ffa8 	bl	8002ef4 <_printf_i>
 8004fa4:	e7e4      	b.n	8004f70 <_vfiprintf_r+0x208>
 8004fa6:	bf00      	nop
 8004fa8:	08005394 	.word	0x08005394
 8004fac:	080053b4 	.word	0x080053b4
 8004fb0:	08005374 	.word	0x08005374
 8004fb4:	080055f4 	.word	0x080055f4
 8004fb8:	080055fe 	.word	0x080055fe
 8004fbc:	080029ad 	.word	0x080029ad
 8004fc0:	08004d45 	.word	0x08004d45
 8004fc4:	080055fa 	.word	0x080055fa

08004fc8 <__swbuf_r>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	460e      	mov	r6, r1
 8004fcc:	4614      	mov	r4, r2
 8004fce:	4605      	mov	r5, r0
 8004fd0:	b118      	cbz	r0, 8004fda <__swbuf_r+0x12>
 8004fd2:	6983      	ldr	r3, [r0, #24]
 8004fd4:	b90b      	cbnz	r3, 8004fda <__swbuf_r+0x12>
 8004fd6:	f7fd fae7 	bl	80025a8 <__sinit>
 8004fda:	4b21      	ldr	r3, [pc, #132]	; (8005060 <__swbuf_r+0x98>)
 8004fdc:	429c      	cmp	r4, r3
 8004fde:	d12b      	bne.n	8005038 <__swbuf_r+0x70>
 8004fe0:	686c      	ldr	r4, [r5, #4]
 8004fe2:	69a3      	ldr	r3, [r4, #24]
 8004fe4:	60a3      	str	r3, [r4, #8]
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	071a      	lsls	r2, r3, #28
 8004fea:	d52f      	bpl.n	800504c <__swbuf_r+0x84>
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	b36b      	cbz	r3, 800504c <__swbuf_r+0x84>
 8004ff0:	6923      	ldr	r3, [r4, #16]
 8004ff2:	6820      	ldr	r0, [r4, #0]
 8004ff4:	1ac0      	subs	r0, r0, r3
 8004ff6:	6963      	ldr	r3, [r4, #20]
 8004ff8:	b2f6      	uxtb	r6, r6
 8004ffa:	4283      	cmp	r3, r0
 8004ffc:	4637      	mov	r7, r6
 8004ffe:	dc04      	bgt.n	800500a <__swbuf_r+0x42>
 8005000:	4621      	mov	r1, r4
 8005002:	4628      	mov	r0, r5
 8005004:	f7ff f834 	bl	8004070 <_fflush_r>
 8005008:	bb30      	cbnz	r0, 8005058 <__swbuf_r+0x90>
 800500a:	68a3      	ldr	r3, [r4, #8]
 800500c:	3b01      	subs	r3, #1
 800500e:	60a3      	str	r3, [r4, #8]
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	6022      	str	r2, [r4, #0]
 8005016:	701e      	strb	r6, [r3, #0]
 8005018:	6963      	ldr	r3, [r4, #20]
 800501a:	3001      	adds	r0, #1
 800501c:	4283      	cmp	r3, r0
 800501e:	d004      	beq.n	800502a <__swbuf_r+0x62>
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	07db      	lsls	r3, r3, #31
 8005024:	d506      	bpl.n	8005034 <__swbuf_r+0x6c>
 8005026:	2e0a      	cmp	r6, #10
 8005028:	d104      	bne.n	8005034 <__swbuf_r+0x6c>
 800502a:	4621      	mov	r1, r4
 800502c:	4628      	mov	r0, r5
 800502e:	f7ff f81f 	bl	8004070 <_fflush_r>
 8005032:	b988      	cbnz	r0, 8005058 <__swbuf_r+0x90>
 8005034:	4638      	mov	r0, r7
 8005036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <__swbuf_r+0x9c>)
 800503a:	429c      	cmp	r4, r3
 800503c:	d101      	bne.n	8005042 <__swbuf_r+0x7a>
 800503e:	68ac      	ldr	r4, [r5, #8]
 8005040:	e7cf      	b.n	8004fe2 <__swbuf_r+0x1a>
 8005042:	4b09      	ldr	r3, [pc, #36]	; (8005068 <__swbuf_r+0xa0>)
 8005044:	429c      	cmp	r4, r3
 8005046:	bf08      	it	eq
 8005048:	68ec      	ldreq	r4, [r5, #12]
 800504a:	e7ca      	b.n	8004fe2 <__swbuf_r+0x1a>
 800504c:	4621      	mov	r1, r4
 800504e:	4628      	mov	r0, r5
 8005050:	f000 f81a 	bl	8005088 <__swsetup_r>
 8005054:	2800      	cmp	r0, #0
 8005056:	d0cb      	beq.n	8004ff0 <__swbuf_r+0x28>
 8005058:	f04f 37ff 	mov.w	r7, #4294967295
 800505c:	e7ea      	b.n	8005034 <__swbuf_r+0x6c>
 800505e:	bf00      	nop
 8005060:	08005394 	.word	0x08005394
 8005064:	080053b4 	.word	0x080053b4
 8005068:	08005374 	.word	0x08005374

0800506c <__ascii_wctomb>:
 800506c:	b149      	cbz	r1, 8005082 <__ascii_wctomb+0x16>
 800506e:	2aff      	cmp	r2, #255	; 0xff
 8005070:	bf85      	ittet	hi
 8005072:	238a      	movhi	r3, #138	; 0x8a
 8005074:	6003      	strhi	r3, [r0, #0]
 8005076:	700a      	strbls	r2, [r1, #0]
 8005078:	f04f 30ff 	movhi.w	r0, #4294967295
 800507c:	bf98      	it	ls
 800507e:	2001      	movls	r0, #1
 8005080:	4770      	bx	lr
 8005082:	4608      	mov	r0, r1
 8005084:	4770      	bx	lr
	...

08005088 <__swsetup_r>:
 8005088:	4b32      	ldr	r3, [pc, #200]	; (8005154 <__swsetup_r+0xcc>)
 800508a:	b570      	push	{r4, r5, r6, lr}
 800508c:	681d      	ldr	r5, [r3, #0]
 800508e:	4606      	mov	r6, r0
 8005090:	460c      	mov	r4, r1
 8005092:	b125      	cbz	r5, 800509e <__swsetup_r+0x16>
 8005094:	69ab      	ldr	r3, [r5, #24]
 8005096:	b913      	cbnz	r3, 800509e <__swsetup_r+0x16>
 8005098:	4628      	mov	r0, r5
 800509a:	f7fd fa85 	bl	80025a8 <__sinit>
 800509e:	4b2e      	ldr	r3, [pc, #184]	; (8005158 <__swsetup_r+0xd0>)
 80050a0:	429c      	cmp	r4, r3
 80050a2:	d10f      	bne.n	80050c4 <__swsetup_r+0x3c>
 80050a4:	686c      	ldr	r4, [r5, #4]
 80050a6:	89a3      	ldrh	r3, [r4, #12]
 80050a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050ac:	0719      	lsls	r1, r3, #28
 80050ae:	d42c      	bmi.n	800510a <__swsetup_r+0x82>
 80050b0:	06dd      	lsls	r5, r3, #27
 80050b2:	d411      	bmi.n	80050d8 <__swsetup_r+0x50>
 80050b4:	2309      	movs	r3, #9
 80050b6:	6033      	str	r3, [r6, #0]
 80050b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050bc:	81a3      	strh	r3, [r4, #12]
 80050be:	f04f 30ff 	mov.w	r0, #4294967295
 80050c2:	e03e      	b.n	8005142 <__swsetup_r+0xba>
 80050c4:	4b25      	ldr	r3, [pc, #148]	; (800515c <__swsetup_r+0xd4>)
 80050c6:	429c      	cmp	r4, r3
 80050c8:	d101      	bne.n	80050ce <__swsetup_r+0x46>
 80050ca:	68ac      	ldr	r4, [r5, #8]
 80050cc:	e7eb      	b.n	80050a6 <__swsetup_r+0x1e>
 80050ce:	4b24      	ldr	r3, [pc, #144]	; (8005160 <__swsetup_r+0xd8>)
 80050d0:	429c      	cmp	r4, r3
 80050d2:	bf08      	it	eq
 80050d4:	68ec      	ldreq	r4, [r5, #12]
 80050d6:	e7e6      	b.n	80050a6 <__swsetup_r+0x1e>
 80050d8:	0758      	lsls	r0, r3, #29
 80050da:	d512      	bpl.n	8005102 <__swsetup_r+0x7a>
 80050dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050de:	b141      	cbz	r1, 80050f2 <__swsetup_r+0x6a>
 80050e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050e4:	4299      	cmp	r1, r3
 80050e6:	d002      	beq.n	80050ee <__swsetup_r+0x66>
 80050e8:	4630      	mov	r0, r6
 80050ea:	f7ff fbcf 	bl	800488c <_free_r>
 80050ee:	2300      	movs	r3, #0
 80050f0:	6363      	str	r3, [r4, #52]	; 0x34
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050f8:	81a3      	strh	r3, [r4, #12]
 80050fa:	2300      	movs	r3, #0
 80050fc:	6063      	str	r3, [r4, #4]
 80050fe:	6923      	ldr	r3, [r4, #16]
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	f043 0308 	orr.w	r3, r3, #8
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	b94b      	cbnz	r3, 8005122 <__swsetup_r+0x9a>
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005118:	d003      	beq.n	8005122 <__swsetup_r+0x9a>
 800511a:	4621      	mov	r1, r4
 800511c:	4630      	mov	r0, r6
 800511e:	f000 f84d 	bl	80051bc <__smakebuf_r>
 8005122:	89a0      	ldrh	r0, [r4, #12]
 8005124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005128:	f010 0301 	ands.w	r3, r0, #1
 800512c:	d00a      	beq.n	8005144 <__swsetup_r+0xbc>
 800512e:	2300      	movs	r3, #0
 8005130:	60a3      	str	r3, [r4, #8]
 8005132:	6963      	ldr	r3, [r4, #20]
 8005134:	425b      	negs	r3, r3
 8005136:	61a3      	str	r3, [r4, #24]
 8005138:	6923      	ldr	r3, [r4, #16]
 800513a:	b943      	cbnz	r3, 800514e <__swsetup_r+0xc6>
 800513c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005140:	d1ba      	bne.n	80050b8 <__swsetup_r+0x30>
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	0781      	lsls	r1, r0, #30
 8005146:	bf58      	it	pl
 8005148:	6963      	ldrpl	r3, [r4, #20]
 800514a:	60a3      	str	r3, [r4, #8]
 800514c:	e7f4      	b.n	8005138 <__swsetup_r+0xb0>
 800514e:	2000      	movs	r0, #0
 8005150:	e7f7      	b.n	8005142 <__swsetup_r+0xba>
 8005152:	bf00      	nop
 8005154:	20000010 	.word	0x20000010
 8005158:	08005394 	.word	0x08005394
 800515c:	080053b4 	.word	0x080053b4
 8005160:	08005374 	.word	0x08005374

08005164 <abort>:
 8005164:	b508      	push	{r3, lr}
 8005166:	2006      	movs	r0, #6
 8005168:	f000 f898 	bl	800529c <raise>
 800516c:	2001      	movs	r0, #1
 800516e:	f000 f8db 	bl	8005328 <_exit>

08005172 <__swhatbuf_r>:
 8005172:	b570      	push	{r4, r5, r6, lr}
 8005174:	460e      	mov	r6, r1
 8005176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800517a:	2900      	cmp	r1, #0
 800517c:	b096      	sub	sp, #88	; 0x58
 800517e:	4614      	mov	r4, r2
 8005180:	461d      	mov	r5, r3
 8005182:	da08      	bge.n	8005196 <__swhatbuf_r+0x24>
 8005184:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	602a      	str	r2, [r5, #0]
 800518c:	061a      	lsls	r2, r3, #24
 800518e:	d410      	bmi.n	80051b2 <__swhatbuf_r+0x40>
 8005190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005194:	e00e      	b.n	80051b4 <__swhatbuf_r+0x42>
 8005196:	466a      	mov	r2, sp
 8005198:	f000 f89c 	bl	80052d4 <_fstat_r>
 800519c:	2800      	cmp	r0, #0
 800519e:	dbf1      	blt.n	8005184 <__swhatbuf_r+0x12>
 80051a0:	9a01      	ldr	r2, [sp, #4]
 80051a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051aa:	425a      	negs	r2, r3
 80051ac:	415a      	adcs	r2, r3
 80051ae:	602a      	str	r2, [r5, #0]
 80051b0:	e7ee      	b.n	8005190 <__swhatbuf_r+0x1e>
 80051b2:	2340      	movs	r3, #64	; 0x40
 80051b4:	2000      	movs	r0, #0
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	b016      	add	sp, #88	; 0x58
 80051ba:	bd70      	pop	{r4, r5, r6, pc}

080051bc <__smakebuf_r>:
 80051bc:	898b      	ldrh	r3, [r1, #12]
 80051be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051c0:	079d      	lsls	r5, r3, #30
 80051c2:	4606      	mov	r6, r0
 80051c4:	460c      	mov	r4, r1
 80051c6:	d507      	bpl.n	80051d8 <__smakebuf_r+0x1c>
 80051c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	6123      	str	r3, [r4, #16]
 80051d0:	2301      	movs	r3, #1
 80051d2:	6163      	str	r3, [r4, #20]
 80051d4:	b002      	add	sp, #8
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
 80051d8:	ab01      	add	r3, sp, #4
 80051da:	466a      	mov	r2, sp
 80051dc:	f7ff ffc9 	bl	8005172 <__swhatbuf_r>
 80051e0:	9900      	ldr	r1, [sp, #0]
 80051e2:	4605      	mov	r5, r0
 80051e4:	4630      	mov	r0, r6
 80051e6:	f7fd facd 	bl	8002784 <_malloc_r>
 80051ea:	b948      	cbnz	r0, 8005200 <__smakebuf_r+0x44>
 80051ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051f0:	059a      	lsls	r2, r3, #22
 80051f2:	d4ef      	bmi.n	80051d4 <__smakebuf_r+0x18>
 80051f4:	f023 0303 	bic.w	r3, r3, #3
 80051f8:	f043 0302 	orr.w	r3, r3, #2
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	e7e3      	b.n	80051c8 <__smakebuf_r+0xc>
 8005200:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <__smakebuf_r+0x7c>)
 8005202:	62b3      	str	r3, [r6, #40]	; 0x28
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	6020      	str	r0, [r4, #0]
 8005208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	9b00      	ldr	r3, [sp, #0]
 8005210:	6163      	str	r3, [r4, #20]
 8005212:	9b01      	ldr	r3, [sp, #4]
 8005214:	6120      	str	r0, [r4, #16]
 8005216:	b15b      	cbz	r3, 8005230 <__smakebuf_r+0x74>
 8005218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800521c:	4630      	mov	r0, r6
 800521e:	f000 f86b 	bl	80052f8 <_isatty_r>
 8005222:	b128      	cbz	r0, 8005230 <__smakebuf_r+0x74>
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	81a3      	strh	r3, [r4, #12]
 8005230:	89a0      	ldrh	r0, [r4, #12]
 8005232:	4305      	orrs	r5, r0
 8005234:	81a5      	strh	r5, [r4, #12]
 8005236:	e7cd      	b.n	80051d4 <__smakebuf_r+0x18>
 8005238:	08002541 	.word	0x08002541

0800523c <_malloc_usable_size_r>:
 800523c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005240:	1f18      	subs	r0, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	bfbc      	itt	lt
 8005246:	580b      	ldrlt	r3, [r1, r0]
 8005248:	18c0      	addlt	r0, r0, r3
 800524a:	4770      	bx	lr

0800524c <_raise_r>:
 800524c:	291f      	cmp	r1, #31
 800524e:	b538      	push	{r3, r4, r5, lr}
 8005250:	4604      	mov	r4, r0
 8005252:	460d      	mov	r5, r1
 8005254:	d904      	bls.n	8005260 <_raise_r+0x14>
 8005256:	2316      	movs	r3, #22
 8005258:	6003      	str	r3, [r0, #0]
 800525a:	f04f 30ff 	mov.w	r0, #4294967295
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005262:	b112      	cbz	r2, 800526a <_raise_r+0x1e>
 8005264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005268:	b94b      	cbnz	r3, 800527e <_raise_r+0x32>
 800526a:	4620      	mov	r0, r4
 800526c:	f000 f830 	bl	80052d0 <_getpid_r>
 8005270:	462a      	mov	r2, r5
 8005272:	4601      	mov	r1, r0
 8005274:	4620      	mov	r0, r4
 8005276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800527a:	f000 b817 	b.w	80052ac <_kill_r>
 800527e:	2b01      	cmp	r3, #1
 8005280:	d00a      	beq.n	8005298 <_raise_r+0x4c>
 8005282:	1c59      	adds	r1, r3, #1
 8005284:	d103      	bne.n	800528e <_raise_r+0x42>
 8005286:	2316      	movs	r3, #22
 8005288:	6003      	str	r3, [r0, #0]
 800528a:	2001      	movs	r0, #1
 800528c:	e7e7      	b.n	800525e <_raise_r+0x12>
 800528e:	2400      	movs	r4, #0
 8005290:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005294:	4628      	mov	r0, r5
 8005296:	4798      	blx	r3
 8005298:	2000      	movs	r0, #0
 800529a:	e7e0      	b.n	800525e <_raise_r+0x12>

0800529c <raise>:
 800529c:	4b02      	ldr	r3, [pc, #8]	; (80052a8 <raise+0xc>)
 800529e:	4601      	mov	r1, r0
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	f7ff bfd3 	b.w	800524c <_raise_r>
 80052a6:	bf00      	nop
 80052a8:	20000010 	.word	0x20000010

080052ac <_kill_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d07      	ldr	r5, [pc, #28]	; (80052cc <_kill_r+0x20>)
 80052b0:	2300      	movs	r3, #0
 80052b2:	4604      	mov	r4, r0
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	602b      	str	r3, [r5, #0]
 80052ba:	f000 f82d 	bl	8005318 <_kill>
 80052be:	1c43      	adds	r3, r0, #1
 80052c0:	d102      	bne.n	80052c8 <_kill_r+0x1c>
 80052c2:	682b      	ldr	r3, [r5, #0]
 80052c4:	b103      	cbz	r3, 80052c8 <_kill_r+0x1c>
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	bf00      	nop
 80052cc:	20000360 	.word	0x20000360

080052d0 <_getpid_r>:
 80052d0:	f7fd b89a 	b.w	8002408 <_getpid>

080052d4 <_fstat_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d07      	ldr	r5, [pc, #28]	; (80052f4 <_fstat_r+0x20>)
 80052d8:	2300      	movs	r3, #0
 80052da:	4604      	mov	r4, r0
 80052dc:	4608      	mov	r0, r1
 80052de:	4611      	mov	r1, r2
 80052e0:	602b      	str	r3, [r5, #0]
 80052e2:	f7fd f8d8 	bl	8002496 <_fstat>
 80052e6:	1c43      	adds	r3, r0, #1
 80052e8:	d102      	bne.n	80052f0 <_fstat_r+0x1c>
 80052ea:	682b      	ldr	r3, [r5, #0]
 80052ec:	b103      	cbz	r3, 80052f0 <_fstat_r+0x1c>
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	bd38      	pop	{r3, r4, r5, pc}
 80052f2:	bf00      	nop
 80052f4:	20000360 	.word	0x20000360

080052f8 <_isatty_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d06      	ldr	r5, [pc, #24]	; (8005314 <_isatty_r+0x1c>)
 80052fc:	2300      	movs	r3, #0
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	f7fd f8d5 	bl	80024b2 <_isatty>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_isatty_r+0x1a>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_isatty_r+0x1a>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	20000360 	.word	0x20000360

08005318 <_kill>:
 8005318:	4b02      	ldr	r3, [pc, #8]	; (8005324 <_kill+0xc>)
 800531a:	2258      	movs	r2, #88	; 0x58
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	f04f 30ff 	mov.w	r0, #4294967295
 8005322:	4770      	bx	lr
 8005324:	20000360 	.word	0x20000360

08005328 <_exit>:
 8005328:	e7fe      	b.n	8005328 <_exit>
	...

0800532c <_init>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr

08005338 <_fini>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	bf00      	nop
 800533c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533e:	bc08      	pop	{r3}
 8005340:	469e      	mov	lr, r3
 8005342:	4770      	bx	lr
