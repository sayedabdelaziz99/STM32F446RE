
BootLoader_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d64  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f28  08000f28  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f28  08000f28  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f28  08000f28  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f28  08000f28  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f28  08000f28  00010f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f2c  08000f2c  00010f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08000f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000003c  08000f6c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000444  2000005c  08000f6c  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e6a  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000072b  00000000  00000000  00021ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00022600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  000227f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c56  00000000  00000000  00022998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000243a  00000000  00000000  000255ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007668  00000000  00000000  00027a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002f090  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e0  00000000  00000000  0002f0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000003c 	.word	0x2000003c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f10 	.word	0x08000f10

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000040 	.word	0x20000040
 8000200:	08000f10 	.word	0x08000f10

08000204 <systick_init>:
 */
#include "GPIO_driver.h"
#include "bsp.h"
#include "SPI_driver.h"

void systick_init(uint16_t Ticks_PerSecond){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	80fb      	strh	r3, [r7, #6]
SysTick -> CVR = 0x1U;
 800020e:	4b10      	ldr	r3, [pc, #64]	; (8000250 <systick_init+0x4c>)
 8000210:	2201      	movs	r2, #1
 8000212:	609a      	str	r2, [r3, #8]
SysTick ->RVR = SysClock / Ticks_PerSecond;
 8000214:	88fb      	ldrh	r3, [r7, #6]
 8000216:	4a0e      	ldr	r2, [pc, #56]	; (8000250 <systick_init+0x4c>)
 8000218:	490e      	ldr	r1, [pc, #56]	; (8000254 <systick_init+0x50>)
 800021a:	fbb1 f3f3 	udiv	r3, r1, r3
 800021e:	6053      	str	r3, [r2, #4]
SysTick ->CSR |= (1 << 0);
 8000220:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <systick_init+0x4c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <systick_init+0x4c>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]
SysTick ->CSR |= (1 << 1);
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <systick_init+0x4c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <systick_init+0x4c>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	6013      	str	r3, [r2, #0]
SysTick ->CSR |= (1 << 2);
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <systick_init+0x4c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a04      	ldr	r2, [pc, #16]	; (8000250 <systick_init+0x4c>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e010 	.word	0xe000e010
 8000254:	00f42400 	.word	0x00f42400

08000258 <USART_GPIOInit>:
GPIO_CLKCNT(pGPIOx, ENABLE);
pGPIOx->LCKR &= ~(1 << PinNumber);
GPIO_Init(&I2CPins);
}

void USART_GPIOInit(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t ALTFN_Mode){
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	460b      	mov	r3, r1
 8000262:	70fb      	strb	r3, [r7, #3]
 8000264:	4613      	mov	r3, r2
 8000266:	70bb      	strb	r3, [r7, #2]
  GPIO_Handle_t USARTpins;
  USARTpins.pGPIOx = pGPIOx;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	60fb      	str	r3, [r7, #12]
  USARTpins.GPIO_PinConfig.GPIO_PinNumber =  PinNumber;
 800026c:	78fb      	ldrb	r3, [r7, #3]
 800026e:	743b      	strb	r3, [r7, #16]
  USARTpins.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_ALTFN;
 8000270:	2302      	movs	r3, #2
 8000272:	747b      	strb	r3, [r7, #17]
  USARTpins.GPIO_PinConfig.GPIO_PinAltFunMode   =  ALTFN_Mode;
 8000274:	78bb      	ldrb	r3, [r7, #2]
 8000276:	757b      	strb	r3, [r7, #21]
  USARTpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000278:	2300      	movs	r3, #0
 800027a:	753b      	strb	r3, [r7, #20]
  USARTpins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_PIN_PU;
 800027c:	2301      	movs	r3, #1
 800027e:	74fb      	strb	r3, [r7, #19]
  USARTpins.GPIO_PinConfig.GPIO_PinSpeed = GPOI_SPEED_HIGH;
 8000280:	2303      	movs	r3, #3
 8000282:	74bb      	strb	r3, [r7, #18]
  GPIO_CLKCNT(pGPIOx, ENABLE);
 8000284:	2101      	movs	r1, #1
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f000 f82c 	bl	80002e4 <GPIO_CLKCNT>
  pGPIOx->LCKR &= ~(1 << PinNumber);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
 8000290:	78fa      	ldrb	r2, [r7, #3]
 8000292:	2101      	movs	r1, #1
 8000294:	fa01 f202 	lsl.w	r2, r1, r2
 8000298:	43d2      	mvns	r2, r2
 800029a:	401a      	ands	r2, r3
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	61da      	str	r2, [r3, #28]
  GPIO_Init(&USARTpins);
 80002a0:	f107 030c 	add.w	r3, r7, #12
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f903 	bl	80004b0 <GPIO_Init>
}
 80002aa:	bf00      	nop
 80002ac:	3718      	adds	r7, #24
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <delay>:
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
	GPIO_CLKCNT(GPIOA,ENABLE);
	GPIO_Init(&GPIOLed);
}
void delay(uint32_t ms){
 80002b2:	b480      	push	{r7}
 80002b4:	b085      	sub	sp, #20
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < (ms * (SysClock / 1000)); i++){
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e002      	b.n	80002c6 <delay+0x14>
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80002cc:	fb02 f303 	mul.w	r3, r2, r3
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d3f4      	bcc.n	80002c0 <delay+0xe>
		;
	}
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
	...

080002e4 <GPIO_CLKCNT>:
 *
 * @Note              -  none

 */
void GPIO_CLKCNT(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d157      	bne.n	80003a6 <GPIO_CLKCNT+0xc2>
	{
	  if(pGPIOx == GPIOA){GPIOA_CLKEN;}
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a59      	ldr	r2, [pc, #356]	; (8000460 <GPIO_CLKCNT+0x17c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_CLKCNT+0x28>
 80002fe:	4b59      	ldr	r3, [pc, #356]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	4a58      	ldr	r2, [pc, #352]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6313      	str	r3, [r2, #48]	; 0x30
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
	}
}
 800030a:	e0a3      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKEN;}
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a56      	ldr	r2, [pc, #344]	; (8000468 <GPIO_CLKCNT+0x184>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_CLKCNT+0x3e>
 8000314:	4b53      	ldr	r3, [pc, #332]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000318:	4a52      	ldr	r2, [pc, #328]	; (8000464 <GPIO_CLKCNT+0x180>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000320:	e098      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKEN;}
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a51      	ldr	r2, [pc, #324]	; (800046c <GPIO_CLKCNT+0x188>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_CLKCNT+0x54>
 800032a:	4b4e      	ldr	r3, [pc, #312]	; (8000464 <GPIO_CLKCNT+0x180>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a4d      	ldr	r2, [pc, #308]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000336:	e08d      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKEN;}
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a4d      	ldr	r2, [pc, #308]	; (8000470 <GPIO_CLKCNT+0x18c>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_CLKCNT+0x6a>
 8000340:	4b48      	ldr	r3, [pc, #288]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a47      	ldr	r2, [pc, #284]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	e082      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKEN;}
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a48      	ldr	r2, [pc, #288]	; (8000474 <GPIO_CLKCNT+0x190>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_CLKCNT+0x80>
 8000356:	4b43      	ldr	r3, [pc, #268]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	4a42      	ldr	r2, [pc, #264]	; (8000464 <GPIO_CLKCNT+0x180>)
 800035c:	f043 0310 	orr.w	r3, r3, #16
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000362:	e077      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKEN;}
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a44      	ldr	r2, [pc, #272]	; (8000478 <GPIO_CLKCNT+0x194>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_CLKCNT+0x96>
 800036c:	4b3d      	ldr	r3, [pc, #244]	; (8000464 <GPIO_CLKCNT+0x180>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a3c      	ldr	r2, [pc, #240]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000378:	e06c      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKEN;}
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a3f      	ldr	r2, [pc, #252]	; (800047c <GPIO_CLKCNT+0x198>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_CLKCNT+0xac>
 8000382:	4b38      	ldr	r3, [pc, #224]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a37      	ldr	r2, [pc, #220]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038e:	e061      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKEN;}
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a3b      	ldr	r2, [pc, #236]	; (8000480 <GPIO_CLKCNT+0x19c>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d15d      	bne.n	8000454 <GPIO_CLKCNT+0x170>
 8000398:	4b32      	ldr	r3, [pc, #200]	; (8000464 <GPIO_CLKCNT+0x180>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a31      	ldr	r2, [pc, #196]	; (8000464 <GPIO_CLKCNT+0x180>)
 800039e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e056      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  if(pGPIOx == GPIOA){GPIOA_CLKDI;}
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a2d      	ldr	r2, [pc, #180]	; (8000460 <GPIO_CLKCNT+0x17c>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_CLKCNT+0xd8>
 80003ae:	4b2d      	ldr	r3, [pc, #180]	; (8000464 <GPIO_CLKCNT+0x180>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a2c      	ldr	r2, [pc, #176]	; (8000464 <GPIO_CLKCNT+0x180>)
 80003b4:	f023 0301 	bic.w	r3, r3, #1
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e04b      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKDI;}
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a2a      	ldr	r2, [pc, #168]	; (8000468 <GPIO_CLKCNT+0x184>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_CLKCNT+0xee>
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <GPIO_CLKCNT+0x180>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a26      	ldr	r2, [pc, #152]	; (8000464 <GPIO_CLKCNT+0x180>)
 80003ca:	f023 0302 	bic.w	r3, r3, #2
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e040      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKDI;}
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a25      	ldr	r2, [pc, #148]	; (800046c <GPIO_CLKCNT+0x188>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_CLKCNT+0x104>
 80003da:	4b22      	ldr	r3, [pc, #136]	; (8000464 <GPIO_CLKCNT+0x180>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a21      	ldr	r2, [pc, #132]	; (8000464 <GPIO_CLKCNT+0x180>)
 80003e0:	f023 0304 	bic.w	r3, r3, #4
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e035      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKDI;}
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a21      	ldr	r2, [pc, #132]	; (8000470 <GPIO_CLKCNT+0x18c>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_CLKCNT+0x11a>
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <GPIO_CLKCNT+0x180>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a1b      	ldr	r2, [pc, #108]	; (8000464 <GPIO_CLKCNT+0x180>)
 80003f6:	f023 0308 	bic.w	r3, r3, #8
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e02a      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <GPIO_CLKCNT+0x190>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_CLKCNT+0x130>
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a16      	ldr	r2, [pc, #88]	; (8000464 <GPIO_CLKCNT+0x180>)
 800040c:	f023 0310 	bic.w	r3, r3, #16
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e01f      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a18      	ldr	r2, [pc, #96]	; (8000478 <GPIO_CLKCNT+0x194>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_CLKCNT+0x146>
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <GPIO_CLKCNT+0x180>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a10      	ldr	r2, [pc, #64]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000422:	f023 0320 	bic.w	r3, r3, #32
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e014      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a13      	ldr	r2, [pc, #76]	; (800047c <GPIO_CLKCNT+0x198>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_CLKCNT+0x15c>
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <GPIO_CLKCNT+0x180>)
 8000438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e009      	b.n	8000454 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a0f      	ldr	r2, [pc, #60]	; (8000480 <GPIO_CLKCNT+0x19c>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d105      	bne.n	8000454 <GPIO_CLKCNT+0x170>
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <GPIO_CLKCNT+0x180>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <GPIO_CLKCNT+0x180>)
 800044e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40020000 	.word	0x40020000
 8000464:	40023800 	.word	0x40023800
 8000468:	40020400 	.word	0x40020400
 800046c:	40020800 	.word	0x40020800
 8000470:	40020c00 	.word	0x40020c00
 8000474:	40021000 	.word	0x40021000
 8000478:	40021400 	.word	0x40021400
 800047c:	40021800 	.word	0x40021800
 8000480:	40021c00 	.word	0x40021c00

08000484 <GPIO_PORTCODE>:
 * @return            - the code of the given port
 *
 * @Note              -

 */
uint8_t GPIO_PORTCODE(GPIO_RegDef_t *pGPIOx){
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	uint8_t volatile portcode;
	uint32_t offset = (uint32_t)((uint32_t)pGPIOx - GPIOA_BASEADDR); /*calculate the offset from the base address*/
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000492:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000496:	60fb      	str	r3, [r7, #12]
	portcode = offset / 0x400;   /*portcode will range from 0 to 8 since the offset is a multiply of 400*/
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	0a9b      	lsrs	r3, r3, #10
 800049c:	b2db      	uxtb	r3, r3
 800049e:	72fb      	strb	r3, [r7, #11]
	return portcode;
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	b2db      	uxtb	r3, r3
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
	...

080004b0 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	795b      	ldrb	r3, [r3, #5]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d820      	bhi.n	8000506 <GPIO_Init+0x56>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	795b      	ldrb	r3, [r3, #5]
 80004c8:	461a      	mov	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	791b      	ldrb	r3, [r3, #4]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	2103      	movs	r1, #3
 80004e4:	fa01 f303 	lsl.w	r3, r1, r3
 80004e8:	43db      	mvns	r3, r3
 80004ea:	4619      	mov	r1, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	400a      	ands	r2, r1
 80004f2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	6819      	ldr	r1, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	697a      	ldr	r2, [r7, #20]
 8000500:	430a      	orrs	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	e08a      	b.n	800061c <GPIO_Init+0x16c>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	795b      	ldrb	r3, [r3, #5]
 800050a:	2b04      	cmp	r3, #4
 800050c:	d11d      	bne.n	800054a <GPIO_Init+0x9a>
			/*configure the falling edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	6812      	ldr	r2, [r2, #0]
 8000518:	601a      	str	r2, [r3, #0]
			EXTI ->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051a:	4b8c      	ldr	r3, [pc, #560]	; (800074c <GPIO_Init+0x29c>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	7912      	ldrb	r2, [r2, #4]
 8000522:	4611      	mov	r1, r2
 8000524:	2201      	movs	r2, #1
 8000526:	408a      	lsls	r2, r1
 8000528:	43d2      	mvns	r2, r2
 800052a:	4611      	mov	r1, r2
 800052c:	4a87      	ldr	r2, [pc, #540]	; (800074c <GPIO_Init+0x29c>)
 800052e:	400b      	ands	r3, r1
 8000530:	6093      	str	r3, [r2, #8]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000532:	4b86      	ldr	r3, [pc, #536]	; (800074c <GPIO_Init+0x29c>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	7912      	ldrb	r2, [r2, #4]
 800053a:	4611      	mov	r1, r2
 800053c:	2201      	movs	r2, #1
 800053e:	408a      	lsls	r2, r1
 8000540:	4611      	mov	r1, r2
 8000542:	4a82      	ldr	r2, [pc, #520]	; (800074c <GPIO_Init+0x29c>)
 8000544:	430b      	orrs	r3, r1
 8000546:	60d3      	str	r3, [r2, #12]
 8000548:	e03d      	b.n	80005c6 <GPIO_Init+0x116>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	795b      	ldrb	r3, [r3, #5]
 800054e:	2b05      	cmp	r3, #5
 8000550:	d11d      	bne.n	800058e <GPIO_Init+0xde>
			/*configure the rising edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	6812      	ldr	r2, [r2, #0]
 800055c:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055e:	4b7b      	ldr	r3, [pc, #492]	; (800074c <GPIO_Init+0x29c>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	7912      	ldrb	r2, [r2, #4]
 8000566:	4611      	mov	r1, r2
 8000568:	2201      	movs	r2, #1
 800056a:	408a      	lsls	r2, r1
 800056c:	43d2      	mvns	r2, r2
 800056e:	4611      	mov	r1, r2
 8000570:	4a76      	ldr	r2, [pc, #472]	; (800074c <GPIO_Init+0x29c>)
 8000572:	400b      	ands	r3, r1
 8000574:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000576:	4b75      	ldr	r3, [pc, #468]	; (800074c <GPIO_Init+0x29c>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a71      	ldr	r2, [pc, #452]	; (800074c <GPIO_Init+0x29c>)
 8000588:	430b      	orrs	r3, r1
 800058a:	6093      	str	r3, [r2, #8]
 800058c:	e01b      	b.n	80005c6 <GPIO_Init+0x116>
		}
		else{
			/*configure the falling and rising edge trigger registers*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6812      	ldr	r2, [r2, #0]
 8000598:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059a:	4b6c      	ldr	r3, [pc, #432]	; (800074c <GPIO_Init+0x29c>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a68      	ldr	r2, [pc, #416]	; (800074c <GPIO_Init+0x29c>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b0:	4b66      	ldr	r3, [pc, #408]	; (800074c <GPIO_Init+0x29c>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	4a62      	ldr	r2, [pc, #392]	; (800074c <GPIO_Init+0x29c>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6093      	str	r3, [r2, #8]
		}

		/*configure the gpio port selection(SYSCONFIG_EXTI register)*/
		uint8_t tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;  /*which EXTICR to configure*/
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	089b      	lsrs	r3, r3, #2
 80005cc:	74fb      	strb	r3, [r7, #19]
		uint8_t tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;  /*which Field of the EXTICR to configure*/
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	791b      	ldrb	r3, [r3, #4]
 80005d2:	f003 0303 	and.w	r3, r3, #3
 80005d6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_PORTCODE(pGPIOHandle->pGPIOx);          /*the code that represents the port whoes pin is goning to trigger the interrupt*/
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff51 	bl	8000484 <GPIO_PORTCODE>
 80005e2:	4603      	mov	r3, r0
 80005e4:	747b      	strb	r3, [r7, #17]
		RCC->APB2ENR |= (1U << 14);										/*Enable colock for SYSCFG*/
 80005e6:	4b5a      	ldr	r3, [pc, #360]	; (8000750 <GPIO_Init+0x2a0>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ea:	4a59      	ldr	r2, [pc, #356]	; (8000750 <GPIO_Init+0x2a0>)
 80005ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f0:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[tmp1] = (portcode << tmp2 * 4);                  /*every field is four bits wide so  we multiply by 4*/
 80005f2:	7c7a      	ldrb	r2, [r7, #17]
 80005f4:	7cbb      	ldrb	r3, [r7, #18]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	fa02 f103 	lsl.w	r1, r2, r3
 80005fc:	4a55      	ldr	r2, [pc, #340]	; (8000754 <GPIO_Init+0x2a4>)
 80005fe:	7cfb      	ldrb	r3, [r7, #19]
 8000600:	3302      	adds	r3, #2
 8000602:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/*configure the exti interrupt delivery(interrupt mask register)*/
		EXTI ->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000606:	4b51      	ldr	r3, [pc, #324]	; (800074c <GPIO_Init+0x29c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	4611      	mov	r1, r2
 8000610:	2201      	movs	r2, #1
 8000612:	408a      	lsls	r2, r1
 8000614:	4611      	mov	r1, r2
 8000616:	4a4d      	ldr	r2, [pc, #308]	; (800074c <GPIO_Init+0x29c>)
 8000618:	430b      	orrs	r3, r1
 800061a:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	799b      	ldrb	r3, [r3, #6]
 8000620:	461a      	mov	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	689a      	ldr	r2, [r3, #8]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	2103      	movs	r1, #3
 800063c:	fa01 f303 	lsl.w	r3, r1, r3
 8000640:	43db      	mvns	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	400a      	ands	r2, r1
 800064a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	6899      	ldr	r1, [r3, #8]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	430a      	orrs	r2, r1
 800065a:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	79db      	ldrb	r3, [r3, #7]
 8000660:	461a      	mov	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68da      	ldr	r2, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	2103      	movs	r1, #3
 800067c:	fa01 f303 	lsl.w	r3, r1, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	4619      	mov	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	400a      	ands	r2, r1
 800068a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68d9      	ldr	r1, [r3, #12]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	430a      	orrs	r2, r1
 800069a:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7a1b      	ldrb	r3, [r3, #8]
 80006a0:	461a      	mov	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	4619      	mov	r1, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	408b      	lsls	r3, r1
 80006bc:	43db      	mvns	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	400a      	ands	r2, r1
 80006c6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6859      	ldr	r1, [r3, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	795b      	ldrb	r3, [r3, #5]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d131      	bne.n	8000744 <GPIO_Init+0x294>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	08db      	lsrs	r3, r3, #3
 80006e6:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	f003 0307 	and.w	r3, r3, #7
 80006f0:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	7c3a      	ldrb	r2, [r7, #16]
 80006f8:	3208      	adds	r2, #8
 80006fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	220f      	movs	r2, #15
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	43db      	mvns	r3, r3
 800070a:	4618      	mov	r0, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	7c3a      	ldrb	r2, [r7, #16]
 8000712:	4001      	ands	r1, r0
 8000714:	3208      	adds	r2, #8
 8000716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	7c3a      	ldrb	r2, [r7, #16]
 8000720:	3208      	adds	r2, #8
 8000722:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7a5b      	ldrb	r3, [r3, #9]
 800072a:	461a      	mov	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	4618      	mov	r0, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	7c3a      	ldrb	r2, [r7, #16]
 800073c:	4301      	orrs	r1, r0
 800073e:	3208      	adds	r2, #8
 8000740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000744:	bf00      	nop
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40013c00 	.word	0x40013c00
 8000750:	40023800 	.word	0x40023800
 8000754:	40013800 	.word	0x40013800

08000758 <getSystemClock>:
#include "RCC_driver.h"

uint16_t AHB_PRESCALERS[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB_PRESCALERS[4] = {2, 4, 8, 16};

uint32_t getSystemClock(void){
 8000758:	b480      	push	{r7}
 800075a:	b087      	sub	sp, #28
 800075c:	af00      	add	r7, sp, #0
uint8_t PLLP1 = ((RCC->PLLCFGR >> 16) & 0x3U);
 800075e:	4b33      	ldr	r3, [pc, #204]	; (800082c <getSystemClock+0xd4>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	0c1b      	lsrs	r3, r3, #16
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	75bb      	strb	r3, [r7, #22]
uint8_t PLLP;
uint32_t fPLL,fPLLR;
switch(PLLP1){
 800076c:	7dbb      	ldrb	r3, [r7, #22]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d816      	bhi.n	80007a0 <getSystemClock+0x48>
 8000772:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <getSystemClock+0x20>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000789 	.word	0x08000789
 800077c:	0800078f 	.word	0x0800078f
 8000780:	08000795 	.word	0x08000795
 8000784:	0800079b 	.word	0x0800079b
  case(0):
		  PLLP = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	75fb      	strb	r3, [r7, #23]
          break;
 800078c:	e008      	b.n	80007a0 <getSystemClock+0x48>
  case(1):
		  PLLP = 4;
 800078e:	2304      	movs	r3, #4
 8000790:	75fb      	strb	r3, [r7, #23]
          break;
 8000792:	e005      	b.n	80007a0 <getSystemClock+0x48>
  case(2):
		  PLLP = 6;
 8000794:	2306      	movs	r3, #6
 8000796:	75fb      	strb	r3, [r7, #23]
          break;
 8000798:	e002      	b.n	80007a0 <getSystemClock+0x48>
  case(3):
		  PLLP = 8;
 800079a:	2308      	movs	r3, #8
 800079c:	75fb      	strb	r3, [r7, #23]
          break;
 800079e:	bf00      	nop
}
uint16_t PLLN = ((RCC ->PLLCFGR >> 6) & 0x1FF);
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <getSystemClock+0xd4>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	099b      	lsrs	r3, r3, #6
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007ac:	82bb      	strh	r3, [r7, #20]
uint16_t PLLM = (RCC ->PLLCFGR & 0x3FU);
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <getSystemClock+0xd4>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007b8:	827b      	strh	r3, [r7, #18]
uint16_t PLLR = (RCC ->PLLCFGR >> 28) & 0x7U;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <getSystemClock+0xd4>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	0f1b      	lsrs	r3, r3, #28
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	823b      	strh	r3, [r7, #16]
uint32_t fVCO = HSI_CLOCK * (PLLN / PLLM); /*HSI is used as pll input*/
 80007c8:	8aba      	ldrh	r2, [r7, #20]
 80007ca:	8a7b      	ldrh	r3, [r7, #18]
 80007cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <getSystemClock+0xd8>)
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
 80007da:	60fb      	str	r3, [r7, #12]
	switch (RCC ->CFGR >> 2){
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <getSystemClock+0xd4>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	089b      	lsrs	r3, r3, #2
 80007e2:	2b03      	cmp	r3, #3
 80007e4:	d81c      	bhi.n	8000820 <getSystemClock+0xc8>
 80007e6:	a201      	add	r2, pc, #4	; (adr r2, 80007ec <getSystemClock+0x94>)
 80007e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ec:	080007fd 	.word	0x080007fd
 80007f0:	08000801 	.word	0x08000801
 80007f4:	08000805 	.word	0x08000805
 80007f8:	08000813 	.word	0x08000813
		case(0) : /*HSI is used*/
			return HSI_CLOCK; /*HSI clock speed*/
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <getSystemClock+0xd8>)
 80007fe:	e00f      	b.n	8000820 <getSystemClock+0xc8>
		case(1) : /*HSE is used*/
			return HSE_CLOCK;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <getSystemClock+0xdc>)
 8000802:	e00d      	b.n	8000820 <getSystemClock+0xc8>
		case(2) : /*PLL is used*/
		   fPLL = fVCO * PLLP;
 8000804:	7dfa      	ldrb	r2, [r7, #23]
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	fb02 f303 	mul.w	r3, r2, r3
 800080c:	607b      	str	r3, [r7, #4]
		  return fPLL;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	e006      	b.n	8000820 <getSystemClock+0xc8>
		case(3) : /*PLL_R is used*/
			/*Clock frequancy = VCO / PLLR*/
			 fPLLR = fVCO / PLLR;
 8000812:	8a3b      	ldrh	r3, [r7, #16]
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	fbb2 f3f3 	udiv	r3, r2, r3
 800081a:	60bb      	str	r3, [r7, #8]
			return fPLLR;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	e7ff      	b.n	8000820 <getSystemClock+0xc8>
	}
}
 8000820:	4618      	mov	r0, r3
 8000822:	371c      	adds	r7, #28
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	00f42400 	.word	0x00f42400
 8000834:	007a1200 	.word	0x007a1200

08000838 <getAPBClock>:
	}
	uint32_t AHBClock = SystemClock / AHB_PRESCALER;
	return AHBClock;
}

uint32_t getAPBClock(uint32_t BusAddress){
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	if(BusAddress == APB1PREF_BASEADDR){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000846:	d11a      	bne.n	800087e <getAPBClock+0x46>
		uint8_t APB1PRESCALER;
		if(((RCC ->CFGR >> 10) & 0x7U) < 4){
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <getAPBClock+0x84>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	0a9b      	lsrs	r3, r3, #10
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	2b00      	cmp	r3, #0
 8000854:	d102      	bne.n	800085c <getAPBClock+0x24>
		  APB1PRESCALER = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	73fb      	strb	r3, [r7, #15]
 800085a:	e009      	b.n	8000870 <getAPBClock+0x38>
		}else{
		  APB1PRESCALER = APB_PRESCALERS[((RCC ->CFGR >> 10) & 0x7U) - 4];
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <getAPBClock+0x84>)
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	0a9b      	lsrs	r3, r3, #10
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	3b04      	subs	r3, #4
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <getAPBClock+0x88>)
 800086a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800086e:	73fb      	strb	r3, [r7, #15]
		}
		return (getSystemClock() / APB1PRESCALER);
 8000870:	f7ff ff72 	bl	8000758 <getSystemClock>
 8000874:	4602      	mov	r2, r0
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	fbb2 f3f3 	udiv	r3, r2, r3
 800087c:	e019      	b.n	80008b2 <getAPBClock+0x7a>
	}
	else{
		uint8_t APB2PRESCALER;
		if(((RCC ->CFGR >> 13) & 0x7U) < 4){
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <getAPBClock+0x84>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	0b5b      	lsrs	r3, r3, #13
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <getAPBClock+0x5a>
		  APB2PRESCALER = 1;
 800088c:	2301      	movs	r3, #1
 800088e:	73bb      	strb	r3, [r7, #14]
 8000890:	e009      	b.n	80008a6 <getAPBClock+0x6e>
		}else{
		  APB2PRESCALER = APB_PRESCALERS[((RCC ->CFGR >> 10) & 0x7U) - 4];
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <getAPBClock+0x84>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	0a9b      	lsrs	r3, r3, #10
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	3b04      	subs	r3, #4
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <getAPBClock+0x88>)
 80008a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a4:	73bb      	strb	r3, [r7, #14]
		}
		return (getSystemClock() / APB2PRESCALER);
 80008a6:	f7ff ff57 	bl	8000758 <getSystemClock>
 80008aa:	4602      	mov	r2, r0
 80008ac:	7bbb      	ldrb	r3, [r7, #14]
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
	}
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	20000000 	.word	0x20000000

080008c4 <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_type *pUSARTx, uint32_t BaudRate)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a32      	ldr	r2, [pc, #200]	; (80009a0 <USART_SetBaudRate+0xdc>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d003      	beq.n	80008e2 <USART_SetBaudRate+0x1e>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a31      	ldr	r2, [pc, #196]	; (80009a4 <USART_SetBaudRate+0xe0>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d104      	bne.n	80008ec <USART_SetBaudRate+0x28>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = getAPBClock(APB2PREF_BASEADDR);
 80008e2:	4831      	ldr	r0, [pc, #196]	; (80009a8 <USART_SetBaudRate+0xe4>)
 80008e4:	f7ff ffa8 	bl	8000838 <getAPBClock>
 80008e8:	61f8      	str	r0, [r7, #28]
 80008ea:	e004      	b.n	80008f6 <USART_SetBaudRate+0x32>
  }else
  {
	  PCLKx = getAPBClock(APB1PREF_BASEADDR);
 80008ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008f0:	f7ff ffa2 	bl	8000838 <getAPBClock>
 80008f4:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00b      	beq.n	800091a <USART_SetBaudRate+0x56>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	4613      	mov	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4413      	add	r3, r2
 800090a:	009a      	lsls	r2, r3, #2
 800090c:	441a      	add	r2, r3
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	e00a      	b.n	8000930 <USART_SetBaudRate+0x6c>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	4613      	mov	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	009a      	lsls	r2, r3, #2
 8000924:	441a      	add	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <USART_SetBaudRate+0xe8>)
 8000934:	fba2 2303 	umull	r2, r3, r2, r3
 8000938:	095b      	lsrs	r3, r3, #5
 800093a:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4313      	orrs	r3, r2
 8000944:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2264      	movs	r2, #100	; 0x64
 800094a:	fb02 f303 	mul.w	r3, r2, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00a      	beq.n	8000976 <USART_SetBaudRate+0xb2>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	3332      	adds	r3, #50	; 0x32
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <USART_SetBaudRate+0xe8>)
 8000968:	fba2 2303 	umull	r2, r3, r2, r3
 800096c:	095b      	lsrs	r3, r3, #5
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e009      	b.n	800098a <USART_SetBaudRate+0xc6>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	3332      	adds	r3, #50	; 0x32
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <USART_SetBaudRate+0xe8>)
 800097e:	fba2 2303 	umull	r2, r3, r2, r3
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	f003 030f 	and.w	r3, r3, #15
 8000988:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	609a      	str	r2, [r3, #8]
}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40011400 	.word	0x40011400
 80009a8:	40010000 	.word	0x40010000
 80009ac:	51eb851f 	.word	0x51eb851f

080009b0 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2101      	movs	r1, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f89a 	bl	8000afc <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	791b      	ldrb	r3, [r3, #4]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d104      	bne.n	80009da <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	e010      	b.n	80009fc <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	791b      	ldrb	r3, [r3, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d104      	bne.n	80009ec <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	e007      	b.n	80009fc <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d103      	bne.n	80009fc <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f043 030c 	orr.w	r3, r3, #12
 80009fa:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	7b5b      	ldrb	r3, [r3, #13]
 8000a00:	031b      	lsls	r3, r3, #12
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7b9b      	ldrb	r3, [r3, #14]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d104      	bne.n	8000a1c <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	e00b      	b.n	8000a34 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7b9b      	ldrb	r3, [r3, #14]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d107      	bne.n	8000a34 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a32:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7b1b      	ldrb	r3, [r3, #12]
 8000a44:	031b      	lsls	r3, r3, #12
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7bdb      	ldrb	r3, [r3, #15]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d104      	bne.n	8000a6c <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e014      	b.n	8000a96 <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7bdb      	ldrb	r3, [r3, #15]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d104      	bne.n	8000a7e <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e00b      	b.n	8000a96 <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7bdb      	ldrb	r3, [r3, #15]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d107      	bne.n	8000a96 <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8c:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a94:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	f7ff ff0b 	bl	80008c4 <USART_SetBaudRate>
	 pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	68da      	ldr	r2, [r3, #12]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000abc:	60da      	str	r2, [r3, #12]
}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <USART_PeripheralControl>:
 *
 * @Note              -

 */
void USART_PeripheralControl(USART_type *pUSARTx, uint8_t Cmd)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d106      	bne.n	8000ae6 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 8000ae4:	e005      	b.n	8000af2 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	60da      	str	r2, [r3, #12]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_type *pUSARTx, uint8_t EnorDi)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d141      	bne.n	8000b92 <USART_PeriClockControl+0x96>
	{
		if(pUSARTx == USART1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a43      	ldr	r2, [pc, #268]	; (8000c20 <USART_PeriClockControl+0x124>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d106      	bne.n	8000b24 <USART_PeriClockControl+0x28>
		{
			USART1_CLKEN();
 8000b16:	4b43      	ldr	r3, [pc, #268]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a42      	ldr	r2, [pc, #264]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
		{
			USART6_CLKDI();
		}
	}

}
 8000b22:	e077      	b.n	8000c14 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a40      	ldr	r2, [pc, #256]	; (8000c28 <USART_PeriClockControl+0x12c>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d106      	bne.n	8000b3a <USART_PeriClockControl+0x3e>
			USART2_CLKEN();
 8000b2c:	4b3d      	ldr	r3, [pc, #244]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	4a3c      	ldr	r2, [pc, #240]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b36:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b38:	e06c      	b.n	8000c14 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART3)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a3b      	ldr	r2, [pc, #236]	; (8000c2c <USART_PeriClockControl+0x130>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d106      	bne.n	8000b50 <USART_PeriClockControl+0x54>
			USART3_CLKEN();
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a37      	ldr	r2, [pc, #220]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b4e:	e061      	b.n	8000c14 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a37      	ldr	r2, [pc, #220]	; (8000c30 <USART_PeriClockControl+0x134>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d106      	bne.n	8000b66 <USART_PeriClockControl+0x6a>
			UART4_CLKEN();
 8000b58:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a31      	ldr	r2, [pc, #196]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b64:	e056      	b.n	8000c14 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <USART_PeriClockControl+0x138>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d106      	bne.n	8000b7c <USART_PeriClockControl+0x80>
			UART5_CLKEN();
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a2c      	ldr	r2, [pc, #176]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b7a:	e04b      	b.n	8000c14 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a2e      	ldr	r2, [pc, #184]	; (8000c38 <USART_PeriClockControl+0x13c>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d147      	bne.n	8000c14 <USART_PeriClockControl+0x118>
			USART6_CLKEN();
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b88:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b8a:	f043 0320 	orr.w	r3, r3, #32
 8000b8e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b90:	e040      	b.n	8000c14 <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <USART_PeriClockControl+0x124>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d106      	bne.n	8000ba8 <USART_PeriClockControl+0xac>
			USART1_CLKDI();
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a21      	ldr	r2, [pc, #132]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000ba0:	f023 0310 	bic.w	r3, r3, #16
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ba6:	e035      	b.n	8000c14 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a1f      	ldr	r2, [pc, #124]	; (8000c28 <USART_PeriClockControl+0x12c>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d106      	bne.n	8000bbe <USART_PeriClockControl+0xc2>
			USART2_CLKDI();
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000bb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bbc:	e02a      	b.n	8000c14 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART3)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a1a      	ldr	r2, [pc, #104]	; (8000c2c <USART_PeriClockControl+0x130>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d106      	bne.n	8000bd4 <USART_PeriClockControl+0xd8>
			USART3_CLKDI();
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bd2:	e01f      	b.n	8000c14 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a16      	ldr	r2, [pc, #88]	; (8000c30 <USART_PeriClockControl+0x134>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d106      	bne.n	8000bea <USART_PeriClockControl+0xee>
			UART4_CLKDI();
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000be2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000be8:	e014      	b.n	8000c14 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <USART_PeriClockControl+0x138>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d106      	bne.n	8000c00 <USART_PeriClockControl+0x104>
			UART5_CLKDI();
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000bf8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bfe:	e009      	b.n	8000c14 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <USART_PeriClockControl+0x13c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d105      	bne.n	8000c14 <USART_PeriClockControl+0x118>
			USART6_CLKDI();
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0c:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <USART_PeriClockControl+0x128>)
 8000c0e:	f023 0320 	bic.w	r3, r3, #32
 8000c12:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40004400 	.word	0x40004400
 8000c2c:	40004800 	.word	0x40004800
 8000c30:	40004c00 	.word	0x40004c00
 8000c34:	40005000 	.word	0x40005000
 8000c38:	40011400 	.word	0x40011400

08000c3c <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_type *pUSARTx, uint8_t StatusFlagName)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e000      	b.n	8000c5a <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e031      	b.n	8000cda <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000c76:	bf00      	nop
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ffdc 	bl	8000c3c <USART_GetFlagStatus>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f6      	beq.n	8000c78 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	7b5b      	ldrb	r3, [r3, #13]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d118      	bne.n	8000cc4 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ca4:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	7b9b      	ldrb	r3, [r3, #14]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d106      	bne.n	8000cbc <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	e00b      	b.n	8000cd4 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	e007      	b.n	8000cd4 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d3c9      	bcc.n	8000c76 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000ce2:	bf00      	nop
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2140      	movs	r1, #64	; 0x40
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ffa6 	bl	8000c3c <USART_GetFlagStatus>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0f6      	beq.n	8000ce4 <USART_SendData+0x80>
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <main>:
uint32_t TICKS = 0;

char waiting[] = "waiting for firmware update....\r\n";
char timeout[] = "Timed Out!\r\n";

int main(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
	USART_Handle_t USART;
	USART_GPIOInit(GPIOA, GPIO_PIN_NO_2, 7); //TX
 8000d06:	2207      	movs	r2, #7
 8000d08:	2102      	movs	r1, #2
 8000d0a:	481a      	ldr	r0, [pc, #104]	; (8000d74 <main+0x74>)
 8000d0c:	f7ff faa4 	bl	8000258 <USART_GPIOInit>
	USART_GPIOInit(GPIOA, GPIO_PIN_NO_3, 7); //RX
 8000d10:	2207      	movs	r2, #7
 8000d12:	2103      	movs	r1, #3
 8000d14:	4817      	ldr	r0, [pc, #92]	; (8000d74 <main+0x74>)
 8000d16:	f7ff fa9f 	bl	8000258 <USART_GPIOInit>

	USART.pUSARTx = USART2;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <main+0x78>)
 8000d1c:	607b      	str	r3, [r7, #4]
	USART_setup(&USART);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f831 	bl	8000d88 <USART_setup>

	systick_init(1000);
 8000d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2a:	f7ff fa6b 	bl	8000204 <systick_init>

	while(TICKS < 3000){
 8000d2e:	e008      	b.n	8000d42 <main+0x42>
		USART_SendData(&USART, (uint8_t *)waiting, sizeof(waiting));
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2222      	movs	r2, #34	; 0x22
 8000d34:	4911      	ldr	r1, [pc, #68]	; (8000d7c <main+0x7c>)
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff94 	bl	8000c64 <USART_SendData>
		delay(50);
 8000d3c:	2032      	movs	r0, #50	; 0x32
 8000d3e:	f7ff fab8 	bl	80002b2 <delay>
	while(TICKS < 3000){
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <main+0x80>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d9f0      	bls.n	8000d30 <main+0x30>
	}
	USART_SendData(&USART, (uint8_t *)timeout, sizeof(timeout));
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	220d      	movs	r2, #13
 8000d52:	490c      	ldr	r1, [pc, #48]	; (8000d84 <main+0x84>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff85 	bl	8000c64 <USART_SendData>

	SysTick_taredown();
 8000d5a:	f000 f87d 	bl	8000e58 <SysTick_taredown>
	USART_taredown(&USART);
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f843 	bl	8000dec <USART_taredown>

	jump_to_main();
 8000d66:	f000 f855 	bl	8000e14 <jump_to_main>

	return 0; //should never reach this line
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000058 	.word	0x20000058
 8000d84:	2000002c 	.word	0x2000002c

08000d88 <USART_setup>:

static void USART_setup(USART_Handle_t *pUSARTHandle){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	pUSARTHandle->USART_Config.USART_Baud =  USART_STD_BAUD_115200;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d96:	609a      	str	r2, [r3, #8]
	pUSARTHandle->USART_Config.USART_Mode =  USART_MODE_TXRX;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	711a      	strb	r2, [r3, #4]
	pUSARTHandle->USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	731a      	strb	r2, [r3, #12]
	pUSARTHandle->USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	739a      	strb	r2, [r3, #14]
	pUSARTHandle->USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	735a      	strb	r2, [r3, #13]
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2101      	movs	r1, #1
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fea0 	bl	8000afc <USART_PeriClockControl>
	USART_Init(pUSARTHandle);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fdf7 	bl	80009b0 <USART_Init>
	*ISER1 |= (1 << (IRQ_USART2 % 32));//enable USART2 NVIC line
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <USART_setup+0x60>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <USART_setup+0x60>)
 8000dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dcc:	6013      	str	r3, [r2, #0]
	pUSARTHandle->pUSARTx->CR1 |= (1U << USART_CR1_RXNEIE);//enable RXNE interrupt
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f042 0220 	orr.w	r2, r2, #32
 8000ddc:	60da      	str	r2, [r3, #12]
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	e000e104 	.word	0xe000e104

08000dec <USART_taredown>:

static void USART_taredown(USART_Handle_t *pUSARTHandle){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	USART_PeripheralControl(pUSARTHandle->pUSARTx, DISABLE);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fe63 	bl	8000ac6 <USART_PeripheralControl>
	USART_PeriClockControl(pUSARTHandle->pUSARTx, DISABLE);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fe78 	bl	8000afc <USART_PeriClockControl>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <jump_to_main>:
static void jump_to_main(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
	typedef void(*voidfun)(void);
	uint32_t verctor_table_entry = FLASH_BASEADRR + BOOTLOADER_SIZE;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <jump_to_main+0x24>)
 8000e1c:	60fb      	str	r3, [r7, #12]
	uint32_t *reset_handler_addr = (uint32_t *)(verctor_table_entry + 4U);//second entry in the table
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3304      	adds	r3, #4
 8000e22:	60bb      	str	r3, [r7, #8]
	voidfun reset_handler = (voidfun)*reset_handler_addr;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	607b      	str	r3, [r7, #4]
	reset_handler();
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4798      	blx	r3
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	08008000 	.word	0x08008000

08000e3c <SysTick_Handler>:

void SysTick_Handler(void){
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	TICKS++;
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Handler+0x18>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <SysTick_Handler+0x18>)
 8000e48:	6013      	str	r3, [r2, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000058 	.word	0x20000058

08000e58 <SysTick_taredown>:

static void SysTick_taredown(void){
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	SysTick ->CSR &= ~(1U << 0);
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SysTick_taredown+0x18>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <SysTick_taredown+0x18>)
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e78:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7e:	490d      	ldr	r1, [pc, #52]	; (8000eb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <LoopForever+0xe>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e94:	4c0a      	ldr	r4, [pc, #40]	; (8000ec0 <LoopForever+0x16>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ea2:	f000 f811 	bl	8000ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea6:	f7ff ff2b 	bl	8000d00 <main>

08000eaa <LoopForever>:

LoopForever:
  b LoopForever
 8000eaa:	e7fe      	b.n	8000eaa <LoopForever>
  ldr   r0, =_estack
 8000eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000eb8:	08000f30 	.word	0x08000f30
  ldr r2, =_sbss
 8000ebc:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000ec0:	2000005c 	.word	0x2000005c

08000ec4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <__libc_init_array>:
 8000ec8:	b570      	push	{r4, r5, r6, lr}
 8000eca:	4d0d      	ldr	r5, [pc, #52]	; (8000f00 <__libc_init_array+0x38>)
 8000ecc:	4c0d      	ldr	r4, [pc, #52]	; (8000f04 <__libc_init_array+0x3c>)
 8000ece:	1b64      	subs	r4, r4, r5
 8000ed0:	10a4      	asrs	r4, r4, #2
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	42a6      	cmp	r6, r4
 8000ed6:	d109      	bne.n	8000eec <__libc_init_array+0x24>
 8000ed8:	4d0b      	ldr	r5, [pc, #44]	; (8000f08 <__libc_init_array+0x40>)
 8000eda:	4c0c      	ldr	r4, [pc, #48]	; (8000f0c <__libc_init_array+0x44>)
 8000edc:	f000 f818 	bl	8000f10 <_init>
 8000ee0:	1b64      	subs	r4, r4, r5
 8000ee2:	10a4      	asrs	r4, r4, #2
 8000ee4:	2600      	movs	r6, #0
 8000ee6:	42a6      	cmp	r6, r4
 8000ee8:	d105      	bne.n	8000ef6 <__libc_init_array+0x2e>
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
 8000eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ef0:	4798      	blx	r3
 8000ef2:	3601      	adds	r6, #1
 8000ef4:	e7ee      	b.n	8000ed4 <__libc_init_array+0xc>
 8000ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000efa:	4798      	blx	r3
 8000efc:	3601      	adds	r6, #1
 8000efe:	e7f2      	b.n	8000ee6 <__libc_init_array+0x1e>
 8000f00:	08000f28 	.word	0x08000f28
 8000f04:	08000f28 	.word	0x08000f28
 8000f08:	08000f28 	.word	0x08000f28
 8000f0c:	08000f2c 	.word	0x08000f2c

08000f10 <_init>:
 8000f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f12:	bf00      	nop
 8000f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f16:	bc08      	pop	{r3}
 8000f18:	469e      	mov	lr, r3
 8000f1a:	4770      	bx	lr

08000f1c <_fini>:
 8000f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1e:	bf00      	nop
 8000f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f22:	bc08      	pop	{r3}
 8000f24:	469e      	mov	lr, r3
 8000f26:	4770      	bx	lr
