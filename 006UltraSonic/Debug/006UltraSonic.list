
006UltraSonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cb0  08000cb8  00010cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cb0  08000cb0  00010cb8  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb0  08000cb0  00010cb8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb0  08000cb8  00010cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000cb8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000cb8  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010cb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001621  00000000  00000000  00010ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000057a  00000000  00000000  00012309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00012888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  000129d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002828  00000000  00000000  00012ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a4c  00000000  00000000  00015308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a0ec  00000000  00000000  00016d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00020e40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000410  00000000  00000000  00020e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000c98 	.word	0x08000c98

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000c98 	.word	0x08000c98

08000204 <systick_init>:
 */
#include "GPIO_driver.h"
#include "bsp.h"
#include "SPI_driver.h"

void systick_init(uint16_t Ticks_PerSecond){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	80fb      	strh	r3, [r7, #6]
SysTick -> CVR = 0x1U;
 800020e:	4b10      	ldr	r3, [pc, #64]	; (8000250 <systick_init+0x4c>)
 8000210:	2201      	movs	r2, #1
 8000212:	609a      	str	r2, [r3, #8]
SysTick ->RVR = SysClock / Ticks_PerSecond;
 8000214:	88fb      	ldrh	r3, [r7, #6]
 8000216:	4a0e      	ldr	r2, [pc, #56]	; (8000250 <systick_init+0x4c>)
 8000218:	490e      	ldr	r1, [pc, #56]	; (8000254 <systick_init+0x50>)
 800021a:	fbb1 f3f3 	udiv	r3, r1, r3
 800021e:	6053      	str	r3, [r2, #4]
SysTick ->CSR |= (1 << 0);
 8000220:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <systick_init+0x4c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <systick_init+0x4c>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]
SysTick ->CSR |= (1 << 1);
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <systick_init+0x4c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <systick_init+0x4c>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	6013      	str	r3, [r2, #0]
SysTick ->CSR |= (1 << 2);
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <systick_init+0x4c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a04      	ldr	r2, [pc, #16]	; (8000250 <systick_init+0x4c>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e010 	.word	0xe000e010
 8000254:	00f42400 	.word	0x00f42400

08000258 <delay>:
	  SW.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	  GPIO_CLKCNT(SW.pGPIOx, ENABLE);
	  GPIO_Init(&SW);
}

void delay(uint32_t ms){
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < (ms * (SysClock / 1000)); i++){
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	e002      	b.n	800026c <delay+0x14>
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	3301      	adds	r3, #1
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000272:	fb02 f303 	mul.w	r3, r2, r3
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	429a      	cmp	r2, r3
 800027a:	d3f4      	bcc.n	8000266 <delay+0xe>
		;
	}
}
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
	...

0800028c <GPIO_CLKCNT>:
 *
 * @Note              -  none

 */
void GPIO_CLKCNT(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000298:	78fb      	ldrb	r3, [r7, #3]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d157      	bne.n	800034e <GPIO_CLKCNT+0xc2>
	{
	  if(pGPIOx == GPIOA){GPIOA_CLKEN;}
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a59      	ldr	r2, [pc, #356]	; (8000408 <GPIO_CLKCNT+0x17c>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d106      	bne.n	80002b4 <GPIO_CLKCNT+0x28>
 80002a6:	4b59      	ldr	r3, [pc, #356]	; (800040c <GPIO_CLKCNT+0x180>)
 80002a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002aa:	4a58      	ldr	r2, [pc, #352]	; (800040c <GPIO_CLKCNT+0x180>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6313      	str	r3, [r2, #48]	; 0x30
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
	}
}
 80002b2:	e0a3      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKEN;}
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a56      	ldr	r2, [pc, #344]	; (8000410 <GPIO_CLKCNT+0x184>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d106      	bne.n	80002ca <GPIO_CLKCNT+0x3e>
 80002bc:	4b53      	ldr	r3, [pc, #332]	; (800040c <GPIO_CLKCNT+0x180>)
 80002be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c0:	4a52      	ldr	r2, [pc, #328]	; (800040c <GPIO_CLKCNT+0x180>)
 80002c2:	f043 0302 	orr.w	r3, r3, #2
 80002c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c8:	e098      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKEN;}
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a51      	ldr	r2, [pc, #324]	; (8000414 <GPIO_CLKCNT+0x188>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_CLKCNT+0x54>
 80002d2:	4b4e      	ldr	r3, [pc, #312]	; (800040c <GPIO_CLKCNT+0x180>)
 80002d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d6:	4a4d      	ldr	r2, [pc, #308]	; (800040c <GPIO_CLKCNT+0x180>)
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002de:	e08d      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKEN;}
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a4d      	ldr	r2, [pc, #308]	; (8000418 <GPIO_CLKCNT+0x18c>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_CLKCNT+0x6a>
 80002e8:	4b48      	ldr	r3, [pc, #288]	; (800040c <GPIO_CLKCNT+0x180>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ec:	4a47      	ldr	r2, [pc, #284]	; (800040c <GPIO_CLKCNT+0x180>)
 80002ee:	f043 0308 	orr.w	r3, r3, #8
 80002f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f4:	e082      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKEN;}
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a48      	ldr	r2, [pc, #288]	; (800041c <GPIO_CLKCNT+0x190>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_CLKCNT+0x80>
 80002fe:	4b43      	ldr	r3, [pc, #268]	; (800040c <GPIO_CLKCNT+0x180>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	4a42      	ldr	r2, [pc, #264]	; (800040c <GPIO_CLKCNT+0x180>)
 8000304:	f043 0310 	orr.w	r3, r3, #16
 8000308:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030a:	e077      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKEN;}
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a44      	ldr	r2, [pc, #272]	; (8000420 <GPIO_CLKCNT+0x194>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_CLKCNT+0x96>
 8000314:	4b3d      	ldr	r3, [pc, #244]	; (800040c <GPIO_CLKCNT+0x180>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000318:	4a3c      	ldr	r2, [pc, #240]	; (800040c <GPIO_CLKCNT+0x180>)
 800031a:	f043 0320 	orr.w	r3, r3, #32
 800031e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000320:	e06c      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKEN;}
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a3f      	ldr	r2, [pc, #252]	; (8000424 <GPIO_CLKCNT+0x198>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_CLKCNT+0xac>
 800032a:	4b38      	ldr	r3, [pc, #224]	; (800040c <GPIO_CLKCNT+0x180>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a37      	ldr	r2, [pc, #220]	; (800040c <GPIO_CLKCNT+0x180>)
 8000330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000336:	e061      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKEN;}
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a3b      	ldr	r2, [pc, #236]	; (8000428 <GPIO_CLKCNT+0x19c>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d15d      	bne.n	80003fc <GPIO_CLKCNT+0x170>
 8000340:	4b32      	ldr	r3, [pc, #200]	; (800040c <GPIO_CLKCNT+0x180>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a31      	ldr	r2, [pc, #196]	; (800040c <GPIO_CLKCNT+0x180>)
 8000346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	e056      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  if(pGPIOx == GPIOA){GPIOA_CLKDI;}
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <GPIO_CLKCNT+0x17c>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_CLKCNT+0xd8>
 8000356:	4b2d      	ldr	r3, [pc, #180]	; (800040c <GPIO_CLKCNT+0x180>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	4a2c      	ldr	r2, [pc, #176]	; (800040c <GPIO_CLKCNT+0x180>)
 800035c:	f023 0301 	bic.w	r3, r3, #1
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000362:	e04b      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKDI;}
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <GPIO_CLKCNT+0x184>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_CLKCNT+0xee>
 800036c:	4b27      	ldr	r3, [pc, #156]	; (800040c <GPIO_CLKCNT+0x180>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a26      	ldr	r2, [pc, #152]	; (800040c <GPIO_CLKCNT+0x180>)
 8000372:	f023 0302 	bic.w	r3, r3, #2
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000378:	e040      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKDI;}
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a25      	ldr	r2, [pc, #148]	; (8000414 <GPIO_CLKCNT+0x188>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_CLKCNT+0x104>
 8000382:	4b22      	ldr	r3, [pc, #136]	; (800040c <GPIO_CLKCNT+0x180>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a21      	ldr	r2, [pc, #132]	; (800040c <GPIO_CLKCNT+0x180>)
 8000388:	f023 0304 	bic.w	r3, r3, #4
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038e:	e035      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKDI;}
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a21      	ldr	r2, [pc, #132]	; (8000418 <GPIO_CLKCNT+0x18c>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_CLKCNT+0x11a>
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <GPIO_CLKCNT+0x180>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a1b      	ldr	r2, [pc, #108]	; (800040c <GPIO_CLKCNT+0x180>)
 800039e:	f023 0308 	bic.w	r3, r3, #8
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e02a      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a1c      	ldr	r2, [pc, #112]	; (800041c <GPIO_CLKCNT+0x190>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_CLKCNT+0x130>
 80003ae:	4b17      	ldr	r3, [pc, #92]	; (800040c <GPIO_CLKCNT+0x180>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a16      	ldr	r2, [pc, #88]	; (800040c <GPIO_CLKCNT+0x180>)
 80003b4:	f023 0310 	bic.w	r3, r3, #16
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e01f      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a18      	ldr	r2, [pc, #96]	; (8000420 <GPIO_CLKCNT+0x194>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_CLKCNT+0x146>
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <GPIO_CLKCNT+0x180>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a10      	ldr	r2, [pc, #64]	; (800040c <GPIO_CLKCNT+0x180>)
 80003ca:	f023 0320 	bic.w	r3, r3, #32
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e014      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a13      	ldr	r2, [pc, #76]	; (8000424 <GPIO_CLKCNT+0x198>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_CLKCNT+0x15c>
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <GPIO_CLKCNT+0x180>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a0b      	ldr	r2, [pc, #44]	; (800040c <GPIO_CLKCNT+0x180>)
 80003e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e009      	b.n	80003fc <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a0f      	ldr	r2, [pc, #60]	; (8000428 <GPIO_CLKCNT+0x19c>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d105      	bne.n	80003fc <GPIO_CLKCNT+0x170>
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <GPIO_CLKCNT+0x180>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a05      	ldr	r2, [pc, #20]	; (800040c <GPIO_CLKCNT+0x180>)
 80003f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40020000 	.word	0x40020000
 800040c:	40023800 	.word	0x40023800
 8000410:	40020400 	.word	0x40020400
 8000414:	40020800 	.word	0x40020800
 8000418:	40020c00 	.word	0x40020c00
 800041c:	40021000 	.word	0x40021000
 8000420:	40021400 	.word	0x40021400
 8000424:	40021800 	.word	0x40021800
 8000428:	40021c00 	.word	0x40021c00

0800042c <GPIO_PORTCODE>:
 * @return            - the code of the given port
 *
 * @Note              -

 */
static uint8_t GPIO_PORTCODE(GPIO_RegDef_t *pGPIOx){
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	uint8_t volatile portcode;
	uint32_t offset = (uint32_t)((uint32_t)pGPIOx - GPIOA_BASEADDR); /*calculate the offset from the base address*/
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 800043a:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800043e:	60fb      	str	r3, [r7, #12]
	portcode = offset / 0x400;   /*portcode will range from 0 to 8 since the offset is a multiply of 400*/
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	0a9b      	lsrs	r3, r3, #10
 8000444:	b2db      	uxtb	r3, r3
 8000446:	72fb      	strb	r3, [r7, #11]
	return portcode;
 8000448:	7afb      	ldrb	r3, [r7, #11]
 800044a:	b2db      	uxtb	r3, r3
}
 800044c:	4618      	mov	r0, r3
 800044e:	3714      	adds	r7, #20
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	795b      	ldrb	r3, [r3, #5]
 8000468:	2b03      	cmp	r3, #3
 800046a:	d820      	bhi.n	80004ae <GPIO_Init+0x56>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	795b      	ldrb	r3, [r3, #5]
 8000470:	461a      	mov	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	2103      	movs	r1, #3
 800048c:	fa01 f303 	lsl.w	r3, r1, r3
 8000490:	43db      	mvns	r3, r3
 8000492:	4619      	mov	r1, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	400a      	ands	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	6819      	ldr	r1, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	697a      	ldr	r2, [r7, #20]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	e084      	b.n	80005b8 <GPIO_Init+0x160>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	795b      	ldrb	r3, [r3, #5]
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d11d      	bne.n	80004f2 <GPIO_Init+0x9a>
			/*configure the falling edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	6812      	ldr	r2, [r2, #0]
 80004c0:	601a      	str	r2, [r3, #0]
			EXTI ->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c2:	4b89      	ldr	r3, [pc, #548]	; (80006e8 <GPIO_Init+0x290>)
 80004c4:	689b      	ldr	r3, [r3, #8]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	7912      	ldrb	r2, [r2, #4]
 80004ca:	4611      	mov	r1, r2
 80004cc:	2201      	movs	r2, #1
 80004ce:	408a      	lsls	r2, r1
 80004d0:	43d2      	mvns	r2, r2
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a84      	ldr	r2, [pc, #528]	; (80006e8 <GPIO_Init+0x290>)
 80004d6:	400b      	ands	r3, r1
 80004d8:	6093      	str	r3, [r2, #8]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004da:	4b83      	ldr	r3, [pc, #524]	; (80006e8 <GPIO_Init+0x290>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	7912      	ldrb	r2, [r2, #4]
 80004e2:	4611      	mov	r1, r2
 80004e4:	2201      	movs	r2, #1
 80004e6:	408a      	lsls	r2, r1
 80004e8:	4611      	mov	r1, r2
 80004ea:	4a7f      	ldr	r2, [pc, #508]	; (80006e8 <GPIO_Init+0x290>)
 80004ec:	430b      	orrs	r3, r1
 80004ee:	60d3      	str	r3, [r2, #12]
 80004f0:	e03d      	b.n	800056e <GPIO_Init+0x116>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	795b      	ldrb	r3, [r3, #5]
 80004f6:	2b05      	cmp	r3, #5
 80004f8:	d11d      	bne.n	8000536 <GPIO_Init+0xde>
			/*configure the rising edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000506:	4b78      	ldr	r3, [pc, #480]	; (80006e8 <GPIO_Init+0x290>)
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	7912      	ldrb	r2, [r2, #4]
 800050e:	4611      	mov	r1, r2
 8000510:	2201      	movs	r2, #1
 8000512:	408a      	lsls	r2, r1
 8000514:	43d2      	mvns	r2, r2
 8000516:	4611      	mov	r1, r2
 8000518:	4a73      	ldr	r2, [pc, #460]	; (80006e8 <GPIO_Init+0x290>)
 800051a:	400b      	ands	r3, r1
 800051c:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051e:	4b72      	ldr	r3, [pc, #456]	; (80006e8 <GPIO_Init+0x290>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	7912      	ldrb	r2, [r2, #4]
 8000526:	4611      	mov	r1, r2
 8000528:	2201      	movs	r2, #1
 800052a:	408a      	lsls	r2, r1
 800052c:	4611      	mov	r1, r2
 800052e:	4a6e      	ldr	r2, [pc, #440]	; (80006e8 <GPIO_Init+0x290>)
 8000530:	430b      	orrs	r3, r1
 8000532:	6093      	str	r3, [r2, #8]
 8000534:	e01b      	b.n	800056e <GPIO_Init+0x116>
		}
		else{
			/*configure the falling and rising edge trigger registers*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6812      	ldr	r2, [r2, #0]
 8000540:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000542:	4b69      	ldr	r3, [pc, #420]	; (80006e8 <GPIO_Init+0x290>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	7912      	ldrb	r2, [r2, #4]
 800054a:	4611      	mov	r1, r2
 800054c:	2201      	movs	r2, #1
 800054e:	408a      	lsls	r2, r1
 8000550:	4611      	mov	r1, r2
 8000552:	4a65      	ldr	r2, [pc, #404]	; (80006e8 <GPIO_Init+0x290>)
 8000554:	430b      	orrs	r3, r1
 8000556:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000558:	4b63      	ldr	r3, [pc, #396]	; (80006e8 <GPIO_Init+0x290>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	4611      	mov	r1, r2
 8000568:	4a5f      	ldr	r2, [pc, #380]	; (80006e8 <GPIO_Init+0x290>)
 800056a:	430b      	orrs	r3, r1
 800056c:	6093      	str	r3, [r2, #8]
		}

		/*configure the gpio port selection(SYSCONFIG_EXTI register)*/
		uint8_t tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;  /*which EXTICR to configure*/
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	089b      	lsrs	r3, r3, #2
 8000574:	74fb      	strb	r3, [r7, #19]
		uint8_t tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;  /*which Field of the EXTICR to configure*/
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	f003 0303 	and.w	r3, r3, #3
 800057e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_PORTCODE(pGPIOHandle->pGPIOx);          /*the code that represents the port whoes pin is goning to trigger the interrupt*/
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff51 	bl	800042c <GPIO_PORTCODE>
 800058a:	4603      	mov	r3, r0
 800058c:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[tmp1] = (portcode << tmp2 * 4);                  /*every field is four bits wide so  we multiply by 4*/
 800058e:	7c7a      	ldrb	r2, [r7, #17]
 8000590:	7cbb      	ldrb	r3, [r7, #18]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	fa02 f103 	lsl.w	r1, r2, r3
 8000598:	4a54      	ldr	r2, [pc, #336]	; (80006ec <GPIO_Init+0x294>)
 800059a:	7cfb      	ldrb	r3, [r7, #19]
 800059c:	3302      	adds	r3, #2
 800059e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/*configure the exti interrupt delivery(interrupt mask register)*/
		EXTI ->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a2:	4b51      	ldr	r3, [pc, #324]	; (80006e8 <GPIO_Init+0x290>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	7912      	ldrb	r2, [r2, #4]
 80005aa:	4611      	mov	r1, r2
 80005ac:	2201      	movs	r2, #1
 80005ae:	408a      	lsls	r2, r1
 80005b0:	4611      	mov	r1, r2
 80005b2:	4a4d      	ldr	r2, [pc, #308]	; (80006e8 <GPIO_Init+0x290>)
 80005b4:	430b      	orrs	r3, r1
 80005b6:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	799b      	ldrb	r3, [r3, #6]
 80005bc:	461a      	mov	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	2103      	movs	r1, #3
 80005d8:	fa01 f303 	lsl.w	r3, r1, r3
 80005dc:	43db      	mvns	r3, r3
 80005de:	4619      	mov	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	400a      	ands	r2, r1
 80005e6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6899      	ldr	r1, [r3, #8]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	697a      	ldr	r2, [r7, #20]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	79db      	ldrb	r3, [r3, #7]
 80005fc:	461a      	mov	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68da      	ldr	r2, [r3, #12]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	2103      	movs	r1, #3
 8000618:	fa01 f303 	lsl.w	r3, r1, r3
 800061c:	43db      	mvns	r3, r3
 800061e:	4619      	mov	r1, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	400a      	ands	r2, r1
 8000626:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	68d9      	ldr	r1, [r3, #12]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	430a      	orrs	r2, r1
 8000636:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	7a1b      	ldrb	r3, [r3, #8]
 800063c:	461a      	mov	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	685a      	ldr	r2, [r3, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	4619      	mov	r1, r3
 8000654:	2301      	movs	r3, #1
 8000656:	408b      	lsls	r3, r1
 8000658:	43db      	mvns	r3, r3
 800065a:	4619      	mov	r1, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	400a      	ands	r2, r1
 8000662:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6859      	ldr	r1, [r3, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	697a      	ldr	r2, [r7, #20]
 8000670:	430a      	orrs	r2, r1
 8000672:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	795b      	ldrb	r3, [r3, #5]
 8000678:	2b02      	cmp	r3, #2
 800067a:	d131      	bne.n	80006e0 <GPIO_Init+0x288>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	791b      	ldrb	r3, [r3, #4]
 8000680:	08db      	lsrs	r3, r3, #3
 8000682:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	f003 0307 	and.w	r3, r3, #7
 800068c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	7c3a      	ldrb	r2, [r7, #16]
 8000694:	3208      	adds	r2, #8
 8000696:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	220f      	movs	r2, #15
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	43db      	mvns	r3, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	7c3a      	ldrb	r2, [r7, #16]
 80006ae:	4001      	ands	r1, r0
 80006b0:	3208      	adds	r2, #8
 80006b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	7c3a      	ldrb	r2, [r7, #16]
 80006bc:	3208      	adds	r2, #8
 80006be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	7a5b      	ldrb	r3, [r3, #9]
 80006c6:	461a      	mov	r2, r3
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7c3a      	ldrb	r2, [r7, #16]
 80006d8:	4301      	orrs	r1, r0
 80006da:	3208      	adds	r2, #8
 80006dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40013c00 	.word	0x40013c00
 80006ec:	40013800 	.word	0x40013800

080006f0 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	691a      	ldr	r2, [r3, #16]
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	fa22 f303 	lsr.w	r3, r2, r3
 8000706:	b2db      	uxtb	r3, r3
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]

   return value;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <GPIO_ToggleOutputPin>:
 *
 * @Note              -

 */
inline void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	78fa      	ldrb	r2, [r7, #3]
 800072e:	2101      	movs	r1, #1
 8000730:	fa01 f202 	lsl.w	r2, r1, r2
 8000734:	405a      	eors	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	615a      	str	r2, [r3, #20]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <GPIO_IRQInterruptConfig>:
 *
 * @Note              -

 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	460a      	mov	r2, r1
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	71bb      	strb	r3, [r7, #6]
if(EnorDi == ENABLE){
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d133      	bne.n	80007c6 <GPIO_IRQInterruptConfig+0x7e>
	if(IRQNumber <= 31){
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b1f      	cmp	r3, #31
 8000762:	d80a      	bhi.n	800077a <GPIO_IRQInterruptConfig+0x32>
		/*configure ISER0*/
		*ISER0 |= (1 << IRQNumber);
 8000764:	4b35      	ldr	r3, [pc, #212]	; (800083c <GPIO_IRQInterruptConfig+0xf4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f202 	lsl.w	r2, r1, r2
 8000770:	4611      	mov	r1, r2
 8000772:	4a32      	ldr	r2, [pc, #200]	; (800083c <GPIO_IRQInterruptConfig+0xf4>)
 8000774:	430b      	orrs	r3, r1
 8000776:	6013      	str	r3, [r2, #0]
		*ICER1 |= (1 << (IRQNumber % 32));
	}else if(IRQNumber >= 64 && IRQNumber < 96){
		*ICER2 |= (1 << (IRQNumber % 64));
	}
}
}
 8000778:	e059      	b.n	800082e <GPIO_IRQInterruptConfig+0xe6>
	}else if(IRQNumber >= 32 && IRQNumber < 64){
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b1f      	cmp	r3, #31
 800077e:	d90f      	bls.n	80007a0 <GPIO_IRQInterruptConfig+0x58>
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b3f      	cmp	r3, #63	; 0x3f
 8000784:	d80c      	bhi.n	80007a0 <GPIO_IRQInterruptConfig+0x58>
		*ISER1 |= (1 << (IRQNumber % 32));
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <GPIO_IRQInterruptConfig+0xf8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	79fa      	ldrb	r2, [r7, #7]
 800078c:	f002 021f 	and.w	r2, r2, #31
 8000790:	2101      	movs	r1, #1
 8000792:	fa01 f202 	lsl.w	r2, r1, r2
 8000796:	4611      	mov	r1, r2
 8000798:	4a29      	ldr	r2, [pc, #164]	; (8000840 <GPIO_IRQInterruptConfig+0xf8>)
 800079a:	430b      	orrs	r3, r1
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	e046      	b.n	800082e <GPIO_IRQInterruptConfig+0xe6>
	}else if(IRQNumber >= 64 && IRQNumber < 96){
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b3f      	cmp	r3, #63	; 0x3f
 80007a4:	d943      	bls.n	800082e <GPIO_IRQInterruptConfig+0xe6>
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b5f      	cmp	r3, #95	; 0x5f
 80007aa:	d840      	bhi.n	800082e <GPIO_IRQInterruptConfig+0xe6>
		*ISER2 |= (1 << (IRQNumber % 64));
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <GPIO_IRQInterruptConfig+0xfc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	79fa      	ldrb	r2, [r7, #7]
 80007b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007b6:	2101      	movs	r1, #1
 80007b8:	fa01 f202 	lsl.w	r2, r1, r2
 80007bc:	4611      	mov	r1, r2
 80007be:	4a21      	ldr	r2, [pc, #132]	; (8000844 <GPIO_IRQInterruptConfig+0xfc>)
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	e033      	b.n	800082e <GPIO_IRQInterruptConfig+0xe6>
	if(IRQNumber <= 31){
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b1f      	cmp	r3, #31
 80007ca:	d80a      	bhi.n	80007e2 <GPIO_IRQInterruptConfig+0x9a>
		*ICER0 |= (1 << IRQNumber);
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <GPIO_IRQInterruptConfig+0x100>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	2101      	movs	r1, #1
 80007d4:	fa01 f202 	lsl.w	r2, r1, r2
 80007d8:	4611      	mov	r1, r2
 80007da:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <GPIO_IRQInterruptConfig+0x100>)
 80007dc:	430b      	orrs	r3, r1
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	e025      	b.n	800082e <GPIO_IRQInterruptConfig+0xe6>
	}else if(IRQNumber >= 32 && IRQNumber < 64){
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b1f      	cmp	r3, #31
 80007e6:	d90f      	bls.n	8000808 <GPIO_IRQInterruptConfig+0xc0>
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b3f      	cmp	r3, #63	; 0x3f
 80007ec:	d80c      	bhi.n	8000808 <GPIO_IRQInterruptConfig+0xc0>
		*ICER1 |= (1 << (IRQNumber % 32));
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <GPIO_IRQInterruptConfig+0x104>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	f002 021f 	and.w	r2, r2, #31
 80007f8:	2101      	movs	r1, #1
 80007fa:	fa01 f202 	lsl.w	r2, r1, r2
 80007fe:	4611      	mov	r1, r2
 8000800:	4a12      	ldr	r2, [pc, #72]	; (800084c <GPIO_IRQInterruptConfig+0x104>)
 8000802:	430b      	orrs	r3, r1
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	e012      	b.n	800082e <GPIO_IRQInterruptConfig+0xe6>
	}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b3f      	cmp	r3, #63	; 0x3f
 800080c:	d90f      	bls.n	800082e <GPIO_IRQInterruptConfig+0xe6>
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b5f      	cmp	r3, #95	; 0x5f
 8000812:	d80c      	bhi.n	800082e <GPIO_IRQInterruptConfig+0xe6>
		*ICER2 |= (1 << (IRQNumber % 64));
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <GPIO_IRQInterruptConfig+0x108>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800081e:	2101      	movs	r1, #1
 8000820:	fa01 f202 	lsl.w	r2, r1, r2
 8000824:	4611      	mov	r1, r2
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <GPIO_IRQInterruptConfig+0x108>)
 8000828:	430b      	orrs	r3, r1
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	e7ff      	b.n	800082e <GPIO_IRQInterruptConfig+0xe6>
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000e104 	.word	0xe000e104
 8000844:	e000e108 	.word	0xe000e108
 8000848:	e000e180 	.word	0xe000e180
 800084c:	e000e184 	.word	0xe000e184
 8000850:	e000e188 	.word	0xe000e188

08000854 <GPIO_IRQPriorityConfig>:
 *
 * @Note              -

 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	089b      	lsrs	r3, r3, #2
 8000864:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 0303 	and.w	r3, r3, #3
 800086c:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_ammount = (8 * iprx_section) + (8 - NO_PI_BITS_IMPLEMENTED);
 800086e:	7bbb      	ldrb	r3, [r7, #14]
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	3304      	adds	r3, #4
 8000876:	737b      	strb	r3, [r7, #13]
	*(IPR_BASEADDR + (iprx * 4)) |= (IRQPriority << shift_ammount);
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000880:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000884:	6819      	ldr	r1, [r3, #0]
 8000886:	7b7b      	ldrb	r3, [r7, #13]
 8000888:	683a      	ldr	r2, [r7, #0]
 800088a:	409a      	lsls	r2, r3
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000894:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000898:	430a      	orrs	r2, r1
 800089a:	601a      	str	r2, [r3, #0]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <TimerStart>:
 *      Author: Sayed
 */

#include "Timer_Driver.h"

void TimerStart(BasicTimer_type *pTIMx,uint8_t EnorDi){
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d106      	bne.n	80008c8 <TimerStart+0x20>
		pTIMx->CR1 |= (1 << TIM_CR1_CEN);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f043 0201 	orr.w	r2, r3, #1
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	601a      	str	r2, [r3, #0]
	}
	else{
		pTIMx->CR1 &= ~(1 << TIM_CR1_CEN);
	}
}
 80008c6:	e005      	b.n	80008d4 <TimerStart+0x2c>
		pTIMx->CR1 &= ~(1 << TIM_CR1_CEN);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f023 0201 	bic.w	r2, r3, #1
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <TimerClkEnable>:

static void TimerClkEnable(BasicTimer_type *pTIMx, uint8_t EnorDi){
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d115      	bne.n	800091e <TimerClkEnable+0x3e>
		if(pTIMx == TIM6){TIM6_CLKEN();}
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <TimerClkEnable+0x74>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d106      	bne.n	8000908 <TimerClkEnable+0x28>
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <TimerClkEnable+0x78>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <TimerClkEnable+0x78>)
 8000900:	f043 0310 	orr.w	r3, r3, #16
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pTIMx == TIM7){TIM7_CLKEN();}
	}else{
		if(pTIMx == TIM6){TIM6_CLKDI();}
		else if(pTIMx == TIM7){TIM7_CLKDI();}
	}
}
 8000906:	e01f      	b.n	8000948 <TimerClkEnable+0x68>
		else if(pTIMx == TIM7){TIM7_CLKEN();}
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <TimerClkEnable+0x7c>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d11b      	bne.n	8000948 <TimerClkEnable+0x68>
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <TimerClkEnable+0x78>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a10      	ldr	r2, [pc, #64]	; (8000958 <TimerClkEnable+0x78>)
 8000916:	f043 0320 	orr.w	r3, r3, #32
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800091c:	e014      	b.n	8000948 <TimerClkEnable+0x68>
		if(pTIMx == TIM6){TIM6_CLKDI();}
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <TimerClkEnable+0x74>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d106      	bne.n	8000934 <TimerClkEnable+0x54>
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <TimerClkEnable+0x78>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <TimerClkEnable+0x78>)
 800092c:	f023 0310 	bic.w	r3, r3, #16
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000932:	e009      	b.n	8000948 <TimerClkEnable+0x68>
		else if(pTIMx == TIM7){TIM7_CLKDI();}
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a09      	ldr	r2, [pc, #36]	; (800095c <TimerClkEnable+0x7c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d105      	bne.n	8000948 <TimerClkEnable+0x68>
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <TimerClkEnable+0x78>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a05      	ldr	r2, [pc, #20]	; (8000958 <TimerClkEnable+0x78>)
 8000942:	f023 0320 	bic.w	r3, r3, #32
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40001000 	.word	0x40001000
 8000958:	40023800 	.word	0x40023800
 800095c:	40001400 	.word	0x40001400

08000960 <BasicTimerInit>:

void BasicTimerInit(BasicTimer_Handle_t *pTimerHandle){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	/*Enable the clock for the Timer*/
	TimerClkEnable(pTimerHandle->pTIMx, ENABLE);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ffb6 	bl	80008e0 <TimerClkEnable>

	/*set the auto reload value*/
	pTimerHandle->pTIMx->ARR = pTimerHandle->config.AutoReloadVal;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	889a      	ldrh	r2, [r3, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c

	/*set the Prescaler Value*/
	pTimerHandle->pTIMx->PSC = pTimerHandle->config.PreScalerVal;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	88da      	ldrh	r2, [r3, #6]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	629a      	str	r2, [r3, #40]	; 0x28

	/*Enable the auto reload register*/
	pTimerHandle->pTIMx->CR1 |= (1 << TIM_CR1_ARPE);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000996:	601a      	str	r2, [r3, #0]

	/*Enable interrupts*/
	if(pTimerHandle->config.InterruptEnorDi == ENABLE){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7a1b      	ldrb	r3, [r3, #8]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d107      	bne.n	80009b0 <BasicTimerInit+0x50>
		pTimerHandle->pTIMx->DIER |= (1 << TIM_DIER_UIE);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f042 0201 	orr.w	r2, r2, #1
 80009ae:	60da      	str	r2, [r3, #12]
	}
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <main>:
BasicTimer_Handle_t Timer1, Timer2;
uint16_t timer2_Ticks;
const uint32_t Ticks = 1U;
float distance;
const float speedOfSound = 0.0343/2;
int main(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
/*configuration starts here*/
	/*configure the echo pin*/
	Echo.pGPIOx = GPIOA;
 80009bc:	4b46      	ldr	r3, [pc, #280]	; (8000ad8 <main+0x120>)
 80009be:	4a47      	ldr	r2, [pc, #284]	; (8000adc <main+0x124>)
 80009c0:	601a      	str	r2, [r3, #0]
	Echo.GPIO_PinConfig.GPIO_PinNumber =  GPIO_PIN_NO_8;
 80009c2:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <main+0x120>)
 80009c4:	2208      	movs	r2, #8
 80009c6:	711a      	strb	r2, [r3, #4]
	Echo.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_IT_RFT;
 80009c8:	4b43      	ldr	r3, [pc, #268]	; (8000ad8 <main+0x120>)
 80009ca:	2206      	movs	r2, #6
 80009cc:	715a      	strb	r2, [r3, #5]
	Echo.GPIO_PinConfig.GPIO_PinSpeed  =  GPIO_SPEED_FAST;
 80009ce:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <main+0x120>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	719a      	strb	r2, [r3, #6]
	Echo.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80009d4:	4b40      	ldr	r3, [pc, #256]	; (8000ad8 <main+0x120>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	721a      	strb	r2, [r3, #8]
	Echo.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 80009da:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <main+0x120>)
 80009dc:	2200      	movs	r2, #0
 80009de:	71da      	strb	r2, [r3, #7]

	/*configure the Trigg Pin*/
	Trigg.pGPIOx = GPIOA;
 80009e0:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <main+0x128>)
 80009e2:	4a3e      	ldr	r2, [pc, #248]	; (8000adc <main+0x124>)
 80009e4:	601a      	str	r2, [r3, #0]
	Trigg.GPIO_PinConfig.GPIO_PinNumber =  GPIO_PIN_NO_9;
 80009e6:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <main+0x128>)
 80009e8:	2209      	movs	r2, #9
 80009ea:	711a      	strb	r2, [r3, #4]
	Trigg.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_OUT;
 80009ec:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <main+0x128>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	715a      	strb	r2, [r3, #5]
	Trigg.GPIO_PinConfig.GPIO_PinSpeed  =  GPIO_SPEED_FAST;
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <main+0x128>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	719a      	strb	r2, [r3, #6]
	Trigg.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80009f8:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <main+0x128>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	721a      	strb	r2, [r3, #8]
	Trigg.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <main+0x128>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	71da      	strb	r2, [r3, #7]

	/*configure the LED pin*/
	LED.pGPIOx = GPIOA;
 8000a04:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <main+0x12c>)
 8000a06:	4a35      	ldr	r2, [pc, #212]	; (8000adc <main+0x124>)
 8000a08:	601a      	str	r2, [r3, #0]
	LED.GPIO_PinConfig.GPIO_PinNumber =  GPIO_PIN_NO_5;
 8000a0a:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <main+0x12c>)
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	711a      	strb	r2, [r3, #4]
	LED.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_OUT;
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <main+0x12c>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	715a      	strb	r2, [r3, #5]
	LED.GPIO_PinConfig.GPIO_PinSpeed  =  GPIO_SPEED_FAST;
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <main+0x12c>)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	719a      	strb	r2, [r3, #6]
	LED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <main+0x12c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	721a      	strb	r2, [r3, #8]
	LED.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 8000a22:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <main+0x12c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	71da      	strb	r2, [r3, #7]

	/*configure timer1*/
	Timer1.pTIMx = TIM6;
 8000a28:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <main+0x130>)
 8000a2a:	4a30      	ldr	r2, [pc, #192]	; (8000aec <main+0x134>)
 8000a2c:	601a      	str	r2, [r3, #0]
	Timer1.config.InterruptEnorDi = ENABLE;
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <main+0x130>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	721a      	strb	r2, [r3, #8]
	Timer1.config.PreScalerVal = 15U;
 8000a34:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <main+0x130>)
 8000a36:	220f      	movs	r2, #15
 8000a38:	80da      	strh	r2, [r3, #6]
	Timer1.config.AutoReloadVal = 9U;
 8000a3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <main+0x130>)
 8000a3c:	2209      	movs	r2, #9
 8000a3e:	809a      	strh	r2, [r3, #4]

	/*configure timer2*/
	Timer2.pTIMx = TIM7;
 8000a40:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <main+0x138>)
 8000a42:	4a2c      	ldr	r2, [pc, #176]	; (8000af4 <main+0x13c>)
 8000a44:	601a      	str	r2, [r3, #0]
	Timer2.config.AutoReloadVal = MAX_DISTANCE_TIME;
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <main+0x138>)
 8000a48:	f642 52f5 	movw	r2, #11765	; 0x2df5
 8000a4c:	809a      	strh	r2, [r3, #4]
	Timer2.config.PreScalerVal  = 15U;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <main+0x138>)
 8000a50:	220f      	movs	r2, #15
 8000a52:	80da      	strh	r2, [r3, #6]

/*Configuration ends here*/

/*Initialization starts here*/
	/*initialize the Pins*/
	GPIO_CLKCNT(GPIOA,ENABLE);
 8000a54:	2101      	movs	r1, #1
 8000a56:	4821      	ldr	r0, [pc, #132]	; (8000adc <main+0x124>)
 8000a58:	f7ff fc18 	bl	800028c <GPIO_CLKCNT>
	GPIO_Init(&Echo);
 8000a5c:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <main+0x120>)
 8000a5e:	f7ff fcfb 	bl	8000458 <GPIO_Init>
	GPIO_Init(&Trigg);
 8000a62:	481f      	ldr	r0, [pc, #124]	; (8000ae0 <main+0x128>)
 8000a64:	f7ff fcf8 	bl	8000458 <GPIO_Init>
	GPIO_Init(&LED);
 8000a68:	481e      	ldr	r0, [pc, #120]	; (8000ae4 <main+0x12c>)
 8000a6a:	f7ff fcf5 	bl	8000458 <GPIO_Init>

	/*initialize the Timer*/
	BasicTimerInit(&Timer1);
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <main+0x130>)
 8000a70:	f7ff ff76 	bl	8000960 <BasicTimerInit>
	BasicTimerInit(&Timer2);
 8000a74:	481e      	ldr	r0, [pc, #120]	; (8000af0 <main+0x138>)
 8000a76:	f7ff ff73 	bl	8000960 <BasicTimerInit>

	/*initialize SysTick*/
	systick_init(Ticks);
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fbc0 	bl	8000204 <systick_init>

	/*initializing interrupts for Timer1, Timer2 and Echo pin*/
	GPIO_IRQInterruptConfig(IRQ_TIM6_DAC, ENABLE);
 8000a84:	2101      	movs	r1, #1
 8000a86:	2036      	movs	r0, #54	; 0x36
 8000a88:	f7ff fe5e 	bl	8000748 <GPIO_IRQInterruptConfig>
	GPIO_IRQInterruptConfig(IRQ_TIM7, ENABLE);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	2037      	movs	r0, #55	; 0x37
 8000a90:	f7ff fe5a 	bl	8000748 <GPIO_IRQInterruptConfig>
	GPIO_IRQInterruptConfig(IRQ_EXTI5_9, ENABLE);
 8000a94:	2101      	movs	r1, #1
 8000a96:	2017      	movs	r0, #23
 8000a98:	f7ff fe56 	bl	8000748 <GPIO_IRQInterruptConfig>
/*Initialization ends here*/

	GPIO_IRQPriorityConfig(IRQ_TIM6_DAC, 1);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	2036      	movs	r0, #54	; 0x36
 8000aa0:	f7ff fed8 	bl	8000854 <GPIO_IRQPriorityConfig>
	GPIO_IRQPriorityConfig(IRQ_TIM7, 2);
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	2037      	movs	r0, #55	; 0x37
 8000aa8:	f7ff fed4 	bl	8000854 <GPIO_IRQPriorityConfig>
	GPIO_IRQPriorityConfig(IRQ_EXTI5_9, 3);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2017      	movs	r0, #23
 8000ab0:	f7ff fed0 	bl	8000854 <GPIO_IRQPriorityConfig>
/*Code starts here*/
	while(1){
		delay(1U);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff fbcf 	bl	8000258 <delay>
		TimerStart(Timer1.pTIMx, ENABLE);
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <main+0x130>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fef1 	bl	80008a8 <TimerStart>
		GPIO_ToggleOutputPin(Trigg.pGPIOx, Trigg.GPIO_PinConfig.GPIO_PinNumber);
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <main+0x128>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <main+0x128>)
 8000acc:	7912      	ldrb	r2, [r2, #4]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fe23 	bl	800071c <GPIO_ToggleOutputPin>
		delay(1U);
 8000ad6:	e7ed      	b.n	8000ab4 <main+0xfc>
 8000ad8:	2000001c 	.word	0x2000001c
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	20000028 	.word	0x20000028
 8000ae4:	20000034 	.word	0x20000034
 8000ae8:	20000040 	.word	0x20000040
 8000aec:	40001000 	.word	0x40001000
 8000af0:	2000004c 	.word	0x2000004c
 8000af4:	40001400 	.word	0x40001400

08000af8 <SysTick_Handler>:
	}

/*Code ends here*/
}

void SysTick_Handler(void){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	__asm(
 8000afc:	b672      	cpsid	i
			"CPSID I	\n"
	);
	GPIO_ToggleOutputPin(LED.pGPIOx, LED.GPIO_PinConfig.GPIO_PinNumber);
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <SysTick_Handler+0x1c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <SysTick_Handler+0x1c>)
 8000b04:	7912      	ldrb	r2, [r2, #4]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe07 	bl	800071c <GPIO_ToggleOutputPin>
	__asm(
 8000b0e:	b662      	cpsie	i
			"CPSIE I	\n"
	);
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000034 	.word	0x20000034

08000b18 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	__asm(
 8000b1c:	b672      	cpsid	i
			"CPSID I	\n"
	);
	TimerStart(Timer1.pTIMx, DISABLE);
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <TIM6_DAC_IRQHandler+0x38>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff febf 	bl	80008a8 <TimerStart>
	Timer1.pTIMx->SR &= ~(1 << TIM_SR_UIF);
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <TIM6_DAC_IRQHandler+0x38>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	691a      	ldr	r2, [r3, #16]
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <TIM6_DAC_IRQHandler+0x38>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0201 	bic.w	r2, r2, #1
 8000b38:	611a      	str	r2, [r3, #16]
	GPIO_ToggleOutputPin(Trigg.pGPIOx, Trigg.GPIO_PinConfig.GPIO_PinNumber);
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <TIM6_DAC_IRQHandler+0x3c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <TIM6_DAC_IRQHandler+0x3c>)
 8000b40:	7912      	ldrb	r2, [r2, #4]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fde9 	bl	800071c <GPIO_ToggleOutputPin>
	__asm(
 8000b4a:	b662      	cpsie	i
			"CPSIE I	\n"
	);
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000040 	.word	0x20000040
 8000b54:	20000028 	.word	0x20000028

08000b58 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	__asm(
 8000b5c:	b672      	cpsid	i
			"CPSID I	\n"
	);
	EXTI->PR |= (1 << Echo.GPIO_PinConfig.GPIO_PinNumber);
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <EXTI9_5_IRQHandler+0x90>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	4a22      	ldr	r2, [pc, #136]	; (8000bec <EXTI9_5_IRQHandler+0x94>)
 8000b64:	7912      	ldrb	r2, [r2, #4]
 8000b66:	4611      	mov	r1, r2
 8000b68:	2201      	movs	r2, #1
 8000b6a:	408a      	lsls	r2, r1
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <EXTI9_5_IRQHandler+0x90>)
 8000b70:	430b      	orrs	r3, r1
 8000b72:	6153      	str	r3, [r2, #20]
	if(GPIO_ReadFromInputPin(Echo.pGPIOx, Echo.GPIO_PinConfig.GPIO_PinNumber) == 1U){
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <EXTI9_5_IRQHandler+0x94>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <EXTI9_5_IRQHandler+0x94>)
 8000b7a:	7912      	ldrb	r2, [r2, #4]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fdb6 	bl	80006f0 <GPIO_ReadFromInputPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d106      	bne.n	8000b98 <EXTI9_5_IRQHandler+0x40>
		TimerStart(Timer2.pTIMx, ENABLE);
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <EXTI9_5_IRQHandler+0x98>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fe89 	bl	80008a8 <TimerStart>
 8000b96:	e023      	b.n	8000be0 <EXTI9_5_IRQHandler+0x88>
	}else{
		TimerStart(Timer2.pTIMx, DISABLE);
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <EXTI9_5_IRQHandler+0x98>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe82 	bl	80008a8 <TimerStart>
		Timer2.pTIMx->SR &= ~(1 << TIM_SR_UIF);
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <EXTI9_5_IRQHandler+0x98>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	691a      	ldr	r2, [r3, #16]
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <EXTI9_5_IRQHandler+0x98>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0201 	bic.w	r2, r2, #1
 8000bb2:	611a      	str	r2, [r3, #16]
		timer2_Ticks = Timer2.pTIMx->CNT;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <EXTI9_5_IRQHandler+0x98>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <EXTI9_5_IRQHandler+0x9c>)
 8000bbe:	801a      	strh	r2, [r3, #0]
		Timer2.pTIMx->CNT = 0U;
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <EXTI9_5_IRQHandler+0x98>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
		SysTick ->RVR = (7989U / Ticks) * timer2_Ticks;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	f641 7235 	movw	r2, #7989	; 0x1f35
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <EXTI9_5_IRQHandler+0x9c>)
 8000bd4:	8812      	ldrh	r2, [r2, #0]
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <EXTI9_5_IRQHandler+0xa0>)
 8000bda:	fb01 f303 	mul.w	r3, r1, r3
 8000bde:	6053      	str	r3, [r2, #4]
	}
	__asm(
 8000be0:	b662      	cpsie	i
			"CPSIE I	\n"
	);
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40013c00 	.word	0x40013c00
 8000bec:	2000001c 	.word	0x2000001c
 8000bf0:	2000004c 	.word	0x2000004c
 8000bf4:	20000058 	.word	0x20000058
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2a:	f000 f811 	bl	8000c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff fec3 	bl	80009b8 <main>

08000c32 <LoopForever>:

LoopForever:
  b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   r0, =_estack
 8000c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c40:	08000cb8 	.word	0x08000cb8
  ldr r2, =_sbss
 8000c44:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c48:	2000005c 	.word	0x2000005c

08000c4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <__libc_init_array>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	4d0d      	ldr	r5, [pc, #52]	; (8000c88 <__libc_init_array+0x38>)
 8000c54:	4c0d      	ldr	r4, [pc, #52]	; (8000c8c <__libc_init_array+0x3c>)
 8000c56:	1b64      	subs	r4, r4, r5
 8000c58:	10a4      	asrs	r4, r4, #2
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	42a6      	cmp	r6, r4
 8000c5e:	d109      	bne.n	8000c74 <__libc_init_array+0x24>
 8000c60:	4d0b      	ldr	r5, [pc, #44]	; (8000c90 <__libc_init_array+0x40>)
 8000c62:	4c0c      	ldr	r4, [pc, #48]	; (8000c94 <__libc_init_array+0x44>)
 8000c64:	f000 f818 	bl	8000c98 <_init>
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	10a4      	asrs	r4, r4, #2
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	42a6      	cmp	r6, r4
 8000c70:	d105      	bne.n	8000c7e <__libc_init_array+0x2e>
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c78:	4798      	blx	r3
 8000c7a:	3601      	adds	r6, #1
 8000c7c:	e7ee      	b.n	8000c5c <__libc_init_array+0xc>
 8000c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c82:	4798      	blx	r3
 8000c84:	3601      	adds	r6, #1
 8000c86:	e7f2      	b.n	8000c6e <__libc_init_array+0x1e>
 8000c88:	08000cb0 	.word	0x08000cb0
 8000c8c:	08000cb0 	.word	0x08000cb0
 8000c90:	08000cb0 	.word	0x08000cb0
 8000c94:	08000cb4 	.word	0x08000cb4

08000c98 <_init>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr

08000ca4 <_fini>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	bf00      	nop
 8000ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000caa:	bc08      	pop	{r3}
 8000cac:	469e      	mov	lr, r3
 8000cae:	4770      	bx	lr
