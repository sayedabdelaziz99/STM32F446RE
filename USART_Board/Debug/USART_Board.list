
USART_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d10  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000ed4  08000ed4  00010ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f08  08000f08  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000f08  08000f08  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f08  08000f08  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f08  08000f08  00010f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f0c  08000f0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000008  08000f18  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000f18  00020024  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d72  00000000  00000000  00020032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006e4  00000000  00000000  00021da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00022488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  00022640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ffe  00000000  00000000  000227a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002430  00000000  00000000  0002579e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009e7b  00000000  00000000  00027bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00031a49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005e4  00000000  00000000  00031a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ebc 	.word	0x08000ebc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	08000ebc 	.word	0x08000ebc

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <USART_GPIOInit>:
GPIO_CLKCNT(pGPIOx, ENABLE);
pGPIOx->LCKR &= ~(1 << PinNumber);
GPIO_Init(&I2CPins);
}

void USART_GPIOInit(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t ALTFN_Mode){
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	70fb      	strb	r3, [r7, #3]
 8000224:	4613      	mov	r3, r2
 8000226:	70bb      	strb	r3, [r7, #2]
  GPIO_Handle_t USARTpins;
  USARTpins.pGPIOx = pGPIOx;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	60fb      	str	r3, [r7, #12]
  USARTpins.GPIO_PinConfig.GPIO_PinNumber =  PinNumber;
 800022c:	78fb      	ldrb	r3, [r7, #3]
 800022e:	743b      	strb	r3, [r7, #16]
  USARTpins.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_ALTFN;
 8000230:	2302      	movs	r3, #2
 8000232:	747b      	strb	r3, [r7, #17]
  USARTpins.GPIO_PinConfig.GPIO_PinAltFunMode   =  ALTFN_Mode;
 8000234:	78bb      	ldrb	r3, [r7, #2]
 8000236:	757b      	strb	r3, [r7, #21]
  USARTpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000238:	2300      	movs	r3, #0
 800023a:	753b      	strb	r3, [r7, #20]
  USARTpins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_PIN_PU;
 800023c:	2301      	movs	r3, #1
 800023e:	74fb      	strb	r3, [r7, #19]
  USARTpins.GPIO_PinConfig.GPIO_PinSpeed = GPOI_SPEED_HIGH;
 8000240:	2303      	movs	r3, #3
 8000242:	74bb      	strb	r3, [r7, #18]
  GPIO_CLKCNT(pGPIOx, ENABLE);
 8000244:	2101      	movs	r1, #1
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f000 f814 	bl	8000274 <GPIO_CLKCNT>
  pGPIOx->LCKR &= ~(1 << PinNumber);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	69db      	ldr	r3, [r3, #28]
 8000250:	78fa      	ldrb	r2, [r7, #3]
 8000252:	2101      	movs	r1, #1
 8000254:	fa01 f202 	lsl.w	r2, r1, r2
 8000258:	43d2      	mvns	r2, r2
 800025a:	401a      	ands	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	61da      	str	r2, [r3, #28]
  GPIO_Init(&USARTpins);
 8000260:	f107 030c 	add.w	r3, r7, #12
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f8eb 	bl	8000440 <GPIO_Init>
}
 800026a:	bf00      	nop
 800026c:	3718      	adds	r7, #24
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <GPIO_CLKCNT>:
 *
 * @Note              -  none

 */
void GPIO_CLKCNT(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000280:	78fb      	ldrb	r3, [r7, #3]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d157      	bne.n	8000336 <GPIO_CLKCNT+0xc2>
	{
	  if(pGPIOx == GPIOA){GPIOA_CLKEN;}
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4a59      	ldr	r2, [pc, #356]	; (80003f0 <GPIO_CLKCNT+0x17c>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d106      	bne.n	800029c <GPIO_CLKCNT+0x28>
 800028e:	4b59      	ldr	r3, [pc, #356]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000292:	4a58      	ldr	r2, [pc, #352]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6313      	str	r3, [r2, #48]	; 0x30
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
	}
}
 800029a:	e0a3      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKEN;}
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4a56      	ldr	r2, [pc, #344]	; (80003f8 <GPIO_CLKCNT+0x184>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d106      	bne.n	80002b2 <GPIO_CLKCNT+0x3e>
 80002a4:	4b53      	ldr	r3, [pc, #332]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a8:	4a52      	ldr	r2, [pc, #328]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80002aa:	f043 0302 	orr.w	r3, r3, #2
 80002ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b0:	e098      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKEN;}
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a51      	ldr	r2, [pc, #324]	; (80003fc <GPIO_CLKCNT+0x188>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d106      	bne.n	80002c8 <GPIO_CLKCNT+0x54>
 80002ba:	4b4e      	ldr	r3, [pc, #312]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	4a4d      	ldr	r2, [pc, #308]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80002c0:	f043 0304 	orr.w	r3, r3, #4
 80002c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c6:	e08d      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKEN;}
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a4d      	ldr	r2, [pc, #308]	; (8000400 <GPIO_CLKCNT+0x18c>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_CLKCNT+0x6a>
 80002d0:	4b48      	ldr	r3, [pc, #288]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d4:	4a47      	ldr	r2, [pc, #284]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002dc:	e082      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKEN;}
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a48      	ldr	r2, [pc, #288]	; (8000404 <GPIO_CLKCNT+0x190>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_CLKCNT+0x80>
 80002e6:	4b43      	ldr	r3, [pc, #268]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	4a42      	ldr	r2, [pc, #264]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80002ec:	f043 0310 	orr.w	r3, r3, #16
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f2:	e077      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKEN;}
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a44      	ldr	r2, [pc, #272]	; (8000408 <GPIO_CLKCNT+0x194>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_CLKCNT+0x96>
 80002fc:	4b3d      	ldr	r3, [pc, #244]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000300:	4a3c      	ldr	r2, [pc, #240]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000308:	e06c      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKEN;}
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a3f      	ldr	r2, [pc, #252]	; (800040c <GPIO_CLKCNT+0x198>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_CLKCNT+0xac>
 8000312:	4b38      	ldr	r3, [pc, #224]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000316:	4a37      	ldr	r2, [pc, #220]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800031c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031e:	e061      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKEN;}
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a3b      	ldr	r2, [pc, #236]	; (8000410 <GPIO_CLKCNT+0x19c>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d15d      	bne.n	80003e4 <GPIO_CLKCNT+0x170>
 8000328:	4b32      	ldr	r3, [pc, #200]	; (80003f4 <GPIO_CLKCNT+0x180>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a31      	ldr	r2, [pc, #196]	; (80003f4 <GPIO_CLKCNT+0x180>)
 800032e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000334:	e056      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  if(pGPIOx == GPIOA){GPIOA_CLKDI;}
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <GPIO_CLKCNT+0x17c>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_CLKCNT+0xd8>
 800033e:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a2c      	ldr	r2, [pc, #176]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000344:	f023 0301 	bic.w	r3, r3, #1
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034a:	e04b      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKDI;}
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a2a      	ldr	r2, [pc, #168]	; (80003f8 <GPIO_CLKCNT+0x184>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_CLKCNT+0xee>
 8000354:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a26      	ldr	r2, [pc, #152]	; (80003f4 <GPIO_CLKCNT+0x180>)
 800035a:	f023 0302 	bic.w	r3, r3, #2
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000360:	e040      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKDI;}
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a25      	ldr	r2, [pc, #148]	; (80003fc <GPIO_CLKCNT+0x188>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_CLKCNT+0x104>
 800036a:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <GPIO_CLKCNT+0x180>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000370:	f023 0304 	bic.w	r3, r3, #4
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000376:	e035      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKDI;}
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a21      	ldr	r2, [pc, #132]	; (8000400 <GPIO_CLKCNT+0x18c>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_CLKCNT+0x11a>
 8000380:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000386:	f023 0308 	bic.w	r3, r3, #8
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038c:	e02a      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a1c      	ldr	r2, [pc, #112]	; (8000404 <GPIO_CLKCNT+0x190>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_CLKCNT+0x130>
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <GPIO_CLKCNT+0x180>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <GPIO_CLKCNT+0x180>)
 800039c:	f023 0310 	bic.w	r3, r3, #16
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a2:	e01f      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a18      	ldr	r2, [pc, #96]	; (8000408 <GPIO_CLKCNT+0x194>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_CLKCNT+0x146>
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80003b2:	f023 0320 	bic.w	r3, r3, #32
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	e014      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a13      	ldr	r2, [pc, #76]	; (800040c <GPIO_CLKCNT+0x198>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_CLKCNT+0x15c>
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a0b      	ldr	r2, [pc, #44]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80003c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ce:	e009      	b.n	80003e4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <GPIO_CLKCNT+0x19c>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d105      	bne.n	80003e4 <GPIO_CLKCNT+0x170>
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a05      	ldr	r2, [pc, #20]	; (80003f4 <GPIO_CLKCNT+0x180>)
 80003de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40020000 	.word	0x40020000
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40020400 	.word	0x40020400
 80003fc:	40020800 	.word	0x40020800
 8000400:	40020c00 	.word	0x40020c00
 8000404:	40021000 	.word	0x40021000
 8000408:	40021400 	.word	0x40021400
 800040c:	40021800 	.word	0x40021800
 8000410:	40021c00 	.word	0x40021c00

08000414 <GPIO_PORTCODE>:
 * @return            - the code of the given port
 *
 * @Note              -

 */
uint8_t GPIO_PORTCODE(GPIO_RegDef_t *pGPIOx){
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	uint8_t volatile portcode;
	uint32_t offset = (uint32_t)((uint32_t)pGPIOx - GPIOA_BASEADDR); /*calculate the offset from the base address*/
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000422:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000426:	60fb      	str	r3, [r7, #12]
	portcode = offset / 0x400;   /*portcode will range from 0 to 8 since the offset is a multiply of 400*/
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	0a9b      	lsrs	r3, r3, #10
 800042c:	b2db      	uxtb	r3, r3
 800042e:	72fb      	strb	r3, [r7, #11]
	return portcode;
 8000430:	7afb      	ldrb	r3, [r7, #11]
 8000432:	b2db      	uxtb	r3, r3
}
 8000434:	4618      	mov	r0, r3
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
	...

08000440 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	795b      	ldrb	r3, [r3, #5]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d820      	bhi.n	8000496 <GPIO_Init+0x56>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	795b      	ldrb	r3, [r3, #5]
 8000458:	461a      	mov	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	fa02 f303 	lsl.w	r3, r2, r3
 8000464:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	2103      	movs	r1, #3
 8000474:	fa01 f303 	lsl.w	r3, r1, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	4619      	mov	r1, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	400a      	ands	r2, r1
 8000482:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	6819      	ldr	r1, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	697a      	ldr	r2, [r7, #20]
 8000490:	430a      	orrs	r2, r1
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	e084      	b.n	80005a0 <GPIO_Init+0x160>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	795b      	ldrb	r3, [r3, #5]
 800049a:	2b04      	cmp	r3, #4
 800049c:	d11d      	bne.n	80004da <GPIO_Init+0x9a>
			/*configure the falling edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6812      	ldr	r2, [r2, #0]
 80004a8:	601a      	str	r2, [r3, #0]
			EXTI ->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004aa:	4b89      	ldr	r3, [pc, #548]	; (80006d0 <GPIO_Init+0x290>)
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	7912      	ldrb	r2, [r2, #4]
 80004b2:	4611      	mov	r1, r2
 80004b4:	2201      	movs	r2, #1
 80004b6:	408a      	lsls	r2, r1
 80004b8:	43d2      	mvns	r2, r2
 80004ba:	4611      	mov	r1, r2
 80004bc:	4a84      	ldr	r2, [pc, #528]	; (80006d0 <GPIO_Init+0x290>)
 80004be:	400b      	ands	r3, r1
 80004c0:	6093      	str	r3, [r2, #8]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c2:	4b83      	ldr	r3, [pc, #524]	; (80006d0 <GPIO_Init+0x290>)
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	7912      	ldrb	r2, [r2, #4]
 80004ca:	4611      	mov	r1, r2
 80004cc:	2201      	movs	r2, #1
 80004ce:	408a      	lsls	r2, r1
 80004d0:	4611      	mov	r1, r2
 80004d2:	4a7f      	ldr	r2, [pc, #508]	; (80006d0 <GPIO_Init+0x290>)
 80004d4:	430b      	orrs	r3, r1
 80004d6:	60d3      	str	r3, [r2, #12]
 80004d8:	e03d      	b.n	8000556 <GPIO_Init+0x116>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	795b      	ldrb	r3, [r3, #5]
 80004de:	2b05      	cmp	r3, #5
 80004e0:	d11d      	bne.n	800051e <GPIO_Init+0xde>
			/*configure the rising edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	6812      	ldr	r2, [r2, #0]
 80004ec:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ee:	4b78      	ldr	r3, [pc, #480]	; (80006d0 <GPIO_Init+0x290>)
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	7912      	ldrb	r2, [r2, #4]
 80004f6:	4611      	mov	r1, r2
 80004f8:	2201      	movs	r2, #1
 80004fa:	408a      	lsls	r2, r1
 80004fc:	43d2      	mvns	r2, r2
 80004fe:	4611      	mov	r1, r2
 8000500:	4a73      	ldr	r2, [pc, #460]	; (80006d0 <GPIO_Init+0x290>)
 8000502:	400b      	ands	r3, r1
 8000504:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000506:	4b72      	ldr	r3, [pc, #456]	; (80006d0 <GPIO_Init+0x290>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	7912      	ldrb	r2, [r2, #4]
 800050e:	4611      	mov	r1, r2
 8000510:	2201      	movs	r2, #1
 8000512:	408a      	lsls	r2, r1
 8000514:	4611      	mov	r1, r2
 8000516:	4a6e      	ldr	r2, [pc, #440]	; (80006d0 <GPIO_Init+0x290>)
 8000518:	430b      	orrs	r3, r1
 800051a:	6093      	str	r3, [r2, #8]
 800051c:	e01b      	b.n	8000556 <GPIO_Init+0x116>
		}
		else{
			/*configure the falling and rising edge trigger registers*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6812      	ldr	r2, [r2, #0]
 8000528:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052a:	4b69      	ldr	r3, [pc, #420]	; (80006d0 <GPIO_Init+0x290>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7912      	ldrb	r2, [r2, #4]
 8000532:	4611      	mov	r1, r2
 8000534:	2201      	movs	r2, #1
 8000536:	408a      	lsls	r2, r1
 8000538:	4611      	mov	r1, r2
 800053a:	4a65      	ldr	r2, [pc, #404]	; (80006d0 <GPIO_Init+0x290>)
 800053c:	430b      	orrs	r3, r1
 800053e:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000540:	4b63      	ldr	r3, [pc, #396]	; (80006d0 <GPIO_Init+0x290>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	4611      	mov	r1, r2
 8000550:	4a5f      	ldr	r2, [pc, #380]	; (80006d0 <GPIO_Init+0x290>)
 8000552:	430b      	orrs	r3, r1
 8000554:	6093      	str	r3, [r2, #8]
		}

		/*configure the gpio port selection(SYSCONFIG_EXTI register)*/
		uint8_t tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;  /*which EXTICR to configure*/
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	089b      	lsrs	r3, r3, #2
 800055c:	74fb      	strb	r3, [r7, #19]
		uint8_t tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;  /*which Field of the EXTICR to configure*/
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	f003 0303 	and.w	r3, r3, #3
 8000566:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_PORTCODE(pGPIOHandle->pGPIOx);          /*the code that represents the port whoes pin is goning to trigger the interrupt*/
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff51 	bl	8000414 <GPIO_PORTCODE>
 8000572:	4603      	mov	r3, r0
 8000574:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[tmp1] = (portcode << tmp2 * 4);                  /*every field is four bits wide so  we multiply by 4*/
 8000576:	7c7a      	ldrb	r2, [r7, #17]
 8000578:	7cbb      	ldrb	r3, [r7, #18]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	fa02 f103 	lsl.w	r1, r2, r3
 8000580:	4a54      	ldr	r2, [pc, #336]	; (80006d4 <GPIO_Init+0x294>)
 8000582:	7cfb      	ldrb	r3, [r7, #19]
 8000584:	3302      	adds	r3, #2
 8000586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/*configure the exti interrupt delivery(interrupt mask register)*/
		EXTI ->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058a:	4b51      	ldr	r3, [pc, #324]	; (80006d0 <GPIO_Init+0x290>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	7912      	ldrb	r2, [r2, #4]
 8000592:	4611      	mov	r1, r2
 8000594:	2201      	movs	r2, #1
 8000596:	408a      	lsls	r2, r1
 8000598:	4611      	mov	r1, r2
 800059a:	4a4d      	ldr	r2, [pc, #308]	; (80006d0 <GPIO_Init+0x290>)
 800059c:	430b      	orrs	r3, r1
 800059e:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	799b      	ldrb	r3, [r3, #6]
 80005a4:	461a      	mov	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	689a      	ldr	r2, [r3, #8]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	2103      	movs	r1, #3
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	43db      	mvns	r3, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	400a      	ands	r2, r1
 80005ce:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	6899      	ldr	r1, [r3, #8]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	430a      	orrs	r2, r1
 80005de:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	79db      	ldrb	r3, [r3, #7]
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	68da      	ldr	r2, [r3, #12]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	2103      	movs	r1, #3
 8000600:	fa01 f303 	lsl.w	r3, r1, r3
 8000604:	43db      	mvns	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	400a      	ands	r2, r1
 800060e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	68d9      	ldr	r1, [r3, #12]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	430a      	orrs	r2, r1
 800061e:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	7a1b      	ldrb	r3, [r3, #8]
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	4619      	mov	r1, r3
 800063c:	2301      	movs	r3, #1
 800063e:	408b      	lsls	r3, r1
 8000640:	43db      	mvns	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	400a      	ands	r2, r1
 800064a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	6859      	ldr	r1, [r3, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	430a      	orrs	r2, r1
 800065a:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	795b      	ldrb	r3, [r3, #5]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d131      	bne.n	80006c8 <GPIO_Init+0x288>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	f003 0307 	and.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	7c3a      	ldrb	r2, [r7, #16]
 800067c:	3208      	adds	r2, #8
 800067e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	220f      	movs	r2, #15
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	43db      	mvns	r3, r3
 800068e:	4618      	mov	r0, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	7c3a      	ldrb	r2, [r7, #16]
 8000696:	4001      	ands	r1, r0
 8000698:	3208      	adds	r2, #8
 800069a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	7c3a      	ldrb	r2, [r7, #16]
 80006a4:	3208      	adds	r2, #8
 80006a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	7a5b      	ldrb	r3, [r3, #9]
 80006ae:	461a      	mov	r2, r3
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	7c3a      	ldrb	r2, [r7, #16]
 80006c0:	4301      	orrs	r1, r0
 80006c2:	3208      	adds	r2, #8
 80006c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80006c8:	bf00      	nop
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40013c00 	.word	0x40013c00
 80006d4:	40013800 	.word	0x40013800

080006d8 <GPIO_ToggleOutputPin>:
 *
 * @Note              -

 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	78fa      	ldrb	r2, [r7, #3]
 80006ea:	2101      	movs	r1, #1
 80006ec:	fa01 f202 	lsl.w	r2, r1, r2
 80006f0:	405a      	eors	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	615a      	str	r2, [r3, #20]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <getSystemClock>:
#include "RCC_driver.h"

uint16_t AHB_PRESCALERS[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB_PRESCALERS[4] = {2, 4, 8, 16};

uint32_t getSystemClock(void){
 8000700:	b480      	push	{r7}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
uint8_t PLLP1 = ((RCC->PLLCFGR >> 16) & 0x3U);
 8000706:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <getSystemClock+0xd4>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	0c1b      	lsrs	r3, r3, #16
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f003 0303 	and.w	r3, r3, #3
 8000712:	75bb      	strb	r3, [r7, #22]
uint8_t PLLP;
uint32_t fPLL,fPLLR;
switch(PLLP1){
 8000714:	7dbb      	ldrb	r3, [r7, #22]
 8000716:	2b03      	cmp	r3, #3
 8000718:	d816      	bhi.n	8000748 <getSystemClock+0x48>
 800071a:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <getSystemClock+0x20>)
 800071c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000720:	08000731 	.word	0x08000731
 8000724:	08000737 	.word	0x08000737
 8000728:	0800073d 	.word	0x0800073d
 800072c:	08000743 	.word	0x08000743
  case(0):
		  PLLP = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	75fb      	strb	r3, [r7, #23]
          break;
 8000734:	e008      	b.n	8000748 <getSystemClock+0x48>
  case(1):
		  PLLP = 4;
 8000736:	2304      	movs	r3, #4
 8000738:	75fb      	strb	r3, [r7, #23]
          break;
 800073a:	e005      	b.n	8000748 <getSystemClock+0x48>
  case(2):
		  PLLP = 6;
 800073c:	2306      	movs	r3, #6
 800073e:	75fb      	strb	r3, [r7, #23]
          break;
 8000740:	e002      	b.n	8000748 <getSystemClock+0x48>
  case(3):
		  PLLP = 8;
 8000742:	2308      	movs	r3, #8
 8000744:	75fb      	strb	r3, [r7, #23]
          break;
 8000746:	bf00      	nop
}
uint16_t PLLN = ((RCC ->PLLCFGR >> 6) & 0x1FF);
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <getSystemClock+0xd4>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	099b      	lsrs	r3, r3, #6
 800074e:	b29b      	uxth	r3, r3
 8000750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000754:	82bb      	strh	r3, [r7, #20]
uint16_t PLLM = (RCC ->PLLCFGR & 0x3FU);
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <getSystemClock+0xd4>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	b29b      	uxth	r3, r3
 800075c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000760:	827b      	strh	r3, [r7, #18]
uint16_t PLLR = (RCC ->PLLCFGR >> 28) & 0x7U;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <getSystemClock+0xd4>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	0f1b      	lsrs	r3, r3, #28
 8000768:	b29b      	uxth	r3, r3
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	823b      	strh	r3, [r7, #16]
uint32_t fVCO = HSI_CLOCK * (PLLN / PLLM); /*HSI is used as pll input*/
 8000770:	8aba      	ldrh	r2, [r7, #20]
 8000772:	8a7b      	ldrh	r3, [r7, #18]
 8000774:	fbb2 f3f3 	udiv	r3, r2, r3
 8000778:	b29b      	uxth	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <getSystemClock+0xd8>)
 800077e:	fb02 f303 	mul.w	r3, r2, r3
 8000782:	60fb      	str	r3, [r7, #12]
	switch (RCC ->CFGR >> 2){
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <getSystemClock+0xd4>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	089b      	lsrs	r3, r3, #2
 800078a:	2b03      	cmp	r3, #3
 800078c:	d81c      	bhi.n	80007c8 <getSystemClock+0xc8>
 800078e:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <getSystemClock+0x94>)
 8000790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000794:	080007a5 	.word	0x080007a5
 8000798:	080007a9 	.word	0x080007a9
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	080007bb 	.word	0x080007bb
		case(0) : /*HSI is used*/
			return HSI_CLOCK; /*HSI clock speed*/
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <getSystemClock+0xd8>)
 80007a6:	e00f      	b.n	80007c8 <getSystemClock+0xc8>
		case(1) : /*HSE is used*/
			return HSE_CLOCK;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <getSystemClock+0xdc>)
 80007aa:	e00d      	b.n	80007c8 <getSystemClock+0xc8>
		case(2) : /*PLL is used*/
		   fPLL = fVCO * PLLP;
 80007ac:	7dfa      	ldrb	r2, [r7, #23]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	fb02 f303 	mul.w	r3, r2, r3
 80007b4:	607b      	str	r3, [r7, #4]
		  return fPLL;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	e006      	b.n	80007c8 <getSystemClock+0xc8>
		case(3) : /*PLL_R is used*/
			/*Clock frequancy = VCO / PLLR*/
			 fPLLR = fVCO / PLLR;
 80007ba:	8a3b      	ldrh	r3, [r7, #16]
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	60bb      	str	r3, [r7, #8]
			return fPLLR;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	e7ff      	b.n	80007c8 <getSystemClock+0xc8>
	}
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	371c      	adds	r7, #28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	00f42400 	.word	0x00f42400
 80007dc:	007a1200 	.word	0x007a1200

080007e0 <getAPBClock>:
	}
	uint32_t AHBClock = SystemClock / AHB_PRESCALER;
	return AHBClock;
}

uint32_t getAPBClock(uint32_t BusAddress){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	if(BusAddress == APB1PREF_BASEADDR){
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007ee:	d11a      	bne.n	8000826 <getAPBClock+0x46>
		uint8_t APB1PRESCALER;
		if(((RCC ->CFGR >> 10) & 0x7U) < 4){
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <getAPBClock+0x84>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	0a9b      	lsrs	r3, r3, #10
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d102      	bne.n	8000804 <getAPBClock+0x24>
		  APB1PRESCALER = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e009      	b.n	8000818 <getAPBClock+0x38>
		}else{
		  APB1PRESCALER = APB_PRESCALERS[((RCC ->CFGR >> 10) & 0x7U) - 4];
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <getAPBClock+0x84>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	0a9b      	lsrs	r3, r3, #10
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	3b04      	subs	r3, #4
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <getAPBClock+0x88>)
 8000812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000816:	73fb      	strb	r3, [r7, #15]
		}
		return (getSystemClock() / APB1PRESCALER);
 8000818:	f7ff ff72 	bl	8000700 <getSystemClock>
 800081c:	4602      	mov	r2, r0
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	fbb2 f3f3 	udiv	r3, r2, r3
 8000824:	e019      	b.n	800085a <getAPBClock+0x7a>
	}
	else{
		uint8_t APB2PRESCALER;
		if(((RCC ->CFGR >> 13) & 0x7U) < 4){
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <getAPBClock+0x84>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	0b5b      	lsrs	r3, r3, #13
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <getAPBClock+0x5a>
		  APB2PRESCALER = 1;
 8000834:	2301      	movs	r3, #1
 8000836:	73bb      	strb	r3, [r7, #14]
 8000838:	e009      	b.n	800084e <getAPBClock+0x6e>
		}else{
		  APB2PRESCALER = APB_PRESCALERS[((RCC ->CFGR >> 10) & 0x7U) - 4];
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <getAPBClock+0x84>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	0a9b      	lsrs	r3, r3, #10
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	3b04      	subs	r3, #4
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <getAPBClock+0x88>)
 8000848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800084c:	73bb      	strb	r3, [r7, #14]
		}
		return (getSystemClock() / APB2PRESCALER);
 800084e:	f7ff ff57 	bl	8000700 <getSystemClock>
 8000852:	4602      	mov	r2, r0
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	fbb2 f3f3 	udiv	r3, r2, r3
	}
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	20000000 	.word	0x20000000

0800086c <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_type *pUSARTx, uint32_t BaudRate)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a32      	ldr	r2, [pc, #200]	; (8000948 <USART_SetBaudRate+0xdc>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d003      	beq.n	800088a <USART_SetBaudRate+0x1e>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a31      	ldr	r2, [pc, #196]	; (800094c <USART_SetBaudRate+0xe0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d104      	bne.n	8000894 <USART_SetBaudRate+0x28>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = getAPBClock(APB2PREF_BASEADDR);
 800088a:	4831      	ldr	r0, [pc, #196]	; (8000950 <USART_SetBaudRate+0xe4>)
 800088c:	f7ff ffa8 	bl	80007e0 <getAPBClock>
 8000890:	61f8      	str	r0, [r7, #28]
 8000892:	e004      	b.n	800089e <USART_SetBaudRate+0x32>
  }else
  {
	  PCLKx = getAPBClock(APB1PREF_BASEADDR);
 8000894:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000898:	f7ff ffa2 	bl	80007e0 <getAPBClock>
 800089c:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00b      	beq.n	80008c2 <USART_SetBaudRate+0x56>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 80008aa:	69fa      	ldr	r2, [r7, #28]
 80008ac:	4613      	mov	r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	009a      	lsls	r2, r3, #2
 80008b4:	441a      	add	r2, r3
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	e00a      	b.n	80008d8 <USART_SetBaudRate+0x6c>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	009a      	lsls	r2, r3, #2
 80008cc:	441a      	add	r2, r3
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <USART_SetBaudRate+0xe8>)
 80008dc:	fba2 2303 	umull	r2, r3, r2, r3
 80008e0:	095b      	lsrs	r3, r3, #5
 80008e2:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2264      	movs	r2, #100	; 0x64
 80008f2:	fb02 f303 	mul.w	r3, r2, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00a      	beq.n	800091e <USART_SetBaudRate+0xb2>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	3332      	adds	r3, #50	; 0x32
 800090e:	4a11      	ldr	r2, [pc, #68]	; (8000954 <USART_SetBaudRate+0xe8>)
 8000910:	fba2 2303 	umull	r2, r3, r2, r3
 8000914:	095b      	lsrs	r3, r3, #5
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	e009      	b.n	8000932 <USART_SetBaudRate+0xc6>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	011b      	lsls	r3, r3, #4
 8000922:	3332      	adds	r3, #50	; 0x32
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <USART_SetBaudRate+0xe8>)
 8000926:	fba2 2303 	umull	r2, r3, r2, r3
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	609a      	str	r2, [r3, #8]
}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40011000 	.word	0x40011000
 800094c:	40011400 	.word	0x40011400
 8000950:	40010000 	.word	0x40010000
 8000954:	51eb851f 	.word	0x51eb851f

08000958 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2101      	movs	r1, #1
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f880 	bl	8000a70 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	791b      	ldrb	r3, [r3, #4]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d104      	bne.n	8000982 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e010      	b.n	80009a4 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	791b      	ldrb	r3, [r3, #4]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d104      	bne.n	8000994 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	e007      	b.n	80009a4 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	791b      	ldrb	r3, [r3, #4]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d103      	bne.n	80009a4 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f043 030c 	orr.w	r3, r3, #12
 80009a2:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7b5b      	ldrb	r3, [r3, #13]
 80009a8:	031b      	lsls	r3, r3, #12
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7b9b      	ldrb	r3, [r3, #14]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d104      	bne.n	80009c4 <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	e00b      	b.n	80009dc <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7b9b      	ldrb	r3, [r3, #14]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d107      	bne.n	80009dc <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d2:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009da:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7b1b      	ldrb	r3, [r3, #12]
 80009ec:	031b      	lsls	r3, r3, #12
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7bdb      	ldrb	r3, [r3, #15]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d104      	bne.n	8000a14 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e014      	b.n	8000a3e <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7bdb      	ldrb	r3, [r3, #15]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d104      	bne.n	8000a26 <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	e00b      	b.n	8000a3e <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7bdb      	ldrb	r3, [r3, #15]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d107      	bne.n	8000a3e <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a34:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3c:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4610      	mov	r0, r2
 8000a52:	f7ff ff0b 	bl	800086c <USART_SetBaudRate>

	pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a64:	60da      	str	r2, [r3, #12]
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_type *pUSARTx, uint8_t EnorDi)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d140      	bne.n	8000b04 <USART_PeriClockControl+0x94>
	{
		if(pUSARTx == USART1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <USART_PeriClockControl+0xa0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d106      	bne.n	8000a98 <USART_PeriClockControl+0x28>
		{
			USART1_CLKEN();
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
		//TODO
	}

}
 8000a96:	e035      	b.n	8000b04 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <USART_PeriClockControl+0xa8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d106      	bne.n	8000aae <USART_PeriClockControl+0x3e>
			USART2_CLKEN();
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aac:	e02a      	b.n	8000b04 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART3)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <USART_PeriClockControl+0xac>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d106      	bne.n	8000ac4 <USART_PeriClockControl+0x54>
			USART3_CLKEN();
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ac2:	e01f      	b.n	8000b04 <USART_PeriClockControl+0x94>
		else if (pUSARTx == UART4)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <USART_PeriClockControl+0xb0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d106      	bne.n	8000ada <USART_PeriClockControl+0x6a>
			UART4_CLKEN();
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000ad2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ad6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ad8:	e014      	b.n	8000b04 <USART_PeriClockControl+0x94>
		else if (pUSARTx == UART5)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a11      	ldr	r2, [pc, #68]	; (8000b24 <USART_PeriClockControl+0xb4>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d106      	bne.n	8000af0 <USART_PeriClockControl+0x80>
			UART5_CLKEN();
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aee:	e009      	b.n	8000b04 <USART_PeriClockControl+0x94>
		else if (pUSARTx == USART6)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <USART_PeriClockControl+0xb8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d105      	bne.n	8000b04 <USART_PeriClockControl+0x94>
			USART6_CLKEN();
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afc:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <USART_PeriClockControl+0xa4>)
 8000afe:	f043 0320 	orr.w	r3, r3, #32
 8000b02:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40011000 	.word	0x40011000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40004800 	.word	0x40004800
 8000b20:	40004c00 	.word	0x40004c00
 8000b24:	40005000 	.word	0x40005000
 8000b28:	40011400 	.word	0x40011400

08000b2c <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_type *pUSARTx, uint8_t StatusFlagName)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	e031      	b.n	8000bca <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000b66:	bf00      	nop
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ffdc 	bl	8000b2c <USART_GetFlagStatus>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f6      	beq.n	8000b68 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	7b5b      	ldrb	r3, [r3, #13]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d118      	bne.n	8000bb4 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b94:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	7b9b      	ldrb	r3, [r3, #14]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d106      	bne.n	8000bac <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	e00b      	b.n	8000bc4 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	e007      	b.n	8000bc4 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d3c9      	bcc.n	8000b66 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000bd2:	bf00      	nop
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ffa6 	bl	8000b2c <USART_GetFlagStatus>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f6      	beq.n	8000bd4 <USART_SendData+0x80>
}
 8000be6:	bf00      	nop
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <USART_ReceiveData>:
 * @Note              -

 */

void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e045      	b.n	8000c8e <USART_ReceiveData+0x9e>
	{
		//Implement the code to wait until RXNE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_RXNE));
 8000c02:	bf00      	nop
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2120      	movs	r1, #32
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff8e 	bl	8000b2c <USART_GetFlagStatus>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f6      	beq.n	8000c04 <USART_ReceiveData+0x14>

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	7b5b      	ldrb	r3, [r3, #13]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d11d      	bne.n	8000c5a <USART_ReceiveData+0x6a>
		{
			//We are going to receive 9bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	7b9b      	ldrb	r3, [r3, #14]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10f      	bne.n	8000c46 <USART_ReceiveData+0x56>
			{
				//No parity is used , so all 9bits will be of user data

				//read only first 9 bits so mask the DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	801a      	strh	r2, [r3, #0]

				//Now increment the pRxBuffer two times
				pRxBuffer++;
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
				pRxBuffer++;
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	e020      	b.n	8000c88 <USART_ReceiveData+0x98>
			}
			else
			{
				//Parity is used, so 8bits will be of user data and 1 bit is parity
				 *pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	701a      	strb	r2, [r3, #0]
				 pRxBuffer++;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	e016      	b.n	8000c88 <USART_ReceiveData+0x98>
		else
		{
			//We are going to receive 8bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	7b9b      	ldrb	r3, [r3, #14]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d106      	bne.n	8000c70 <USART_ReceiveData+0x80>
			{
				//No parity is used , so all 8bits will be of user data

				//read 8 bits from DR
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e008      	b.n	8000c82 <USART_ReceiveData+0x92>
			else
			{
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity

				//read only 7 bits , hence mask the DR with 0X7F
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	701a      	strb	r2, [r3, #0]

			}

			//Now , increment the pRxBuffer
			pRxBuffer++;
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3b5      	bcc.n	8000c02 <USART_ReceiveData+0x12>
		}
	}

}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <main>:
#include "UART_driver.h"
#include "RCC_driver.h"
#include "bsp.h"


int main(void){
 8000ca0:	e92d 4f90 	stmdb	sp!, {r4, r7, r8, r9, sl, fp, lr}
 8000ca4:	b09d      	sub	sp, #116	; 0x74
 8000ca6:	af00      	add	r7, sp, #0
	uint8_t s1[] = "Mahmoud Fawzi\n";
 8000ca8:	4b57      	ldr	r3, [pc, #348]	; (8000e08 <main+0x168>)
 8000caa:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb0:	c407      	stmia	r4!, {r0, r1, r2}
 8000cb2:	8023      	strh	r3, [r4, #0]
 8000cb4:	3402      	adds	r4, #2
 8000cb6:	0c1b      	lsrs	r3, r3, #16
 8000cb8:	7023      	strb	r3, [r4, #0]
	uint8_t s2[] = "Salah Ahmed\n";
 8000cba:	4b54      	ldr	r3, [pc, #336]	; (8000e0c <main+0x16c>)
 8000cbc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc2:	c407      	stmia	r4!, {r0, r1, r2}
 8000cc4:	7023      	strb	r3, [r4, #0]
	uint8_t data1[] = "Le Old\n";
 8000cc6:	4a52      	ldr	r2, [pc, #328]	; (8000e10 <main+0x170>)
 8000cc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t data2[] = "Le Shungus\n";
 8000cd4:	4a4f      	ldr	r2, [pc, #316]	; (8000e14 <main+0x174>)
 8000cd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cda:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t data_size;
	USART_Handle_t test;
	test.pUSARTx = USART1;
 8000ce0:	4b4d      	ldr	r3, [pc, #308]	; (8000e18 <main+0x178>)
 8000ce2:	60fb      	str	r3, [r7, #12]
	test.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000ce4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ce8:	617b      	str	r3, [r7, #20]
	test.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	763b      	strb	r3, [r7, #24]
	test.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	76bb      	strb	r3, [r7, #26]
	test.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	743b      	strb	r3, [r7, #16]
	test.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	767b      	strb	r3, [r7, #25]
	USART_Init(&test);
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fe2a 	bl	8000958 <USART_Init>

	  /*configuring the LED*/
	  GPIO_Handle_t GPIOLed;
	  GPIOLed.pGPIOx = GPIOA;
 8000d04:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <main+0x17c>)
 8000d06:	603b      	str	r3, [r7, #0]
	  GPIOLed.GPIO_PinConfig.GPIO_PinNumber =  GPIO_PIN_NO_5;
 8000d08:	2305      	movs	r3, #5
 8000d0a:	713b      	strb	r3, [r7, #4]
	  GPIOLed.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_OUT;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	717b      	strb	r3, [r7, #5]
	  GPIOLed.GPIO_PinConfig.GPIO_PinSpeed  =  GPIO_SPEED_FAST;
 8000d10:	2302      	movs	r3, #2
 8000d12:	71bb      	strb	r3, [r7, #6]
	  GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000d14:	2300      	movs	r3, #0
 8000d16:	723b      	strb	r3, [r7, #8]
	  GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	71fb      	strb	r3, [r7, #7]
	  GPIO_CLKCNT(GPIOA,ENABLE);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	483f      	ldr	r0, [pc, #252]	; (8000e1c <main+0x17c>)
 8000d20:	f7ff faa8 	bl	8000274 <GPIO_CLKCNT>
	  GPIO_Init(&GPIOLed);
 8000d24:	463b      	mov	r3, r7
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fb8a 	bl	8000440 <GPIO_Init>


	USART_GPIOInit(GPIOA,GPIO_PIN_NO_9,7);  /*TX*/
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	2109      	movs	r1, #9
 8000d30:	483a      	ldr	r0, [pc, #232]	; (8000e1c <main+0x17c>)
 8000d32:	f7ff fa71 	bl	8000218 <USART_GPIOInit>
	USART_GPIOInit(GPIOA,GPIO_PIN_NO_10,7);  /*RX*/
 8000d36:	2207      	movs	r2, #7
 8000d38:	210a      	movs	r1, #10
 8000d3a:	4838      	ldr	r0, [pc, #224]	; (8000e1c <main+0x17c>)
 8000d3c:	f7ff fa6c 	bl	8000218 <USART_GPIOInit>
	while(1){
 8000d40:	466b      	mov	r3, sp
 8000d42:	461c      	mov	r4, r3
		USART_ReceiveData(&test, &data_size, 1);  /*first byte will contain data length*/
 8000d44:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff4e 	bl	8000bf0 <USART_ReceiveData>
		uint8_t data[data_size];
 8000d54:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8000d58:	460b      	mov	r3, r1
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000d5e:	b2cb      	uxtb	r3, r1
 8000d60:	2200      	movs	r2, #0
 8000d62:	4698      	mov	r8, r3
 8000d64:	4691      	mov	r9, r2
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d7a:	b2cb      	uxtb	r3, r1
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4693      	mov	fp, r2
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000d8e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000d92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000d96:	460b      	mov	r3, r1
 8000d98:	3307      	adds	r3, #7
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	ebad 0d03 	sub.w	sp, sp, r3
 8000da2:	466b      	mov	r3, sp
 8000da4:	3300      	adds	r3, #0
 8000da6:	66bb      	str	r3, [r7, #104]	; 0x68
		USART_ReceiveData(&test, data, sizeof(data));
 8000da8:	460a      	mov	r2, r1
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff1d 	bl	8000bf0 <USART_ReceiveData>
		uint8_t result = strcmp(data,s1);
 8000db6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dba:	4619      	mov	r1, r3
 8000dbc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000dbe:	f7ff fa21 	bl	8000204 <strcmp>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		switch(result){
 8000dc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d002      	beq.n	8000dd6 <main+0x136>
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d009      	beq.n	8000de8 <main+0x148>
 8000dd4:	e011      	b.n	8000dfa <main+0x15a>
		case(0):
				USART_SendData(&test, data1, sizeof(data1));
 8000dd6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	2208      	movs	r2, #8
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff feb7 	bl	8000b54 <USART_SendData>
				break;
 8000de6:	e008      	b.n	8000dfa <main+0x15a>
		case(1):
				USART_SendData(&test, data2, sizeof(data2));
 8000de8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	220c      	movs	r2, #12
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff feae 	bl	8000b54 <USART_SendData>
				break;
 8000df8:	bf00      	nop
		}
		GPIO_ToggleOutputPin(GPIOA,GPIO_PIN_NO_5);
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <main+0x17c>)
 8000dfe:	f7ff fc6b 	bl	80006d8 <GPIO_ToggleOutputPin>
 8000e02:	46a5      	mov	sp, r4
	while(1){
 8000e04:	e79c      	b.n	8000d40 <main+0xa0>
 8000e06:	bf00      	nop
 8000e08:	08000ed4 	.word	0x08000ed4
 8000e0c:	08000ee4 	.word	0x08000ee4
 8000e10:	08000ef4 	.word	0x08000ef4
 8000e14:	08000efc 	.word	0x08000efc
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40020000 	.word	0x40020000

08000e20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e24:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	; (8000e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <LoopForever+0xe>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	; (8000e6c <LoopForever+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e4e:	f000 f811 	bl	8000e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e52:	f7ff ff25 	bl	8000ca0 <main>

08000e56 <LoopForever>:

LoopForever:
  b LoopForever
 8000e56:	e7fe      	b.n	8000e56 <LoopForever>
  ldr   r0, =_estack
 8000e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000e64:	08000f10 	.word	0x08000f10
  ldr r2, =_sbss
 8000e68:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000e6c:	20000024 	.word	0x20000024

08000e70 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <__libc_init_array>:
 8000e74:	b570      	push	{r4, r5, r6, lr}
 8000e76:	4d0d      	ldr	r5, [pc, #52]	; (8000eac <__libc_init_array+0x38>)
 8000e78:	4c0d      	ldr	r4, [pc, #52]	; (8000eb0 <__libc_init_array+0x3c>)
 8000e7a:	1b64      	subs	r4, r4, r5
 8000e7c:	10a4      	asrs	r4, r4, #2
 8000e7e:	2600      	movs	r6, #0
 8000e80:	42a6      	cmp	r6, r4
 8000e82:	d109      	bne.n	8000e98 <__libc_init_array+0x24>
 8000e84:	4d0b      	ldr	r5, [pc, #44]	; (8000eb4 <__libc_init_array+0x40>)
 8000e86:	4c0c      	ldr	r4, [pc, #48]	; (8000eb8 <__libc_init_array+0x44>)
 8000e88:	f000 f818 	bl	8000ebc <_init>
 8000e8c:	1b64      	subs	r4, r4, r5
 8000e8e:	10a4      	asrs	r4, r4, #2
 8000e90:	2600      	movs	r6, #0
 8000e92:	42a6      	cmp	r6, r4
 8000e94:	d105      	bne.n	8000ea2 <__libc_init_array+0x2e>
 8000e96:	bd70      	pop	{r4, r5, r6, pc}
 8000e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e9c:	4798      	blx	r3
 8000e9e:	3601      	adds	r6, #1
 8000ea0:	e7ee      	b.n	8000e80 <__libc_init_array+0xc>
 8000ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ea6:	4798      	blx	r3
 8000ea8:	3601      	adds	r6, #1
 8000eaa:	e7f2      	b.n	8000e92 <__libc_init_array+0x1e>
 8000eac:	08000f08 	.word	0x08000f08
 8000eb0:	08000f08 	.word	0x08000f08
 8000eb4:	08000f08 	.word	0x08000f08
 8000eb8:	08000f0c 	.word	0x08000f0c

08000ebc <_init>:
 8000ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ebe:	bf00      	nop
 8000ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec2:	bc08      	pop	{r3}
 8000ec4:	469e      	mov	lr, r3
 8000ec6:	4770      	bx	lr

08000ec8 <_fini>:
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	bf00      	nop
 8000ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ece:	bc08      	pop	{r3}
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	4770      	bx	lr
