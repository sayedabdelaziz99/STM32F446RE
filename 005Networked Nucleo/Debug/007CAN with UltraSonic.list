
007CAN with UltraSonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080054c0  080054c0  000154c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058d4  080058d4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080058d4  080058d4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058d4  080058d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080058dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001e0  08005abc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08005abc  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031e1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c0d  00000000  00000000  000233f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c8  00000000  00000000  00024000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000250  00000000  00000000  000242c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003778  00000000  00000000  00024518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000036a6  00000000  00000000  00027c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000d04e  00000000  00000000  0002b336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00038384  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff0  00000000  00000000  000383d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0003a3c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  0003a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080054a4 	.word	0x080054a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080054a4 	.word	0x080054a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <systick_init>:
 */
#include "GPIO_driver.h"
#include "bsp.h"
#include "SPI_driver.h"

void systick_init(uint16_t Ticks_PerSecond){
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
SysTick -> CVR = 0x1U;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <systick_init+0x4c>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	609a      	str	r2, [r3, #8]
SysTick ->RVR = SysClock / Ticks_PerSecond;
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <systick_init+0x4c>)
 8000c9c:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <systick_init+0x50>)
 8000c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca2:	6053      	str	r3, [r2, #4]
SysTick ->CSR |= (1 << 0);
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <systick_init+0x4c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <systick_init+0x4c>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6013      	str	r3, [r2, #0]
SysTick ->CSR |= (1 << 1);
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <systick_init+0x4c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <systick_init+0x4c>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	6013      	str	r3, [r2, #0]
SysTick ->CSR |= (1 << 2);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <systick_init+0x4c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <systick_init+0x4c>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e010 	.word	0xe000e010
 8000cd8:	00f42400 	.word	0x00f42400

08000cdc <I2C1_GPIOInit>:
SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
GPIO_CLKCNT(pGPIOx, ENABLE);
GPIO_Init(&SPIPins);
}

void I2C1_GPIOInit(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t ALTFN_Mode){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	70fb      	strb	r3, [r7, #3]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	70bb      	strb	r3, [r7, #2]
GPIO_Handle_t I2CPins;
I2CPins.pGPIOx = pGPIOx;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	60fb      	str	r3, [r7, #12]
I2CPins.GPIO_PinConfig.GPIO_PinNumber =  PinNumber;
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	743b      	strb	r3, [r7, #16]
I2CPins.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_ALTFN;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	747b      	strb	r3, [r7, #17]
I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode   =  ALTFN_Mode;
 8000cf8:	78bb      	ldrb	r3, [r7, #2]
 8000cfa:	757b      	strb	r3, [r7, #21]
I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	753b      	strb	r3, [r7, #20]
I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_PIN_PU;
 8000d00:	2301      	movs	r3, #1
 8000d02:	74fb      	strb	r3, [r7, #19]
I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPOI_SPEED_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	74bb      	strb	r3, [r7, #18]
GPIO_CLKCNT(pGPIOx, ENABLE);
 8000d08:	2101      	movs	r1, #1
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f89a 	bl	8000e44 <GPIO_CLKCNT>
pGPIOx->LCKR &= ~(1 << PinNumber);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	78fa      	ldrb	r2, [r7, #3]
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1c:	43d2      	mvns	r2, r2
 8000d1e:	401a      	ands	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	61da      	str	r2, [r3, #28]
GPIO_Init(&I2CPins);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f971 	bl	8001010 <GPIO_Init>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <USART_GPIOInit>:

void USART_GPIOInit(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t ALTFN_Mode){
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	70fb      	strb	r3, [r7, #3]
 8000d42:	4613      	mov	r3, r2
 8000d44:	70bb      	strb	r3, [r7, #2]
  GPIO_Handle_t USARTpins;
  USARTpins.pGPIOx = pGPIOx;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]
  USARTpins.GPIO_PinConfig.GPIO_PinNumber =  PinNumber;
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	743b      	strb	r3, [r7, #16]
  USARTpins.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_ALTFN;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	747b      	strb	r3, [r7, #17]
  USARTpins.GPIO_PinConfig.GPIO_PinAltFunMode   =  ALTFN_Mode;
 8000d52:	78bb      	ldrb	r3, [r7, #2]
 8000d54:	757b      	strb	r3, [r7, #21]
  USARTpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000d56:	2300      	movs	r3, #0
 8000d58:	753b      	strb	r3, [r7, #20]
  USARTpins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_PIN_PU;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	74fb      	strb	r3, [r7, #19]
  USARTpins.GPIO_PinConfig.GPIO_PinSpeed = GPOI_SPEED_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	74bb      	strb	r3, [r7, #18]
  GPIO_CLKCNT(pGPIOx, ENABLE);
 8000d62:	2101      	movs	r1, #1
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 f86d 	bl	8000e44 <GPIO_CLKCNT>
  pGPIOx->LCKR &= ~(1 << PinNumber);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	78fa      	ldrb	r2, [r7, #3]
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	43d2      	mvns	r2, r2
 8000d78:	401a      	ands	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	61da      	str	r2, [r3, #28]
  GPIO_Init(&USARTpins);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f944 	bl	8001010 <GPIO_Init>
}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <GPIO_CAN1Init>:
	  SW.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	  GPIO_CLKCNT(SW.pGPIOx, ENABLE);
	  GPIO_Init(&SW);
}

void GPIO_CAN1Init(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t ALTFN_Mode){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	70fb      	strb	r3, [r7, #3]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	70bb      	strb	r3, [r7, #2]
	GPIO_Handle_t CANPins;
	CANPins.pGPIOx = pGPIOx;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	60fb      	str	r3, [r7, #12]
	CANPins.GPIO_PinConfig.GPIO_PinNumber =  PinNumber;
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	743b      	strb	r3, [r7, #16]
	CANPins.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_ALTFN;
 8000da8:	2302      	movs	r3, #2
 8000daa:	747b      	strb	r3, [r7, #17]
	CANPins.GPIO_PinConfig.GPIO_PinAltFunMode   =  ALTFN_Mode;
 8000dac:	78bb      	ldrb	r3, [r7, #2]
 8000dae:	757b      	strb	r3, [r7, #21]
	CANPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000db0:	2300      	movs	r3, #0
 8000db2:	753b      	strb	r3, [r7, #20]
	CANPins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 8000db4:	2300      	movs	r3, #0
 8000db6:	74fb      	strb	r3, [r7, #19]
	GPIO_CLKCNT(pGPIOx, ENABLE);
 8000db8:	2101      	movs	r1, #1
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f842 	bl	8000e44 <GPIO_CLKCNT>
	GPIO_Init(&CANPins);
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f923 	bl	8001010 <GPIO_Init>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <GPIO_LEDInit>:

void GPIO_LEDInit(){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOLed;
	GPIOLed.pGPIOx = GPIOA;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <GPIO_LEDInit+0x38>)
 8000ddc:	607b      	str	r3, [r7, #4]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber =  GPIO_PIN_NO_5;
 8000dde:	2305      	movs	r3, #5
 8000de0:	723b      	strb	r3, [r7, #8]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_OUT;
 8000de2:	2301      	movs	r3, #1
 8000de4:	727b      	strb	r3, [r7, #9]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed  =  GPIO_SPEED_FAST;
 8000de6:	2302      	movs	r3, #2
 8000de8:	72bb      	strb	r3, [r7, #10]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000dea:	2300      	movs	r3, #0
 8000dec:	733b      	strb	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 8000dee:	2300      	movs	r3, #0
 8000df0:	72fb      	strb	r3, [r7, #11]
	GPIO_CLKCNT(GPIOA,ENABLE);
 8000df2:	2101      	movs	r1, #1
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <GPIO_LEDInit+0x38>)
 8000df6:	f000 f825 	bl	8000e44 <GPIO_CLKCNT>
	GPIO_Init(&GPIOLed);
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f907 	bl	8001010 <GPIO_Init>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40020000 	.word	0x40020000

08000e10 <delay>:
void delay(uint32_t ms){
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < (ms * (SysClock / 1000)); i++){
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	e002      	b.n	8000e24 <delay+0x14>
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3301      	adds	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3f4      	bcc.n	8000e1e <delay+0xe>
		;
	}
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <GPIO_CLKCNT>:
 *
 * @Note              -  none

 */
void GPIO_CLKCNT(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d157      	bne.n	8000f06 <GPIO_CLKCNT+0xc2>
	{
	  if(pGPIOx == GPIOA){GPIOA_CLKEN;}
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a59      	ldr	r2, [pc, #356]	; (8000fc0 <GPIO_CLKCNT+0x17c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d106      	bne.n	8000e6c <GPIO_CLKCNT+0x28>
 8000e5e:	4b59      	ldr	r3, [pc, #356]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a58      	ldr	r2, [pc, #352]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
	}
}
 8000e6a:	e0a3      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKEN;}
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a56      	ldr	r2, [pc, #344]	; (8000fc8 <GPIO_CLKCNT+0x184>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d106      	bne.n	8000e82 <GPIO_CLKCNT+0x3e>
 8000e74:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a52      	ldr	r2, [pc, #328]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e80:	e098      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKEN;}
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <GPIO_CLKCNT+0x188>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d106      	bne.n	8000e98 <GPIO_CLKCNT+0x54>
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a4d      	ldr	r2, [pc, #308]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e96:	e08d      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKEN;}
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a4d      	ldr	r2, [pc, #308]	; (8000fd0 <GPIO_CLKCNT+0x18c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d106      	bne.n	8000eae <GPIO_CLKCNT+0x6a>
 8000ea0:	4b48      	ldr	r3, [pc, #288]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a47      	ldr	r2, [pc, #284]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eac:	e082      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKEN;}
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <GPIO_CLKCNT+0x190>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d106      	bne.n	8000ec4 <GPIO_CLKCNT+0x80>
 8000eb6:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a42      	ldr	r2, [pc, #264]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ec2:	e077      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKEN;}
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a44      	ldr	r2, [pc, #272]	; (8000fd8 <GPIO_CLKCNT+0x194>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d106      	bne.n	8000eda <GPIO_CLKCNT+0x96>
 8000ecc:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a3c      	ldr	r2, [pc, #240]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ed2:	f043 0320 	orr.w	r3, r3, #32
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ed8:	e06c      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKEN;}
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a3f      	ldr	r2, [pc, #252]	; (8000fdc <GPIO_CLKCNT+0x198>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d106      	bne.n	8000ef0 <GPIO_CLKCNT+0xac>
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a37      	ldr	r2, [pc, #220]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eee:	e061      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKEN;}
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a3b      	ldr	r2, [pc, #236]	; (8000fe0 <GPIO_CLKCNT+0x19c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d15d      	bne.n	8000fb4 <GPIO_CLKCNT+0x170>
 8000ef8:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f04:	e056      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  if(pGPIOx == GPIOA){GPIOA_CLKDI;}
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a2d      	ldr	r2, [pc, #180]	; (8000fc0 <GPIO_CLKCNT+0x17c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d106      	bne.n	8000f1c <GPIO_CLKCNT+0xd8>
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a2c      	ldr	r2, [pc, #176]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f1a:	e04b      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKDI;}
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a2a      	ldr	r2, [pc, #168]	; (8000fc8 <GPIO_CLKCNT+0x184>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d106      	bne.n	8000f32 <GPIO_CLKCNT+0xee>
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a26      	ldr	r2, [pc, #152]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f2a:	f023 0302 	bic.w	r3, r3, #2
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f30:	e040      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKDI;}
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a25      	ldr	r2, [pc, #148]	; (8000fcc <GPIO_CLKCNT+0x188>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d106      	bne.n	8000f48 <GPIO_CLKCNT+0x104>
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f40:	f023 0304 	bic.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f46:	e035      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKDI;}
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <GPIO_CLKCNT+0x18c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d106      	bne.n	8000f5e <GPIO_CLKCNT+0x11a>
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f56:	f023 0308 	bic.w	r3, r3, #8
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f5c:	e02a      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <GPIO_CLKCNT+0x190>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d106      	bne.n	8000f74 <GPIO_CLKCNT+0x130>
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f6c:	f023 0310 	bic.w	r3, r3, #16
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f72:	e01f      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <GPIO_CLKCNT+0x194>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d106      	bne.n	8000f8a <GPIO_CLKCNT+0x146>
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f82:	f023 0320 	bic.w	r3, r3, #32
 8000f86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f88:	e014      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <GPIO_CLKCNT+0x198>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d106      	bne.n	8000fa0 <GPIO_CLKCNT+0x15c>
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f9e:	e009      	b.n	8000fb4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <GPIO_CLKCNT+0x19c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d105      	bne.n	8000fb4 <GPIO_CLKCNT+0x170>
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <GPIO_CLKCNT+0x180>)
 8000fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40021400 	.word	0x40021400
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40021c00 	.word	0x40021c00

08000fe4 <GPIO_PORTCODE>:
 * @return            - the code of the given port
 *
 * @Note              -

 */
static uint8_t GPIO_PORTCODE(GPIO_RegDef_t *pGPIOx){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint8_t volatile portcode;
	uint32_t offset = (uint32_t)((uint32_t)pGPIOx - GPIOA_BASEADDR); /*calculate the offset from the base address*/
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000ff2:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000ff6:	60fb      	str	r3, [r7, #12]
	portcode = offset / 0x400;   /*portcode will range from 0 to 8 since the offset is a multiply of 400*/
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	0a9b      	lsrs	r3, r3, #10
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	72fb      	strb	r3, [r7, #11]
	return portcode;
 8001000:	7afb      	ldrb	r3, [r7, #11]
 8001002:	b2db      	uxtb	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	795b      	ldrb	r3, [r3, #5]
 8001020:	2b03      	cmp	r3, #3
 8001022:	d820      	bhi.n	8001066 <GPIO_Init+0x56>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	461a      	mov	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	791b      	ldrb	r3, [r3, #4]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2103      	movs	r1, #3
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	4619      	mov	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	400a      	ands	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6819      	ldr	r1, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	430a      	orrs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e084      	b.n	8001170 <GPIO_Init+0x160>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	795b      	ldrb	r3, [r3, #5]
 800106a:	2b04      	cmp	r3, #4
 800106c:	d11d      	bne.n	80010aa <GPIO_Init+0x9a>
			/*configure the falling edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6812      	ldr	r2, [r2, #0]
 8001078:	601a      	str	r2, [r3, #0]
			EXTI ->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800107a:	4b89      	ldr	r3, [pc, #548]	; (80012a0 <GPIO_Init+0x290>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	7912      	ldrb	r2, [r2, #4]
 8001082:	4611      	mov	r1, r2
 8001084:	2201      	movs	r2, #1
 8001086:	408a      	lsls	r2, r1
 8001088:	43d2      	mvns	r2, r2
 800108a:	4611      	mov	r1, r2
 800108c:	4a84      	ldr	r2, [pc, #528]	; (80012a0 <GPIO_Init+0x290>)
 800108e:	400b      	ands	r3, r1
 8001090:	6093      	str	r3, [r2, #8]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001092:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <GPIO_Init+0x290>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	7912      	ldrb	r2, [r2, #4]
 800109a:	4611      	mov	r1, r2
 800109c:	2201      	movs	r2, #1
 800109e:	408a      	lsls	r2, r1
 80010a0:	4611      	mov	r1, r2
 80010a2:	4a7f      	ldr	r2, [pc, #508]	; (80012a0 <GPIO_Init+0x290>)
 80010a4:	430b      	orrs	r3, r1
 80010a6:	60d3      	str	r3, [r2, #12]
 80010a8:	e03d      	b.n	8001126 <GPIO_Init+0x116>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	795b      	ldrb	r3, [r3, #5]
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	d11d      	bne.n	80010ee <GPIO_Init+0xde>
			/*configure the rising edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010be:	4b78      	ldr	r3, [pc, #480]	; (80012a0 <GPIO_Init+0x290>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	7912      	ldrb	r2, [r2, #4]
 80010c6:	4611      	mov	r1, r2
 80010c8:	2201      	movs	r2, #1
 80010ca:	408a      	lsls	r2, r1
 80010cc:	43d2      	mvns	r2, r2
 80010ce:	4611      	mov	r1, r2
 80010d0:	4a73      	ldr	r2, [pc, #460]	; (80012a0 <GPIO_Init+0x290>)
 80010d2:	400b      	ands	r3, r1
 80010d4:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010d6:	4b72      	ldr	r3, [pc, #456]	; (80012a0 <GPIO_Init+0x290>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	7912      	ldrb	r2, [r2, #4]
 80010de:	4611      	mov	r1, r2
 80010e0:	2201      	movs	r2, #1
 80010e2:	408a      	lsls	r2, r1
 80010e4:	4611      	mov	r1, r2
 80010e6:	4a6e      	ldr	r2, [pc, #440]	; (80012a0 <GPIO_Init+0x290>)
 80010e8:	430b      	orrs	r3, r1
 80010ea:	6093      	str	r3, [r2, #8]
 80010ec:	e01b      	b.n	8001126 <GPIO_Init+0x116>
		}
		else{
			/*configure the falling and rising edge trigger registers*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010fa:	4b69      	ldr	r3, [pc, #420]	; (80012a0 <GPIO_Init+0x290>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	7912      	ldrb	r2, [r2, #4]
 8001102:	4611      	mov	r1, r2
 8001104:	2201      	movs	r2, #1
 8001106:	408a      	lsls	r2, r1
 8001108:	4611      	mov	r1, r2
 800110a:	4a65      	ldr	r2, [pc, #404]	; (80012a0 <GPIO_Init+0x290>)
 800110c:	430b      	orrs	r3, r1
 800110e:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001110:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <GPIO_Init+0x290>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	7912      	ldrb	r2, [r2, #4]
 8001118:	4611      	mov	r1, r2
 800111a:	2201      	movs	r2, #1
 800111c:	408a      	lsls	r2, r1
 800111e:	4611      	mov	r1, r2
 8001120:	4a5f      	ldr	r2, [pc, #380]	; (80012a0 <GPIO_Init+0x290>)
 8001122:	430b      	orrs	r3, r1
 8001124:	6093      	str	r3, [r2, #8]
		}

		/*configure the gpio port selection(SYSCONFIG_EXTI register)*/
		uint8_t tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;  /*which EXTICR to configure*/
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	791b      	ldrb	r3, [r3, #4]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	74fb      	strb	r3, [r7, #19]
		uint8_t tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;  /*which Field of the EXTICR to configure*/
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	791b      	ldrb	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_PORTCODE(pGPIOHandle->pGPIOx);          /*the code that represents the port whoes pin is goning to trigger the interrupt*/
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff51 	bl	8000fe4 <GPIO_PORTCODE>
 8001142:	4603      	mov	r3, r0
 8001144:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[tmp1] = (portcode << tmp2 * 4);                  /*every field is four bits wide so  we multiply by 4*/
 8001146:	7c7a      	ldrb	r2, [r7, #17]
 8001148:	7cbb      	ldrb	r3, [r7, #18]
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	fa02 f103 	lsl.w	r1, r2, r3
 8001150:	4a54      	ldr	r2, [pc, #336]	; (80012a4 <GPIO_Init+0x294>)
 8001152:	7cfb      	ldrb	r3, [r7, #19]
 8001154:	3302      	adds	r3, #2
 8001156:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/*configure the exti interrupt delivery(interrupt mask register)*/
		EXTI ->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800115a:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <GPIO_Init+0x290>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	7912      	ldrb	r2, [r2, #4]
 8001162:	4611      	mov	r1, r2
 8001164:	2201      	movs	r2, #1
 8001166:	408a      	lsls	r2, r1
 8001168:	4611      	mov	r1, r2
 800116a:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <GPIO_Init+0x290>)
 800116c:	430b      	orrs	r3, r1
 800116e:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	799b      	ldrb	r3, [r3, #6]
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	791b      	ldrb	r3, [r3, #4]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2103      	movs	r1, #3
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	4619      	mov	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	400a      	ands	r2, r1
 800119e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6899      	ldr	r1, [r3, #8]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	79db      	ldrb	r3, [r3, #7]
 80011b4:	461a      	mov	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	791b      	ldrb	r3, [r3, #4]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2103      	movs	r1, #3
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4619      	mov	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	400a      	ands	r2, r1
 80011de:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68d9      	ldr	r1, [r3, #12]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7a1b      	ldrb	r3, [r3, #8]
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	4619      	mov	r1, r3
 800120c:	2301      	movs	r3, #1
 800120e:	408b      	lsls	r3, r1
 8001210:	43db      	mvns	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6859      	ldr	r1, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	430a      	orrs	r2, r1
 800122a:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	795b      	ldrb	r3, [r3, #5]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d131      	bne.n	8001298 <GPIO_Init+0x288>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	791b      	ldrb	r3, [r3, #4]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	7c3a      	ldrb	r2, [r7, #16]
 800124c:	3208      	adds	r2, #8
 800124e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	7c3a      	ldrb	r2, [r7, #16]
 8001266:	4001      	ands	r1, r0
 8001268:	3208      	adds	r2, #8
 800126a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	7c3a      	ldrb	r2, [r7, #16]
 8001274:	3208      	adds	r2, #8
 8001276:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7a5b      	ldrb	r3, [r3, #9]
 800127e:	461a      	mov	r2, r3
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	4618      	mov	r0, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	7c3a      	ldrb	r2, [r7, #16]
 8001290:	4301      	orrs	r1, r0
 8001292:	3208      	adds	r2, #8
 8001294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013c00 	.word	0x40013c00
 80012a4:	40013800 	.word	0x40013800

080012a8 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	70fb      	strb	r3, [r7, #3]
 80012b4:	4613      	mov	r3, r2
 80012b6:	70bb      	strb	r3, [r7, #2]

	if(Value == SET)
 80012b8:	78bb      	ldrb	r3, [r7, #2]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d109      	bne.n	80012d2 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	78fa      	ldrb	r2, [r7, #3]
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 80012d0:	e009      	b.n	80012e6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	2101      	movs	r1, #1
 80012da:	fa01 f202 	lsl.w	r2, r1, r2
 80012de:	43d2      	mvns	r2, r2
 80012e0:	401a      	ands	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	615a      	str	r2, [r3, #20]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <GPIO_ToggleOutputPin>:
 *
 * @Note              -

 */
inline void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	78fa      	ldrb	r2, [r7, #3]
 8001304:	2101      	movs	r1, #1
 8001306:	fa01 f202 	lsl.w	r2, r1, r2
 800130a:	405a      	eors	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	615a      	str	r2, [r3, #20]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <I2C_Enable>:
static void  I2C_GenerateStartCondition(I2C_type *pI2Cx);
static void  I2C_GenerateStopCondition(I2C_type *pI2Cx);
static void I2C_ExecuteAddressPhase(I2C_type *pI2Cx, uint8_t SlaveAddress);
static void I2C_ClearADDRFlag(I2C_Handle *pI2CHandle);

void I2C_Enable(I2C_type *pI2Cx, uint8_t EnorDi){
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE){
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d106      	bne.n	800133c <I2C_Enable+0x20>
      pI2Cx ->CR1 |= (1 << I2C_CR1_PE);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f043 0201 	orr.w	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
	}
	else{
		pI2Cx ->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 800133a:	e005      	b.n	8001348 <I2C_Enable+0x2c>
		pI2Cx ->CR1 &= ~(1 << I2C_CR1_PE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 0201 	bic.w	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <I2C_CLKCNT>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_CLKCNT(I2C_type *pI2Cx, uint8_t EnorDi){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d120      	bne.n	80013a8 <I2C_CLKCNT+0x54>
		if(pI2Cx == I2C1){I2C1_CLKEN();}
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <I2C_CLKCNT+0xa0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d106      	bne.n	800137c <I2C_CLKCNT+0x28>
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <I2C_CLKCNT+0xa4>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <I2C_CLKCNT+0xa4>)
 8001374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
		if(pI2Cx == I2C1){I2C1_CLKDI();}
		else if(pI2Cx == I2C2){I2C2_CLKDI();}
		else if(pI2Cx == I2C3){I2C3_CLKDI();}

	}
}
 800137a:	e035      	b.n	80013e8 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C2){I2C2_CLKEN();}
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <I2C_CLKCNT+0xa8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d106      	bne.n	8001392 <I2C_CLKCNT+0x3e>
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <I2C_CLKCNT+0xa4>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <I2C_CLKCNT+0xa4>)
 800138a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001390:	e02a      	b.n	80013e8 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C3){I2C3_CLKEN();}
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <I2C_CLKCNT+0xac>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d126      	bne.n	80013e8 <I2C_CLKCNT+0x94>
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <I2C_CLKCNT+0xa4>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013a6:	e01f      	b.n	80013e8 <I2C_CLKCNT+0x94>
		if(pI2Cx == I2C1){I2C1_CLKDI();}
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <I2C_CLKCNT+0xa0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d106      	bne.n	80013be <I2C_CLKCNT+0x6a>
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013bc:	e014      	b.n	80013e8 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C2){I2C2_CLKDI();}
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <I2C_CLKCNT+0xa8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d106      	bne.n	80013d4 <I2C_CLKCNT+0x80>
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013d2:	e009      	b.n	80013e8 <I2C_CLKCNT+0x94>
		else if(pI2Cx == I2C3){I2C3_CLKDI();}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <I2C_CLKCNT+0xac>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d105      	bne.n	80013e8 <I2C_CLKCNT+0x94>
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <I2C_CLKCNT+0xa4>)
 80013e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40005400 	.word	0x40005400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40005c00 	.word	0x40005c00
 8001400:	40005800 	.word	0x40005800

08001404 <I2C_Init>:

void I2C_Init(I2C_Handle *pI2CHandle){
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
* 4.Program the I2C_CR1 register to enable the peripheral
* 5.Set the START bit in the I2C_CR1 register to generate a Start condition
*/

/*enabling the I2C peripheral*/
  I2C_Enable(pI2CHandle->pI2Cx, DISABLE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff82 	bl	800131c <I2C_Enable>

/*reset the I2C first*/
  pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_SWRST);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001426:	601a      	str	r2, [r3, #0]
  pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_SWRST);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001436:	601a      	str	r2, [r3, #0]

  uint32_t tmp;
/*configuring the Freq field in CR2 first*/
  tmp = getSystemClock() / 1000000U;
 8001438:	f000 fa10 	bl	800185c <getSystemClock>
 800143c:	4603      	mov	r3, r0
 800143e:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <I2C_Init+0x1bc>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	0c9b      	lsrs	r3, r3, #18
 8001446:	617b      	str	r3, [r7, #20]
  pI2CHandle->pI2Cx->CR2 = (tmp & 0x3FU);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001452:	605a      	str	r2, [r3, #4]

/*configuring the F/S if standard mode or fast mode then changing ccr value in CCR register*/
  /*configuring F/S*/
  if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SM){/*if it's standard mode*/
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <I2C_Init+0x1c0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d81c      	bhi.n	8001498 <I2C_Init+0x94>
	/*configure the mode*/
	pI2CHandle->pI2Cx->CCR &= ~(1 << I2C_CCR_F_S);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69da      	ldr	r2, [r3, #28]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800146c:	61da      	str	r2, [r3, #28]
	/*CCR = system clock / (2 * speed) */
	tmp = getSystemClock();
 800146e:	f000 f9f5 	bl	800185c <getSystemClock>
 8001472:	6178      	str	r0, [r7, #20]
	uint32_t CCR_Value = tmp / (4 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001480:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->CCR |= (CCR_Value << I2C_CCR_CCR) & 0x3FFU;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	69d9      	ldr	r1, [r3, #28]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	61da      	str	r2, [r3, #28]
 8001496:	e042      	b.n	800151e <I2C_Init+0x11a>
  }
  else{/*fast mode*/
	/*configure the mode*/
	pI2CHandle->pI2Cx->CCR |= (1 << I2C_CCR_F_S);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	69da      	ldr	r2, [r3, #28]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014a6:	61da      	str	r2, [r3, #28]
	/*configure the duty cycle*/
	tmp = (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY) & 0x1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->CCR |= tmp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	69d9      	ldr	r1, [r3, #28]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	61da      	str	r2, [r3, #28]
	/*configure the CCR field*/
	if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7a9b      	ldrb	r3, [r3, #10]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d115      	bne.n	80014f0 <I2C_Init+0xec>
	  tmp = (getSystemClock() / (3 *pI2CHandle->I2C_Config.I2C_SCLSpeed)) & 0xFFFU;
 80014c4:	f000 f9ca 	bl	800185c <getSystemClock>
 80014c8:	4601      	mov	r1, r0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	617b      	str	r3, [r7, #20]
	  pI2CHandle->pI2Cx->CCR |= tmp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	69d9      	ldr	r1, [r3, #28]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	61da      	str	r2, [r3, #28]
 80014ee:	e016      	b.n	800151e <I2C_Init+0x11a>
	}
	else{
	  tmp = (getSystemClock() / (25 *pI2CHandle->I2C_Config.I2C_SCLSpeed)) & 0xFFFU;
 80014f0:	f000 f9b4 	bl	800185c <getSystemClock>
 80014f4:	4601      	mov	r1, r0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	009a      	lsls	r2, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	fbb1 f3f3 	udiv	r3, r1, r3
 8001508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150c:	617b      	str	r3, [r7, #20]
	  pI2CHandle->pI2Cx->CCR |= tmp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	69d9      	ldr	r1, [r3, #28]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	430a      	orrs	r2, r1
 800151c:	61da      	str	r2, [r3, #28]
	}
  }

  /*configure the rise time*/
  if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SM){/*if it's standered mode*/
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <I2C_Init+0x1c0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d110      	bne.n	800154a <I2C_Init+0x146>
	/*rise time = (system time period / maximum allowed rise time for sm) + 1*/
	uint32_t clock = getSystemClock();
 8001528:	f000 f998 	bl	800185c <getSystemClock>
 800152c:	60f8      	str	r0, [r7, #12]
	tmp = (clock / 1000000U) + 1;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <I2C_Init+0x1bc>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->TRISE = tmp & 0x3FU;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001546:	621a      	str	r2, [r3, #32]
 8001548:	e012      	b.n	8001570 <I2C_Init+0x16c>
  }
  else{/*fast mode*/
		tmp = ((getSystemClock() * 300) / 1000000U) + 1;
 800154a:	f000 f987 	bl	800185c <getSystemClock>
 800154e:	4603      	mov	r3, r0
 8001550:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <I2C_Init+0x1bc>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
		pI2CHandle->pI2Cx->TRISE = tmp & 0x3FU;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800156e:	621a      	str	r2, [r3, #32]
	}

  /*configure Device Own Address in case it's used as slave*/
  pI2CHandle ->pI2Cx->OAR1 |= (DEVICE_ADDRESS << 1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 02ce 	orr.w	r2, r2, #206	; 0xce
 800157e:	609a      	str	r2, [r3, #8]

  /*configuring the addressing mode*/
  tmp = pI2CHandle->I2C_Config.I2C_AddressMode;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7adb      	ldrb	r3, [r3, #11]
 8001584:	617b      	str	r3, [r7, #20]
  pI2CHandle->pI2Cx->OAR1 |= ((tmp << I2C_OAR1_ADD0) & 0x7FU);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]

  /*enabling the ACK*/
    pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015a8:	601a      	str	r2, [r3, #0]

  /*enabling the I2C peripheral*/
    I2C_Enable(pI2CHandle->pI2Cx, ENABLE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2101      	movs	r1, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff feb3 	bl	800131c <I2C_Enable>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	000186a0 	.word	0x000186a0

080015c8 <I2C_GetFlagStatus>:
	if(pI2Cx == I2C1){I2C1_CLKDI();}
	else if(pI2Cx == I2C2){I2C2_CLKDI();}
	else{I2C3_CLKDI();}
}

uint8_t I2C_GetFlagStatus(I2C_type *pI2Cx ,uint8_t FlagName){
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
	if(pI2Cx ->SR1 & FlagName){
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <I2C_GetFlagStatus+0x1c>
		return SET;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <I2C_GetFlagStatus+0x1e>
	}
	return RESET;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <I2C_MasterSendData>:


void I2C_MasterSendData(I2C_Handle *pI2CHandle, uint8_t *pTxBuffer, uint8_t Len, uint8_t SlaveAddress){
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	4611      	mov	r1, r2
 80015fe:	461a      	mov	r2, r3
 8001600:	460b      	mov	r3, r1
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	71bb      	strb	r3, [r7, #6]

// 1. Generate the START condition
I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 f8dd 	bl	80017cc <I2C_GenerateStartCondition>

//2. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx,(SlaveAddress << 1) | 0x00);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	79bb      	ldrb	r3, [r7, #6]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4619      	mov	r1, r3
 800161e:	4610      	mov	r0, r2
 8001620:	f000 f8fc 	bl	800181c <I2C_ExecuteAddressPhase>

//6. send the data until len becomes 0
  while(Len > 0){
 8001624:	e012      	b.n	800164c <I2C_MasterSendData+0x5a>
    /*clearing (EV8)*/
    pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	611a      	str	r2, [r3, #16]
    Len--;
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	3b01      	subs	r3, #1
 8001634:	71fb      	strb	r3, [r7, #7]
    pTxBuffer++;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
    /*waiting for (EV8)*/
    while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_TxE));
 800163c:	bf00      	nop
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f8      	beq.n	800163e <I2C_MasterSendData+0x4c>
  while(Len > 0){
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1e9      	bne.n	8001626 <I2C_MasterSendData+0x34>
  /*wait for (EV8_2) BTF to be set first*/
  //while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_BTF));

/*clearing (EV8_2) by Setting the STOP bit in CR1 register*/
  //I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <I2C_ProdCastData>:

void I2C_ProdCastData(I2C_Handle *pI2CHandle, uint8_t *pTxBuffer, uint8_t Len){
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	4613      	mov	r3, r2
 8001668:	71fb      	strb	r3, [r7, #7]
	  while(Len > 0){
 800166a:	e012      	b.n	8001692 <I2C_ProdCastData+0x36>
	    /*clearing (EV8)*/
	    pI2CHandle->pI2Cx->DR = *pTxBuffer;
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	611a      	str	r2, [r3, #16]
	    Len--;
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	3b01      	subs	r3, #1
 800167a:	71fb      	strb	r3, [r7, #7]
	    pTxBuffer++;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3301      	adds	r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
	    /*waiting for (EV8)*/
	    while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_TxE));
 8001682:	bf00      	nop
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f8      	beq.n	8001684 <I2C_ProdCastData+0x28>
	  while(Len > 0){
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1e9      	bne.n	800166c <I2C_ProdCastData+0x10>
	  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <I2C_MasterRecieveData>:


void I2C_MasterRecieveData(I2C_Handle *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddress){
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	4611      	mov	r1, r2
 80016b2:	461a      	mov	r2, r3
 80016b4:	460b      	mov	r3, r1
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	4613      	mov	r3, r2
 80016ba:	71bb      	strb	r3, [r7, #6]

	//1.generate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 f883 	bl	80017cc <I2C_GenerateStartCondition>

	//2. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx,(SlaveAddress << 1) | 0x01);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4619      	mov	r1, r3
 80016da:	4610      	mov	r0, r2
 80016dc:	f000 f89e 	bl	800181c <I2C_ExecuteAddressPhase>

if(Len == 1){/*if single byte to be read*/
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d134      	bne.n	8001750 <I2C_MasterRecieveData+0xaa>
 /* Write the slave Address, and wait for the ADDR bit (bit 1 in SR1) to be set
  * the Acknowledge disable is made during EV6 (before ADDR flag is cleared) and the STOP condition generation is made after EV6
  * Wait for the RXNE (Receive Buffer not Empty) bit to set
  * Read the data from the DR
  */
  pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_STOP);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016f4:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SR1_RxNE));
 80016f6:	bf00      	nop
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2106      	movs	r1, #6
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff62 	bl	80015c8 <I2C_GetFlagStatus>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f6      	beq.n	80016f8 <I2C_MasterRecieveData+0x52>
  *pRxBuffer = pI2CHandle->pI2Cx->DR;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	701a      	strb	r2, [r3, #0]
	  pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	  while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_RXNE));
	  *pRxBuffer = pI2CHandle->pI2Cx->DR;
	  I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
	}
}
 8001716:	e055      	b.n	80017c4 <I2C_MasterRecieveData+0x11e>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001726:	601a      	str	r2, [r3, #0]
		while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_RXNE));
 8001728:	bf00      	nop
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f8      	beq.n	800172a <I2C_MasterRecieveData+0x84>
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	701a      	strb	r2, [r3, #0]
		Len--;
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	3b01      	subs	r3, #1
 8001748:	71fb      	strb	r3, [r7, #7]
		pRxBuffer++;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3301      	adds	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
	  while(Len > 2){
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d8e0      	bhi.n	8001718 <I2C_MasterRecieveData+0x72>
	  pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001764:	601a      	str	r2, [r3, #0]
	  while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_RXNE));
 8001766:	bf00      	nop
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f8      	beq.n	8001768 <I2C_MasterRecieveData+0xc2>
	  *pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	701a      	strb	r2, [r3, #0]
	  Len--;
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	3b01      	subs	r3, #1
 8001786:	71fb      	strb	r3, [r7, #7]
	  pRxBuffer++;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3301      	adds	r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
	  pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179c:	601a      	str	r2, [r3, #0]
	  while(! (pI2CHandle->pI2Cx->SR1 & I2C_FLAG_RXNE));
 800179e:	bf00      	nop
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f8      	beq.n	80017a0 <I2C_MasterRecieveData+0xfa>
	  *pRxBuffer = pI2CHandle->pI2Cx->DR;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	701a      	strb	r2, [r3, #0]
	  I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f81c 	bl	80017fc <I2C_GenerateStopCondition>
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <I2C_GenerateStartCondition>:

}



static void  I2C_GenerateStartCondition(I2C_type *pI2Cx){
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	601a      	str	r2, [r3, #0]
  while( ! (pI2Cx->SR1 & I2C_FLAG_SB));
 80017e0:	bf00      	nop
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f9      	beq.n	80017e2 <I2C_GenerateStartCondition+0x16>
}
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <I2C_GenerateStopCondition>:

static void  I2C_GenerateStopCondition(I2C_type *pI2Cx){
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	601a      	str	r2, [r3, #0]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <I2C_ExecuteAddressPhase>:

static void I2C_ExecuteAddressPhase(I2C_type *pI2Cx, uint8_t SlaveAddress){
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
/*sending the address of the slave followed by the R/nW bit*/
  pI2Cx->DR = SlaveAddress;
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	611a      	str	r2, [r3, #16]
  while (! (pI2Cx->SR1 & I2C_FLAG_ADDR));
 800182e:	bf00      	nop
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f9      	beq.n	8001830 <I2C_ExecuteAddressPhase+0x14>
  uint32_t DummyRead = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  DummyRead += pI2Cx->SR1;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  DummyRead = pI2Cx ->SR2;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	60fb      	str	r3, [r7, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <getSystemClock>:
#include "RCC_driver.h"

uint16_t AHB_PRESCALERS[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB_PRESCALERS[4] = {2, 4, 8, 16};

uint32_t getSystemClock(void){
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
uint8_t PLLP1 = ((RCC->PLLCFGR >> 16) & 0x3U);
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <getSystemClock+0xd8>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	0c1b      	lsrs	r3, r3, #16
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	75bb      	strb	r3, [r7, #22]
uint8_t PLLP;
uint32_t fPLL,fPLLR;
switch(PLLP1){
 8001870:	7dbb      	ldrb	r3, [r7, #22]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d816      	bhi.n	80018a4 <getSystemClock+0x48>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <getSystemClock+0x20>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	0800188d 	.word	0x0800188d
 8001880:	08001893 	.word	0x08001893
 8001884:	08001899 	.word	0x08001899
 8001888:	0800189f 	.word	0x0800189f
  case(0):
		  PLLP = 2;
 800188c:	2302      	movs	r3, #2
 800188e:	75fb      	strb	r3, [r7, #23]
          break;
 8001890:	e008      	b.n	80018a4 <getSystemClock+0x48>
  case(1):
		  PLLP = 4;
 8001892:	2304      	movs	r3, #4
 8001894:	75fb      	strb	r3, [r7, #23]
          break;
 8001896:	e005      	b.n	80018a4 <getSystemClock+0x48>
  case(2):
		  PLLP = 6;
 8001898:	2306      	movs	r3, #6
 800189a:	75fb      	strb	r3, [r7, #23]
          break;
 800189c:	e002      	b.n	80018a4 <getSystemClock+0x48>
  case(3):
		  PLLP = 8;
 800189e:	2308      	movs	r3, #8
 80018a0:	75fb      	strb	r3, [r7, #23]
          break;
 80018a2:	bf00      	nop
}
uint16_t PLLN = ((RCC ->PLLCFGR >> 6) & 0x1FF);
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <getSystemClock+0xd8>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b0:	82bb      	strh	r3, [r7, #20]
uint16_t PLLM = (RCC ->PLLCFGR & 0x3FU);
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <getSystemClock+0xd8>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018bc:	827b      	strh	r3, [r7, #18]
uint16_t PLLR = (RCC ->PLLCFGR >> 28) & 0x7U;
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <getSystemClock+0xd8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	0f1b      	lsrs	r3, r3, #28
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	823b      	strh	r3, [r7, #16]
uint32_t fVCO = HSI_CLOCK * (PLLN / PLLM); /*HSI is used as pll input*/
 80018cc:	8aba      	ldrh	r2, [r7, #20]
 80018ce:	8a7b      	ldrh	r3, [r7, #18]
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <getSystemClock+0xdc>)
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	60fb      	str	r3, [r7, #12]
	switch (RCC ->CFGR >> 2){
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <getSystemClock+0xd8>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d81c      	bhi.n	8001924 <getSystemClock+0xc8>
 80018ea:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <getSystemClock+0x94>)
 80018ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f0:	08001901 	.word	0x08001901
 80018f4:	08001905 	.word	0x08001905
 80018f8:	08001909 	.word	0x08001909
 80018fc:	08001917 	.word	0x08001917
		case(0) : /*HSI is used*/
			return HSI_CLOCK; /*HSI clock speed*/
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <getSystemClock+0xdc>)
 8001902:	e010      	b.n	8001926 <getSystemClock+0xca>
		case(1) : /*HSE is used*/
			return HSE_CLOCK;
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <getSystemClock+0xe0>)
 8001906:	e00e      	b.n	8001926 <getSystemClock+0xca>
		case(2) : /*PLL is used*/
		   fPLL = fVCO * PLLP;
 8001908:	7dfa      	ldrb	r2, [r7, #23]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	607b      	str	r3, [r7, #4]
		  return fPLL;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	e007      	b.n	8001926 <getSystemClock+0xca>
		case(3) : /*PLL_R is used*/
			/*Clock frequancy = VCO / PLLR*/
			 fPLLR = fVCO / PLLR;
 8001916:	8a3b      	ldrh	r3, [r7, #16]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	60bb      	str	r3, [r7, #8]
			return fPLLR;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	e000      	b.n	8001926 <getSystemClock+0xca>
	}
	return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	00f42400 	.word	0x00f42400
 800193c:	007a1200 	.word	0x007a1200

08001940 <getAPBClock>:
	}
	uint32_t AHBClock = SystemClock / AHB_PRESCALER;
	return AHBClock;
}

uint32_t getAPBClock(uint32_t BusAddress){
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	if(BusAddress == APB1PREF_BASEADDR){
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194e:	d11a      	bne.n	8001986 <getAPBClock+0x46>
		uint8_t APB1PRESCALER;
		if(((RCC ->CFGR >> 10) & 0x7U) < 4){
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <getAPBClock+0x84>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	0a9b      	lsrs	r3, r3, #10
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <getAPBClock+0x24>
		  APB1PRESCALER = 1;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
 8001962:	e009      	b.n	8001978 <getAPBClock+0x38>
		}else{
		  APB1PRESCALER = APB_PRESCALERS[((RCC ->CFGR >> 10) & 0x7U) - 4];
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <getAPBClock+0x84>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	0a9b      	lsrs	r3, r3, #10
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	3b04      	subs	r3, #4
 8001970:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <getAPBClock+0x88>)
 8001972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001976:	73fb      	strb	r3, [r7, #15]
		}
		return (getSystemClock() / APB1PRESCALER);
 8001978:	f7ff ff70 	bl	800185c <getSystemClock>
 800197c:	4602      	mov	r2, r0
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	fbb2 f3f3 	udiv	r3, r2, r3
 8001984:	e019      	b.n	80019ba <getAPBClock+0x7a>
	}
	else{
		uint8_t APB2PRESCALER;
		if(((RCC ->CFGR >> 13) & 0x7U) < 4){
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <getAPBClock+0x84>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	0b5b      	lsrs	r3, r3, #13
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <getAPBClock+0x5a>
		  APB2PRESCALER = 1;
 8001994:	2301      	movs	r3, #1
 8001996:	73bb      	strb	r3, [r7, #14]
 8001998:	e009      	b.n	80019ae <getAPBClock+0x6e>
		}else{
		  APB2PRESCALER = APB_PRESCALERS[((RCC ->CFGR >> 10) & 0x7U) - 4];
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <getAPBClock+0x84>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	0a9b      	lsrs	r3, r3, #10
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	3b04      	subs	r3, #4
 80019a6:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <getAPBClock+0x88>)
 80019a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ac:	73bb      	strb	r3, [r7, #14]
		}
		return (getSystemClock() / APB2PRESCALER);
 80019ae:	f7ff ff55 	bl	800185c <getSystemClock>
 80019b2:	4602      	mov	r2, r0
 80019b4:	7bbb      	ldrb	r3, [r7, #14]
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
	}
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	20000000 	.word	0x20000000

080019cc <RTC_ReadTime>:
#include "I2C_driver.h"

uint8_t SlaveAddress = 0x68U;
uint8_t StartAdress = 0x00U;

void RTC_ReadTime(uint8_t *pRxBuffer, I2C_Handle *pI2CHandle){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]

	I2C_MasterSendData(pI2CHandle, &StartAdress, sizeof(StartAdress), SlaveAddress);
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <RTC_ReadTime+0x30>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2201      	movs	r2, #1
 80019dc:	4908      	ldr	r1, [pc, #32]	; (8001a00 <RTC_ReadTime+0x34>)
 80019de:	6838      	ldr	r0, [r7, #0]
 80019e0:	f7ff fe07 	bl	80015f2 <I2C_MasterSendData>

	I2C_MasterRecieveData(pI2CHandle, pRxBuffer, 7, SlaveAddress);
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <RTC_ReadTime+0x30>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2207      	movs	r2, #7
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	6838      	ldr	r0, [r7, #0]
 80019ee:	f7ff fe5a 	bl	80016a6 <I2C_MasterRecieveData>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008
 8001a00:	200001fc 	.word	0x200001fc

08001a04 <RTC_SetTime>:

void RTC_SetTime(I2C_Handle *pI2CHandle){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	uint8_t time[5] = {0x56, 0x9, 0x26,0x3, 0x24};
 8001a0c:	4a44      	ldr	r2, [pc, #272]	; (8001b20 <RTC_SetTime+0x11c>)
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a16:	6018      	str	r0, [r3, #0]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	7019      	strb	r1, [r3, #0]
	uint8_t addresses[7] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06};
 8001a1c:	4a41      	ldr	r2, [pc, #260]	; (8001b24 <RTC_SetTime+0x120>)
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a26:	6018      	str	r0, [r3, #0]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	8019      	strh	r1, [r3, #0]
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	0c0a      	lsrs	r2, r1, #16
 8001a30:	701a      	strb	r2, [r3, #0]
	//halt the clock
	I2C_MasterSendData(pI2CHandle, &addresses[0], sizeof(StartAdress), SlaveAddress);
 8001a32:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <RTC_SetTime+0x124>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f107 0108 	add.w	r1, r7, #8
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fdd8 	bl	80015f2 <I2C_MasterSendData>
	I2C_ProdCastData(pI2CHandle, (uint8_t *)(0x1 << 7), 1);
 8001a42:	2201      	movs	r2, #1
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fe08 	bl	800165c <I2C_ProdCastData>
	//set the minute
	I2C_MasterSendData(pI2CHandle, &addresses[1], sizeof(StartAdress), SlaveAddress);
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <RTC_SetTime+0x124>)
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	1c59      	adds	r1, r3, #1
 8001a56:	4613      	mov	r3, r2
 8001a58:	2201      	movs	r2, #1
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fdc9 	bl	80015f2 <I2C_MasterSendData>
	I2C_ProdCastData(pI2CHandle, &time[0], 1);
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2201      	movs	r2, #1
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fdf7 	bl	800165c <I2C_ProdCastData>
	//set the hour
	I2C_MasterSendData(pI2CHandle, &addresses[2], sizeof(StartAdress), SlaveAddress);
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <RTC_SetTime+0x124>)
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	1c99      	adds	r1, r3, #2
 8001a78:	4613      	mov	r3, r2
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fdb8 	bl	80015f2 <I2C_MasterSendData>
	I2C_ProdCastData(pI2CHandle, &time[1], 1);
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	3301      	adds	r3, #1
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fde5 	bl	800165c <I2C_ProdCastData>
	//set the day
	I2C_MasterSendData(pI2CHandle, &addresses[3], sizeof(StartAdress), SlaveAddress);
 8001a92:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <RTC_SetTime+0x124>)
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	1cd9      	adds	r1, r3, #3
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fda6 	bl	80015f2 <I2C_MasterSendData>
	I2C_ProdCastData(pI2CHandle, &time[2], 1);
 8001aa6:	f107 0310 	add.w	r3, r7, #16
 8001aaa:	3302      	adds	r3, #2
 8001aac:	2201      	movs	r2, #1
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fdd3 	bl	800165c <I2C_ProdCastData>
	//set the month
	I2C_MasterSendData(pI2CHandle, &addresses[5], sizeof(StartAdress), SlaveAddress);
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <RTC_SetTime+0x124>)
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	1d59      	adds	r1, r3, #5
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fd94 	bl	80015f2 <I2C_MasterSendData>
	I2C_ProdCastData(pI2CHandle, &time[3], 1);
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	3303      	adds	r3, #3
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fdc1 	bl	800165c <I2C_ProdCastData>
	//set the year
	I2C_MasterSendData(pI2CHandle, &addresses[6], sizeof(StartAdress), SlaveAddress);
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <RTC_SetTime+0x124>)
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	1d99      	adds	r1, r3, #6
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fd82 	bl	80015f2 <I2C_MasterSendData>
	I2C_ProdCastData(pI2CHandle, &time[4], 1);
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	3304      	adds	r3, #4
 8001af4:	2201      	movs	r2, #1
 8001af6:	4619      	mov	r1, r3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fdaf 	bl	800165c <I2C_ProdCastData>
	//release the clock
	I2C_MasterSendData(pI2CHandle, &addresses[0], sizeof(StartAdress), SlaveAddress);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <RTC_SetTime+0x124>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f107 0108 	add.w	r1, r7, #8
 8001b06:	2201      	movs	r2, #1
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff fd72 	bl	80015f2 <I2C_MasterSendData>
	I2C_ProdCastData(pI2CHandle, (uint8_t *)(0x0 << 7), 1);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2100      	movs	r1, #0
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fda2 	bl	800165c <I2C_ProdCastData>
}
 8001b18:	bf00      	nop
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	080054c0 	.word	0x080054c0
 8001b24:	080054c8 	.word	0x080054c8
 8001b28:	20000008 	.word	0x20000008

08001b2c <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_type *pUSARTx, uint32_t BaudRate)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a32      	ldr	r2, [pc, #200]	; (8001c08 <USART_SetBaudRate+0xdc>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d003      	beq.n	8001b4a <USART_SetBaudRate+0x1e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a31      	ldr	r2, [pc, #196]	; (8001c0c <USART_SetBaudRate+0xe0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d104      	bne.n	8001b54 <USART_SetBaudRate+0x28>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = getAPBClock(APB2PREF_BASEADDR);
 8001b4a:	4831      	ldr	r0, [pc, #196]	; (8001c10 <USART_SetBaudRate+0xe4>)
 8001b4c:	f7ff fef8 	bl	8001940 <getAPBClock>
 8001b50:	61f8      	str	r0, [r7, #28]
 8001b52:	e004      	b.n	8001b5e <USART_SetBaudRate+0x32>
  }else
  {
	  PCLKx = getAPBClock(APB1PREF_BASEADDR);
 8001b54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b58:	f7ff fef2 	bl	8001940 <getAPBClock>
 8001b5c:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <USART_SetBaudRate+0x56>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	009a      	lsls	r2, r3, #2
 8001b74:	441a      	add	r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	e00a      	b.n	8001b98 <USART_SetBaudRate+0x6c>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	009a      	lsls	r2, r3, #2
 8001b8c:	441a      	add	r2, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <USART_SetBaudRate+0xe8>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2264      	movs	r2, #100	; 0x64
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00a      	beq.n	8001bde <USART_SetBaudRate+0xb2>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	3332      	adds	r3, #50	; 0x32
 8001bce:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <USART_SetBaudRate+0xe8>)
 8001bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd4:	095b      	lsrs	r3, r3, #5
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e009      	b.n	8001bf2 <USART_SetBaudRate+0xc6>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	3332      	adds	r3, #50	; 0x32
 8001be4:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <USART_SetBaudRate+0xe8>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	609a      	str	r2, [r3, #8]
}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40011000 	.word	0x40011000
 8001c0c:	40011400 	.word	0x40011400
 8001c10:	40010000 	.word	0x40010000
 8001c14:	51eb851f 	.word	0x51eb851f

08001c18 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f880 	bl	8001d30 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	791b      	ldrb	r3, [r3, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d104      	bne.n	8001c42 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e010      	b.n	8001c64 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	791b      	ldrb	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d104      	bne.n	8001c54 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	e007      	b.n	8001c64 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	791b      	ldrb	r3, [r3, #4]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d103      	bne.n	8001c64 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f043 030c 	orr.w	r3, r3, #12
 8001c62:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7b5b      	ldrb	r3, [r3, #13]
 8001c68:	031b      	lsls	r3, r3, #12
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7b9b      	ldrb	r3, [r3, #14]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d104      	bne.n	8001c84 <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	e00b      	b.n	8001c9c <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7b9b      	ldrb	r3, [r3, #14]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d107      	bne.n	8001c9c <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c92:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9a:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7b1b      	ldrb	r3, [r3, #12]
 8001cac:	031b      	lsls	r3, r3, #12
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7bdb      	ldrb	r3, [r3, #15]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d104      	bne.n	8001cd4 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	e014      	b.n	8001cfe <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7bdb      	ldrb	r3, [r3, #15]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d104      	bne.n	8001ce6 <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e00b      	b.n	8001cfe <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7bdb      	ldrb	r3, [r3, #15]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d107      	bne.n	8001cfe <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cf4:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4610      	mov	r0, r2
 8001d12:	f7ff ff0b 	bl	8001b2c <USART_SetBaudRate>
	 pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d24:	60da      	str	r2, [r3, #12]
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_type *pUSARTx, uint8_t EnorDi)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d140      	bne.n	8001dc4 <USART_PeriClockControl+0x94>
	{
		if(pUSARTx == USART1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <USART_PeriClockControl+0xa0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d106      	bne.n	8001d58 <USART_PeriClockControl+0x28>
		{
			USART1_CLKEN();
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
		//TODO
	}

}
 8001d56:	e035      	b.n	8001dc4 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <USART_PeriClockControl+0xa8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d106      	bne.n	8001d6e <USART_PeriClockControl+0x3e>
			USART2_CLKEN();
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001d6c:	e02a      	b.n	8001dc4 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART3)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <USART_PeriClockControl+0xac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d106      	bne.n	8001d84 <USART_PeriClockControl+0x54>
			USART3_CLKEN();
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a16      	ldr	r2, [pc, #88]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001d82:	e01f      	b.n	8001dc4 <USART_PeriClockControl+0x94>
		else if (pUSARTx == UART4)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a16      	ldr	r2, [pc, #88]	; (8001de0 <USART_PeriClockControl+0xb0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d106      	bne.n	8001d9a <USART_PeriClockControl+0x6a>
			UART4_CLKEN();
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d96:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001d98:	e014      	b.n	8001dc4 <USART_PeriClockControl+0x94>
		else if (pUSARTx == UART5)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <USART_PeriClockControl+0xb4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d106      	bne.n	8001db0 <USART_PeriClockControl+0x80>
			UART5_CLKEN();
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001dae:	e009      	b.n	8001dc4 <USART_PeriClockControl+0x94>
		else if (pUSARTx == USART6)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <USART_PeriClockControl+0xb8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d105      	bne.n	8001dc4 <USART_PeriClockControl+0x94>
			USART6_CLKEN();
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <USART_PeriClockControl+0xa4>)
 8001dbe:	f043 0320 	orr.w	r3, r3, #32
 8001dc2:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40004400 	.word	0x40004400
 8001ddc:	40004800 	.word	0x40004800
 8001de0:	40004c00 	.word	0x40004c00
 8001de4:	40005000 	.word	0x40005000
 8001de8:	40011400 	.word	0x40011400

08001dec <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_type *pUSARTx, uint8_t StatusFlagName)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e031      	b.n	8001e8c <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8001e28:	bf00      	nop
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2180      	movs	r1, #128	; 0x80
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ffdb 	bl	8001dec <USART_GetFlagStatus>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f6      	beq.n	8001e2a <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	7b5b      	ldrb	r3, [r3, #13]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d118      	bne.n	8001e76 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e56:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	7b9b      	ldrb	r3, [r3, #14]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d106      	bne.n	8001e6e <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3301      	adds	r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	e00b      	b.n	8001e86 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	e007      	b.n	8001e86 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3301      	adds	r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d3c9      	bcc.n	8001e28 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8001e94:	bf00      	nop
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2140      	movs	r1, #64	; 0x40
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ffa5 	bl	8001dec <USART_GetFlagStatus>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f6      	beq.n	8001e96 <USART_SendData+0x80>
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	0000      	movs	r0, r0
 8001eb4:	0000      	movs	r0, r0
	...

08001eb8 <main>:
char uartBuf[100];

USART_Handle_t hUART;
uint32_t data[8];

int main(void){
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af04      	add	r7, sp, #16
	//enable floating point full access
	SCB ->CPACR |= ((3UL << 20U)|(3UL << 22U));
 8001ebe:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <main+0x118>)
 8001ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec4:	4a42      	ldr	r2, [pc, #264]	; (8001fd0 <main+0x118>)
 8001ec6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	GPIO_CAN1Init(GPIOA, GPIO_PIN_NO_11, 9);//RX
 8001ece:	2209      	movs	r2, #9
 8001ed0:	210b      	movs	r1, #11
 8001ed2:	4840      	ldr	r0, [pc, #256]	; (8001fd4 <main+0x11c>)
 8001ed4:	f7fe ff5c 	bl	8000d90 <GPIO_CAN1Init>
	GPIO_CAN1Init(GPIOA, GPIO_PIN_NO_12, 9);//TX
 8001ed8:	2209      	movs	r2, #9
 8001eda:	210c      	movs	r1, #12
 8001edc:	483d      	ldr	r0, [pc, #244]	; (8001fd4 <main+0x11c>)
 8001ede:	f7fe ff57 	bl	8000d90 <GPIO_CAN1Init>
	GPIO_LEDInit();
 8001ee2:	f7fe ff77 	bl	8000dd4 <GPIO_LEDInit>
	CANInit();
 8001ee6:	f000 f885 	bl	8001ff4 <CANInit>
	CANRxconfig();
 8001eea:	f000 f8c5 	bl	8002078 <CANRxconfig>
	systick_init(1U);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7fe feca 	bl	8000c88 <systick_init>
	//enter normal mode
	CAN1 ->MCR &= ~(1 << 0);
 8001ef4:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <main+0x120>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a37      	ldr	r2, [pc, #220]	; (8001fd8 <main+0x120>)
 8001efa:	f023 0301 	bic.w	r3, r3, #1
 8001efe:	6013      	str	r3, [r2, #0]
	//wait until CAN is in normal mode
	while(CAN1 ->MSR & (1 << 0));
 8001f00:	bf00      	nop
 8001f02:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <main+0x120>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f9      	bne.n	8001f02 <main+0x4a>

	//configuring the UART peripheral
	UARTConfig();
 8001f0e:	f000 f905 	bl	800211c <UARTConfig>
	//initializing UART2 Pins
	USART_GPIOInit(GPIOA,GPIO_PIN_NO_2,7);  /*TX*/
 8001f12:	2207      	movs	r2, #7
 8001f14:	2102      	movs	r1, #2
 8001f16:	482f      	ldr	r0, [pc, #188]	; (8001fd4 <main+0x11c>)
 8001f18:	f7fe ff0d 	bl	8000d36 <USART_GPIOInit>
	USART_GPIOInit(GPIOA,GPIO_PIN_NO_3,7);  /*RX*/
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	2103      	movs	r1, #3
 8001f20:	482c      	ldr	r0, [pc, #176]	; (8001fd4 <main+0x11c>)
 8001f22:	f7fe ff08 	bl	8000d36 <USART_GPIOInit>

	//configure I2C
	I2C_Handle RTC;
	I2C_Config(&RTC);
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f942 	bl	80021b4 <I2C_Config>
	RTC_SetTime(&RTC);
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fd65 	bl	8001a04 <RTC_SetTime>
	uint8_t TimeBuffer[7];
	while(1){
	delay(50);
 8001f3a:	2032      	movs	r0, #50	; 0x32
 8001f3c:	f7fe ff68 	bl	8000e10 <delay>
	RTC_ReadTime(TimeBuffer, &RTC);
 8001f40:	f107 020c 	add.w	r2, r7, #12
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fd3f 	bl	80019cc <RTC_ReadTime>
	shift(TimeBuffer);
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 f901 	bl	8002158 <shift>
	distance = (numTicks/10000.0) * speedOfSound;
 8001f56:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <main+0x124>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe faf2 	bl	8000544 <__aeabi_ui2d>
 8001f60:	a319      	add	r3, pc, #100	; (adr r3, 8001fc8 <main+0x110>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe fc91 	bl	800088c <__aeabi_ddiv>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4614      	mov	r4, r2
 8001f70:	461d      	mov	r5, r3
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <main+0x128>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fb07 	bl	8000588 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe fb59 	bl	8000638 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fe2b 	bl	8000be8 <__aeabi_d2f>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <main+0x12c>)
 8001f96:	6013      	str	r3, [r2, #0]
	sprintf(uartBuf, "Distance = %.1f(cm) at %d:%d:%d O'Clock\r\n", distance,TimeBuffer[2],TimeBuffer[1],TimeBuffer[0]);
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <main+0x12c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe faf3 	bl	8000588 <__aeabi_f2d>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	79b9      	ldrb	r1, [r7, #6]
 8001fa8:	7978      	ldrb	r0, [r7, #5]
 8001faa:	793c      	ldrb	r4, [r7, #4]
 8001fac:	9402      	str	r4, [sp, #8]
 8001fae:	9001      	str	r0, [sp, #4]
 8001fb0:	9100      	str	r1, [sp, #0]
 8001fb2:	490d      	ldr	r1, [pc, #52]	; (8001fe8 <main+0x130>)
 8001fb4:	480d      	ldr	r0, [pc, #52]	; (8001fec <main+0x134>)
 8001fb6:	f001 f98f 	bl	80032d8 <siprintf>
	USART_SendData(&hUART, (uint8_t *)uartBuf, sizeof(uartBuf));  /*sending the data*/
 8001fba:	2264      	movs	r2, #100	; 0x64
 8001fbc:	490b      	ldr	r1, [pc, #44]	; (8001fec <main+0x134>)
 8001fbe:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <main+0x138>)
 8001fc0:	f7ff ff29 	bl	8001e16 <USART_SendData>
	delay(50);
 8001fc4:	e7b9      	b.n	8001f3a <main+0x82>
 8001fc6:	bf00      	nop
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	40c38800 	.word	0x40c38800
 8001fd0:	e000ed00 	.word	0xe000ed00
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40006400 	.word	0x40006400
 8001fdc:	20000200 	.word	0x20000200
 8001fe0:	432b0000 	.word	0x432b0000
 8001fe4:	20000204 	.word	0x20000204
 8001fe8:	080054d0 	.word	0x080054d0
 8001fec:	20000208 	.word	0x20000208
 8001ff0:	2000026c 	.word	0x2000026c

08001ff4 <CANInit>:
}




static void CANInit(){
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
	//enable the clock for the bus
	RCC ->APB1ENR |= (1 << RCC_APB1ENR_CAN1EN);
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <CANInit+0x7c>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <CANInit+0x7c>)
 8001ffe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002002:	6413      	str	r3, [r2, #64]	; 0x40
	//clear sleep bit in MCR
	CAN1 ->MCR &= ~(1U << 1);
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <CANInit+0x80>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <CANInit+0x80>)
 800200a:	f023 0302 	bic.w	r3, r3, #2
 800200e:	6013      	str	r3, [r2, #0]
	//initialize the CAN bus
	CAN1 ->MCR |= (1 << 0);
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <CANInit+0x80>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a17      	ldr	r2, [pc, #92]	; (8002074 <CANInit+0x80>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6013      	str	r3, [r2, #0]
	//wait until CAN enters initialization mode
	while(! (CAN1 ->MSR & (1 << 0)));
 800201c:	bf00      	nop
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <CANInit+0x80>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f9      	beq.n	800201e <CANInit+0x2a>
	CAN1 ->BTR &= 0x00000000U;
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <CANInit+0x80>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <CANInit+0x80>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
	CAN1 ->BTR |= (1U << 24);//SWj
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <CANInit+0x80>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <CANInit+0x80>)
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203e:	61d3      	str	r3, [r2, #28]
	CAN1 ->BTR |= (13U << 16);//seg1
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <CANInit+0x80>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <CANInit+0x80>)
 8002046:	f443 2350 	orr.w	r3, r3, #851968	; 0xd0000
 800204a:	61d3      	str	r3, [r2, #28]
	CAN1 ->BTR |= (2U << 20);//seg2
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <CANInit+0x80>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	4a08      	ldr	r2, [pc, #32]	; (8002074 <CANInit+0x80>)
 8002052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002056:	61d3      	str	r3, [r2, #28]
	CAN1 ->BTR |= (2U << 0);//BRP
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <CANInit+0x80>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	4a05      	ldr	r2, [pc, #20]	; (8002074 <CANInit+0x80>)
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	61d3      	str	r3, [r2, #28]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40006400 	.word	0x40006400

08002078 <CANRxconfig>:

static void CANRxconfig(){
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	//configure the filter banks to accept all IDs
	//initialize the filter bank
	CAN1 ->FMR |= (1U << 0);
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <CANRxconfig+0x9c>)
 800207e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002082:	4a24      	ldr	r2, [pc, #144]	; (8002114 <CANRxconfig+0x9c>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	//enable interrupt for pending messages on FIFO 0
	CAN1 ->IER |= (1U << 1);
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <CANRxconfig+0x9c>)
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	4a20      	ldr	r2, [pc, #128]	; (8002114 <CANRxconfig+0x9c>)
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	6153      	str	r3, [r2, #20]
	//enable NVIC interrupt for CAN RX (IRQ no. 20) ISER0;
	*ISER0 |= (1U << 20);
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <CANRxconfig+0xa0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <CANRxconfig+0xa0>)
 800209e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a2:	6013      	str	r3, [r2, #0]
	//set it to MASK MODE
	CAN1 ->FM1R &= ~(1 << 0);
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <CANRxconfig+0x9c>)
 80020a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020aa:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <CANRxconfig+0x9c>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	//use single 32bit register
	CAN1 ->FS1R |= (1 << 0);
 80020b4:	4b17      	ldr	r3, [pc, #92]	; (8002114 <CANRxconfig+0x9c>)
 80020b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80020ba:	4a16      	ldr	r2, [pc, #88]	; (8002114 <CANRxconfig+0x9c>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	//assign the message to FIFO 0
	CAN1 ->FFA1R &= ~(1U << 0);
 80020c4:	4b13      	ldr	r3, [pc, #76]	; (8002114 <CANRxconfig+0x9c>)
 80020c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <CANRxconfig+0x9c>)
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	//set the ID in the filter bank
	CAN1 ->sFilterRegister[0].FR1 = 0x55U << 5;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <CANRxconfig+0x9c>)
 80020d6:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
 80020da:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	//set the MASK
	CAN1 ->sFilterRegister[0].FR2 = 0x7FFU << 5;
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <CANRxconfig+0x9c>)
 80020e0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80020e4:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	//activate the filter
	CAN1 ->FMR &= ~(1U << 0);
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <CANRxconfig+0x9c>)
 80020ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <CANRxconfig+0x9c>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1 ->FA1R |= (1U << 0);
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <CANRxconfig+0x9c>)
 80020fa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <CANRxconfig+0x9c>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40006400 	.word	0x40006400
 8002118:	e000e100 	.word	0xe000e100

0800211c <UARTConfig>:


static void UARTConfig(){
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	hUART.pUSARTx = USART2;
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <UARTConfig+0x34>)
 8002122:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <UARTConfig+0x38>)
 8002124:	601a      	str	r2, [r3, #0]
	hUART.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <UARTConfig+0x34>)
 8002128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800212c:	609a      	str	r2, [r3, #8]
	hUART.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <UARTConfig+0x34>)
 8002130:	2200      	movs	r2, #0
 8002132:	731a      	strb	r2, [r3, #12]
	hUART.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <UARTConfig+0x34>)
 8002136:	2200      	movs	r2, #0
 8002138:	739a      	strb	r2, [r3, #14]
	hUART.USART_Config.USART_Mode = USART_MODE_TXRX;
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <UARTConfig+0x34>)
 800213c:	2202      	movs	r2, #2
 800213e:	711a      	strb	r2, [r3, #4]
	hUART.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <UARTConfig+0x34>)
 8002142:	2200      	movs	r2, #0
 8002144:	735a      	strb	r2, [r3, #13]
	USART_Init(&hUART);
 8002146:	4802      	ldr	r0, [pc, #8]	; (8002150 <UARTConfig+0x34>)
 8002148:	f7ff fd66 	bl	8001c18 <USART_Init>
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2000026c 	.word	0x2000026c
 8002154:	40004400 	.word	0x40004400

08002158 <shift>:

static void shift(uint8_t *pData){
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 7; i++){
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	e01c      	b.n	80021a0 <shift+0x48>
		uint8_t MSB = pData[i] >> 4;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	73bb      	strb	r3, [r7, #14]
		uint8_t LSB = pData[i] & 0xF;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	737b      	strb	r3, [r7, #13]
		pData[i] = MSB * 10 + LSB;
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	461a      	mov	r2, r3
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	4413      	add	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	b2d9      	uxtb	r1, r3
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	7b7a      	ldrb	r2, [r7, #13]
 8002194:	440a      	add	r2, r1
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 7; i++){
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	3301      	adds	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d9df      	bls.n	8002166 <shift+0xe>
	}
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <I2C_Config>:

static void I2C_Config(I2C_Handle *pI2CHandle){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	I2C1_GPIOInit(GPIOB, GPIO_PIN_NO_6, 4);//SCL
 80021bc:	2204      	movs	r2, #4
 80021be:	2106      	movs	r1, #6
 80021c0:	4811      	ldr	r0, [pc, #68]	; (8002208 <I2C_Config+0x54>)
 80021c2:	f7fe fd8b 	bl	8000cdc <I2C1_GPIOInit>
	I2C1_GPIOInit(GPIOB, GPIO_PIN_NO_7, 4);//SDA
 80021c6:	2204      	movs	r2, #4
 80021c8:	2107      	movs	r1, #7
 80021ca:	480f      	ldr	r0, [pc, #60]	; (8002208 <I2C_Config+0x54>)
 80021cc:	f7fe fd86 	bl	8000cdc <I2C1_GPIOInit>

	pI2CHandle->pI2Cx = I2C1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <I2C_Config+0x58>)
 80021d4:	601a      	str	r2, [r3, #0]
	pI2CHandle->I2C_Config.I2C_SCLSpeed = I2C_SCL_SM;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <I2C_Config+0x5c>)
 80021da:	605a      	str	r2, [r3, #4]
	pI2CHandle->I2C_Config.I2C_DeviceAddress = 0x68U;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2268      	movs	r2, #104	; 0x68
 80021e0:	721a      	strb	r2, [r3, #8]
	pI2CHandle->I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	725a      	strb	r2, [r3, #9]
	pI2CHandle->I2C_Config.I2C_AddressMode = I2C_AddressMode_7bit;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	72da      	strb	r2, [r3, #11]
	I2C_CLKCNT(pI2CHandle->pI2Cx, ENABLE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2101      	movs	r1, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f8ad 	bl	8001354 <I2C_CLKCNT>
	I2C_Init(pI2CHandle);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff f902 	bl	8001404 <I2C_Init>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40020400 	.word	0x40020400
 800220c:	40005400 	.word	0x40005400
 8002210:	000186a0 	.word	0x000186a0

08002214 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void){
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
	__asm(
 800221a:	b672      	cpsid	i
			"CPSID I  \n"
	);
	*ICPR0 |= (1U << 20);
 800221c:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <CAN1_RX0_IRQHandler+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <CAN1_RX0_IRQHandler+0x40>)
 8002222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002226:	6013      	str	r3, [r2, #0]
	ReadFIFO();
 8002228:	f000 f81a 	bl	8002260 <ReadFIFO>
	uint32_t Ticks = data[0] | (data[1] << 8);
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <CAN1_RX0_IRQHandler+0x44>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <CAN1_RX0_IRQHandler+0x44>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	4313      	orrs	r3, r2
 8002238:	607b      	str	r3, [r7, #4]
	SysTick ->RVR = Ticks * TICKS_ATMAX_DISTANCE;
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <CAN1_RX0_IRQHandler+0x48>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f640 419a 	movw	r1, #3226	; 0xc9a
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	6053      	str	r3, [r2, #4]
	__asm(
 8002248:	b662      	cpsie	i
			"CPSIE I  \n"
	);
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e280 	.word	0xe000e280
 8002258:	20000290 	.word	0x20000290
 800225c:	e000e010 	.word	0xe000e010

08002260 <ReadFIFO>:

static void ReadFIFO(){
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
	uint32_t dataLength = (CAN1->sFIFOMailBox[0].RDTR & 0xF);
 8002266:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <ReadFIFO+0x84>)
 8002268:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 0; i < dataLength; i++){
 8002272:	2300      	movs	r3, #0
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	e01d      	b.n	80022b4 <ReadFIFO+0x54>
		if(i < 4){
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d80b      	bhi.n	8002296 <ReadFIFO+0x36>
			data[i] = (CAN1 ->sFIFOMailBox[0].RDLR >> (i * 8)) & 0xFFU;
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <ReadFIFO+0x84>)
 8002280:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	40da      	lsrs	r2, r3
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	4916      	ldr	r1, [pc, #88]	; (80022e8 <ReadFIFO+0x88>)
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002294:	e00b      	b.n	80022ae <ReadFIFO+0x4e>
		}else{
			data[i] = (CAN1 ->sFIFOMailBox[0].RDHR >> ((i - 4) * 8)) & 0xFFU;
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <ReadFIFO+0x84>)
 8002298:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	3b04      	subs	r3, #4
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	40da      	lsrs	r2, r3
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	490f      	ldr	r1, [pc, #60]	; (80022e8 <ReadFIFO+0x88>)
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < dataLength; i++){
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	3301      	adds	r3, #1
 80022b2:	71fb      	strb	r3, [r7, #7]
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8dd      	bhi.n	8002278 <ReadFIFO+0x18>
		}
	}
	numTicks = data[0] | (data[1] << 8);
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <ReadFIFO+0x88>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <ReadFIFO+0x88>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	4313      	orrs	r3, r2
 80022c8:	4a08      	ldr	r2, [pc, #32]	; (80022ec <ReadFIFO+0x8c>)
 80022ca:	6013      	str	r3, [r2, #0]
	//release the FIFO
	CAN1 ->RF0R |= (1U << 5);
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <ReadFIFO+0x84>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <ReadFIFO+0x84>)
 80022d2:	f043 0320 	orr.w	r3, r3, #32
 80022d6:	60d3      	str	r3, [r2, #12]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40006400 	.word	0x40006400
 80022e8:	20000290 	.word	0x20000290
 80022ec:	20000200 	.word	0x20000200

080022f0 <SysTick_Handler>:

void SysTick_Handler(){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	__asm(
 80022f4:	b672      	cpsid	i
			"CPSID I  \n"
	);
	if(distance < 70){
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <SysTick_Handler+0x34>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002328 <SysTick_Handler+0x38>
 8002300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	d504      	bpl.n	8002314 <SysTick_Handler+0x24>
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 800230a:	2105      	movs	r1, #5
 800230c:	4807      	ldr	r0, [pc, #28]	; (800232c <SysTick_Handler+0x3c>)
 800230e:	f7fe fff0 	bl	80012f2 <GPIO_ToggleOutputPin>
 8002312:	e004      	b.n	800231e <SysTick_Handler+0x2e>
	}else{
		GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2105      	movs	r1, #5
 8002318:	4804      	ldr	r0, [pc, #16]	; (800232c <SysTick_Handler+0x3c>)
 800231a:	f7fe ffc5 	bl	80012a8 <GPIO_WriteToOutputPin>
	}
	__asm(
 800231e:	b662      	cpsie	i
			"CPSIE I  \n"
	);
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000204 	.word	0x20000204
 8002328:	428c0000 	.word	0x428c0000
 800232c:	40020000 	.word	0x40020000

08002330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002330:	480d      	ldr	r0, [pc, #52]	; (8002368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002338:	480c      	ldr	r0, [pc, #48]	; (800236c <LoopForever+0x6>)
  ldr r1, =_edata
 800233a:	490d      	ldr	r1, [pc, #52]	; (8002370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <LoopForever+0xe>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002350:	4c0a      	ldr	r4, [pc, #40]	; (800237c <LoopForever+0x16>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800235e:	f000 fa7d 	bl	800285c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002362:	f7ff fda9 	bl	8001eb8 <main>

08002366 <LoopForever>:

LoopForever:
  b LoopForever
 8002366:	e7fe      	b.n	8002366 <LoopForever>
  ldr   r0, =_estack
 8002368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002370:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002374:	080058dc 	.word	0x080058dc
  ldr r2, =_sbss
 8002378:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800237c:	20000364 	.word	0x20000364

08002380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC_IRQHandler>
	...

08002384 <findslot>:
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <findslot+0x2c>)
 8002386:	b510      	push	{r4, lr}
 8002388:	4604      	mov	r4, r0
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	b118      	cbz	r0, 8002396 <findslot+0x12>
 800238e:	6983      	ldr	r3, [r0, #24]
 8002390:	b90b      	cbnz	r3, 8002396 <findslot+0x12>
 8002392:	f000 f9c5 	bl	8002720 <__sinit>
 8002396:	2c13      	cmp	r4, #19
 8002398:	d807      	bhi.n	80023aa <findslot+0x26>
 800239a:	4806      	ldr	r0, [pc, #24]	; (80023b4 <findslot+0x30>)
 800239c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80023a0:	3201      	adds	r2, #1
 80023a2:	d002      	beq.n	80023aa <findslot+0x26>
 80023a4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	2000      	movs	r0, #0
 80023ac:	e7fc      	b.n	80023a8 <findslot+0x24>
 80023ae:	bf00      	nop
 80023b0:	20000010 	.word	0x20000010
 80023b4:	200002b4 	.word	0x200002b4

080023b8 <error>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	4604      	mov	r4, r0
 80023bc:	f000 f952 	bl	8002664 <__errno>
 80023c0:	2613      	movs	r6, #19
 80023c2:	4605      	mov	r5, r0
 80023c4:	2700      	movs	r7, #0
 80023c6:	4630      	mov	r0, r6
 80023c8:	4639      	mov	r1, r7
 80023ca:	beab      	bkpt	0x00ab
 80023cc:	4606      	mov	r6, r0
 80023ce:	602e      	str	r6, [r5, #0]
 80023d0:	4620      	mov	r0, r4
 80023d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023d4 <checkerror>:
 80023d4:	1c43      	adds	r3, r0, #1
 80023d6:	d101      	bne.n	80023dc <checkerror+0x8>
 80023d8:	f7ff bfee 	b.w	80023b8 <error>
 80023dc:	4770      	bx	lr

080023de <_swiread>:
 80023de:	b530      	push	{r4, r5, lr}
 80023e0:	b085      	sub	sp, #20
 80023e2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80023e6:	9203      	str	r2, [sp, #12]
 80023e8:	2406      	movs	r4, #6
 80023ea:	ad01      	add	r5, sp, #4
 80023ec:	4620      	mov	r0, r4
 80023ee:	4629      	mov	r1, r5
 80023f0:	beab      	bkpt	0x00ab
 80023f2:	4604      	mov	r4, r0
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7ff ffed 	bl	80023d4 <checkerror>
 80023fa:	b005      	add	sp, #20
 80023fc:	bd30      	pop	{r4, r5, pc}

080023fe <_read>:
 80023fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002400:	4615      	mov	r5, r2
 8002402:	9101      	str	r1, [sp, #4]
 8002404:	f7ff ffbe 	bl	8002384 <findslot>
 8002408:	9901      	ldr	r1, [sp, #4]
 800240a:	4604      	mov	r4, r0
 800240c:	b938      	cbnz	r0, 800241e <_read+0x20>
 800240e:	f000 f929 	bl	8002664 <__errno>
 8002412:	2309      	movs	r3, #9
 8002414:	6003      	str	r3, [r0, #0]
 8002416:	f04f 30ff 	mov.w	r0, #4294967295
 800241a:	b003      	add	sp, #12
 800241c:	bd30      	pop	{r4, r5, pc}
 800241e:	6800      	ldr	r0, [r0, #0]
 8002420:	462a      	mov	r2, r5
 8002422:	f7ff ffdc 	bl	80023de <_swiread>
 8002426:	1c43      	adds	r3, r0, #1
 8002428:	d0f7      	beq.n	800241a <_read+0x1c>
 800242a:	6863      	ldr	r3, [r4, #4]
 800242c:	1a2a      	subs	r2, r5, r0
 800242e:	4413      	add	r3, r2
 8002430:	6063      	str	r3, [r4, #4]
 8002432:	4610      	mov	r0, r2
 8002434:	e7f1      	b.n	800241a <_read+0x1c>

08002436 <_swilseek>:
 8002436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002438:	460c      	mov	r4, r1
 800243a:	4616      	mov	r6, r2
 800243c:	f7ff ffa2 	bl	8002384 <findslot>
 8002440:	4605      	mov	r5, r0
 8002442:	b940      	cbnz	r0, 8002456 <_swilseek+0x20>
 8002444:	f000 f90e 	bl	8002664 <__errno>
 8002448:	2309      	movs	r3, #9
 800244a:	6003      	str	r3, [r0, #0]
 800244c:	f04f 34ff 	mov.w	r4, #4294967295
 8002450:	4620      	mov	r0, r4
 8002452:	b003      	add	sp, #12
 8002454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002456:	2e02      	cmp	r6, #2
 8002458:	d903      	bls.n	8002462 <_swilseek+0x2c>
 800245a:	f000 f903 	bl	8002664 <__errno>
 800245e:	2316      	movs	r3, #22
 8002460:	e7f3      	b.n	800244a <_swilseek+0x14>
 8002462:	2e01      	cmp	r6, #1
 8002464:	d112      	bne.n	800248c <_swilseek+0x56>
 8002466:	6843      	ldr	r3, [r0, #4]
 8002468:	18e4      	adds	r4, r4, r3
 800246a:	d4f6      	bmi.n	800245a <_swilseek+0x24>
 800246c:	682b      	ldr	r3, [r5, #0]
 800246e:	260a      	movs	r6, #10
 8002470:	e9cd 3400 	strd	r3, r4, [sp]
 8002474:	466f      	mov	r7, sp
 8002476:	4630      	mov	r0, r6
 8002478:	4639      	mov	r1, r7
 800247a:	beab      	bkpt	0x00ab
 800247c:	4606      	mov	r6, r0
 800247e:	4630      	mov	r0, r6
 8002480:	f7ff ffa8 	bl	80023d4 <checkerror>
 8002484:	2800      	cmp	r0, #0
 8002486:	dbe1      	blt.n	800244c <_swilseek+0x16>
 8002488:	606c      	str	r4, [r5, #4]
 800248a:	e7e1      	b.n	8002450 <_swilseek+0x1a>
 800248c:	2e02      	cmp	r6, #2
 800248e:	d1ed      	bne.n	800246c <_swilseek+0x36>
 8002490:	6803      	ldr	r3, [r0, #0]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	260c      	movs	r6, #12
 8002496:	466f      	mov	r7, sp
 8002498:	4630      	mov	r0, r6
 800249a:	4639      	mov	r1, r7
 800249c:	beab      	bkpt	0x00ab
 800249e:	4606      	mov	r6, r0
 80024a0:	4630      	mov	r0, r6
 80024a2:	f7ff ff97 	bl	80023d4 <checkerror>
 80024a6:	1c43      	adds	r3, r0, #1
 80024a8:	d0d0      	beq.n	800244c <_swilseek+0x16>
 80024aa:	4404      	add	r4, r0
 80024ac:	e7de      	b.n	800246c <_swilseek+0x36>

080024ae <_lseek>:
 80024ae:	f7ff bfc2 	b.w	8002436 <_swilseek>

080024b2 <_swiwrite>:
 80024b2:	b530      	push	{r4, r5, lr}
 80024b4:	b085      	sub	sp, #20
 80024b6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80024ba:	9203      	str	r2, [sp, #12]
 80024bc:	2405      	movs	r4, #5
 80024be:	ad01      	add	r5, sp, #4
 80024c0:	4620      	mov	r0, r4
 80024c2:	4629      	mov	r1, r5
 80024c4:	beab      	bkpt	0x00ab
 80024c6:	4604      	mov	r4, r0
 80024c8:	4620      	mov	r0, r4
 80024ca:	f7ff ff83 	bl	80023d4 <checkerror>
 80024ce:	b005      	add	sp, #20
 80024d0:	bd30      	pop	{r4, r5, pc}

080024d2 <_write>:
 80024d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024d4:	4615      	mov	r5, r2
 80024d6:	9101      	str	r1, [sp, #4]
 80024d8:	f7ff ff54 	bl	8002384 <findslot>
 80024dc:	9901      	ldr	r1, [sp, #4]
 80024de:	4604      	mov	r4, r0
 80024e0:	b930      	cbnz	r0, 80024f0 <_write+0x1e>
 80024e2:	f000 f8bf 	bl	8002664 <__errno>
 80024e6:	2309      	movs	r3, #9
 80024e8:	6003      	str	r3, [r0, #0]
 80024ea:	f04f 30ff 	mov.w	r0, #4294967295
 80024ee:	e012      	b.n	8002516 <_write+0x44>
 80024f0:	6800      	ldr	r0, [r0, #0]
 80024f2:	462a      	mov	r2, r5
 80024f4:	f7ff ffdd 	bl	80024b2 <_swiwrite>
 80024f8:	2800      	cmp	r0, #0
 80024fa:	dbf6      	blt.n	80024ea <_write+0x18>
 80024fc:	6862      	ldr	r2, [r4, #4]
 80024fe:	1a2b      	subs	r3, r5, r0
 8002500:	441a      	add	r2, r3
 8002502:	42a8      	cmp	r0, r5
 8002504:	6062      	str	r2, [r4, #4]
 8002506:	d105      	bne.n	8002514 <_write+0x42>
 8002508:	2000      	movs	r0, #0
 800250a:	b003      	add	sp, #12
 800250c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002510:	f7ff bf52 	b.w	80023b8 <error>
 8002514:	4618      	mov	r0, r3
 8002516:	b003      	add	sp, #12
 8002518:	bd30      	pop	{r4, r5, pc}

0800251a <_swiclose>:
 800251a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800251c:	2402      	movs	r4, #2
 800251e:	9001      	str	r0, [sp, #4]
 8002520:	ad01      	add	r5, sp, #4
 8002522:	4620      	mov	r0, r4
 8002524:	4629      	mov	r1, r5
 8002526:	beab      	bkpt	0x00ab
 8002528:	4604      	mov	r4, r0
 800252a:	4620      	mov	r0, r4
 800252c:	f7ff ff52 	bl	80023d4 <checkerror>
 8002530:	b003      	add	sp, #12
 8002532:	bd30      	pop	{r4, r5, pc}

08002534 <_close>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	4605      	mov	r5, r0
 8002538:	f7ff ff24 	bl	8002384 <findslot>
 800253c:	4604      	mov	r4, r0
 800253e:	b930      	cbnz	r0, 800254e <_close+0x1a>
 8002540:	f000 f890 	bl	8002664 <__errno>
 8002544:	2309      	movs	r3, #9
 8002546:	6003      	str	r3, [r0, #0]
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	bd38      	pop	{r3, r4, r5, pc}
 800254e:	3d01      	subs	r5, #1
 8002550:	2d01      	cmp	r5, #1
 8002552:	d809      	bhi.n	8002568 <_close+0x34>
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <_close+0x48>)
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	429a      	cmp	r2, r3
 800255c:	d104      	bne.n	8002568 <_close+0x34>
 800255e:	f04f 33ff 	mov.w	r3, #4294967295
 8002562:	6003      	str	r3, [r0, #0]
 8002564:	2000      	movs	r0, #0
 8002566:	e7f1      	b.n	800254c <_close+0x18>
 8002568:	6820      	ldr	r0, [r4, #0]
 800256a:	f7ff ffd6 	bl	800251a <_swiclose>
 800256e:	2800      	cmp	r0, #0
 8002570:	d1ec      	bne.n	800254c <_close+0x18>
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	6023      	str	r3, [r4, #0]
 8002578:	e7e8      	b.n	800254c <_close+0x18>
 800257a:	bf00      	nop
 800257c:	200002b4 	.word	0x200002b4

08002580 <_getpid>:
 8002580:	2001      	movs	r0, #1
 8002582:	4770      	bx	lr

08002584 <_sbrk>:
 8002584:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <_sbrk+0x38>)
 8002586:	6811      	ldr	r1, [r2, #0]
 8002588:	b510      	push	{r4, lr}
 800258a:	4603      	mov	r3, r0
 800258c:	b909      	cbnz	r1, 8002592 <_sbrk+0xe>
 800258e:	490c      	ldr	r1, [pc, #48]	; (80025c0 <_sbrk+0x3c>)
 8002590:	6011      	str	r1, [r2, #0]
 8002592:	6810      	ldr	r0, [r2, #0]
 8002594:	4669      	mov	r1, sp
 8002596:	4403      	add	r3, r0
 8002598:	428b      	cmp	r3, r1
 800259a:	d806      	bhi.n	80025aa <_sbrk+0x26>
 800259c:	4909      	ldr	r1, [pc, #36]	; (80025c4 <_sbrk+0x40>)
 800259e:	4c0a      	ldr	r4, [pc, #40]	; (80025c8 <_sbrk+0x44>)
 80025a0:	6809      	ldr	r1, [r1, #0]
 80025a2:	42a1      	cmp	r1, r4
 80025a4:	d008      	beq.n	80025b8 <_sbrk+0x34>
 80025a6:	428b      	cmp	r3, r1
 80025a8:	d906      	bls.n	80025b8 <_sbrk+0x34>
 80025aa:	f000 f85b 	bl	8002664 <__errno>
 80025ae:	230c      	movs	r3, #12
 80025b0:	6003      	str	r3, [r0, #0]
 80025b2:	f04f 30ff 	mov.w	r0, #4294967295
 80025b6:	bd10      	pop	{r4, pc}
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e7fc      	b.n	80025b6 <_sbrk+0x32>
 80025bc:	200002b0 	.word	0x200002b0
 80025c0:	20000368 	.word	0x20000368
 80025c4:	2000000c 	.word	0x2000000c
 80025c8:	cafedead 	.word	0xcafedead

080025cc <_swistat>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	460c      	mov	r4, r1
 80025d0:	f7ff fed8 	bl	8002384 <findslot>
 80025d4:	4605      	mov	r5, r0
 80025d6:	b930      	cbnz	r0, 80025e6 <_swistat+0x1a>
 80025d8:	f000 f844 	bl	8002664 <__errno>
 80025dc:	2309      	movs	r3, #9
 80025de:	6003      	str	r3, [r0, #0]
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
 80025e6:	6863      	ldr	r3, [r4, #4]
 80025e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025ec:	6063      	str	r3, [r4, #4]
 80025ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f2:	64a3      	str	r3, [r4, #72]	; 0x48
 80025f4:	260c      	movs	r6, #12
 80025f6:	4630      	mov	r0, r6
 80025f8:	4629      	mov	r1, r5
 80025fa:	beab      	bkpt	0x00ab
 80025fc:	4605      	mov	r5, r0
 80025fe:	4628      	mov	r0, r5
 8002600:	f7ff fee8 	bl	80023d4 <checkerror>
 8002604:	1c43      	adds	r3, r0, #1
 8002606:	bf1c      	itt	ne
 8002608:	6120      	strne	r0, [r4, #16]
 800260a:	2000      	movne	r0, #0
 800260c:	e7ea      	b.n	80025e4 <_swistat+0x18>

0800260e <_fstat>:
 800260e:	460b      	mov	r3, r1
 8002610:	b510      	push	{r4, lr}
 8002612:	2100      	movs	r1, #0
 8002614:	4604      	mov	r4, r0
 8002616:	2258      	movs	r2, #88	; 0x58
 8002618:	4618      	mov	r0, r3
 800261a:	f000 f946 	bl	80028aa <memset>
 800261e:	4601      	mov	r1, r0
 8002620:	4620      	mov	r0, r4
 8002622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002626:	f7ff bfd1 	b.w	80025cc <_swistat>

0800262a <_isatty>:
 800262a:	b570      	push	{r4, r5, r6, lr}
 800262c:	f7ff feaa 	bl	8002384 <findslot>
 8002630:	2509      	movs	r5, #9
 8002632:	4604      	mov	r4, r0
 8002634:	b920      	cbnz	r0, 8002640 <_isatty+0x16>
 8002636:	f000 f815 	bl	8002664 <__errno>
 800263a:	6005      	str	r5, [r0, #0]
 800263c:	4620      	mov	r0, r4
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	4628      	mov	r0, r5
 8002642:	4621      	mov	r1, r4
 8002644:	beab      	bkpt	0x00ab
 8002646:	4604      	mov	r4, r0
 8002648:	2c01      	cmp	r4, #1
 800264a:	d0f7      	beq.n	800263c <_isatty+0x12>
 800264c:	f000 f80a 	bl	8002664 <__errno>
 8002650:	2400      	movs	r4, #0
 8002652:	4605      	mov	r5, r0
 8002654:	2613      	movs	r6, #19
 8002656:	4630      	mov	r0, r6
 8002658:	4621      	mov	r1, r4
 800265a:	beab      	bkpt	0x00ab
 800265c:	4606      	mov	r6, r0
 800265e:	602e      	str	r6, [r5, #0]
 8002660:	e7ec      	b.n	800263c <_isatty+0x12>
	...

08002664 <__errno>:
 8002664:	4b01      	ldr	r3, [pc, #4]	; (800266c <__errno+0x8>)
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000010 	.word	0x20000010

08002670 <std>:
 8002670:	2300      	movs	r3, #0
 8002672:	b510      	push	{r4, lr}
 8002674:	4604      	mov	r4, r0
 8002676:	e9c0 3300 	strd	r3, r3, [r0]
 800267a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800267e:	6083      	str	r3, [r0, #8]
 8002680:	8181      	strh	r1, [r0, #12]
 8002682:	6643      	str	r3, [r0, #100]	; 0x64
 8002684:	81c2      	strh	r2, [r0, #14]
 8002686:	6183      	str	r3, [r0, #24]
 8002688:	4619      	mov	r1, r3
 800268a:	2208      	movs	r2, #8
 800268c:	305c      	adds	r0, #92	; 0x5c
 800268e:	f000 f90c 	bl	80028aa <memset>
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <std+0x38>)
 8002694:	6263      	str	r3, [r4, #36]	; 0x24
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <std+0x3c>)
 8002698:	62a3      	str	r3, [r4, #40]	; 0x28
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <std+0x40>)
 800269c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <std+0x44>)
 80026a0:	6224      	str	r4, [r4, #32]
 80026a2:	6323      	str	r3, [r4, #48]	; 0x30
 80026a4:	bd10      	pop	{r4, pc}
 80026a6:	bf00      	nop
 80026a8:	08003319 	.word	0x08003319
 80026ac:	0800333b 	.word	0x0800333b
 80026b0:	08003373 	.word	0x08003373
 80026b4:	08003397 	.word	0x08003397

080026b8 <_cleanup_r>:
 80026b8:	4901      	ldr	r1, [pc, #4]	; (80026c0 <_cleanup_r+0x8>)
 80026ba:	f000 b8af 	b.w	800281c <_fwalk_reent>
 80026be:	bf00      	nop
 80026c0:	080041e9 	.word	0x080041e9

080026c4 <__sfmoreglue>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	2268      	movs	r2, #104	; 0x68
 80026c8:	1e4d      	subs	r5, r1, #1
 80026ca:	4355      	muls	r5, r2
 80026cc:	460e      	mov	r6, r1
 80026ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80026d2:	f000 f913 	bl	80028fc <_malloc_r>
 80026d6:	4604      	mov	r4, r0
 80026d8:	b140      	cbz	r0, 80026ec <__sfmoreglue+0x28>
 80026da:	2100      	movs	r1, #0
 80026dc:	e9c0 1600 	strd	r1, r6, [r0]
 80026e0:	300c      	adds	r0, #12
 80026e2:	60a0      	str	r0, [r4, #8]
 80026e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80026e8:	f000 f8df 	bl	80028aa <memset>
 80026ec:	4620      	mov	r0, r4
 80026ee:	bd70      	pop	{r4, r5, r6, pc}

080026f0 <__sfp_lock_acquire>:
 80026f0:	4801      	ldr	r0, [pc, #4]	; (80026f8 <__sfp_lock_acquire+0x8>)
 80026f2:	f000 b8d8 	b.w	80028a6 <__retarget_lock_acquire_recursive>
 80026f6:	bf00      	nop
 80026f8:	20000355 	.word	0x20000355

080026fc <__sfp_lock_release>:
 80026fc:	4801      	ldr	r0, [pc, #4]	; (8002704 <__sfp_lock_release+0x8>)
 80026fe:	f000 b8d3 	b.w	80028a8 <__retarget_lock_release_recursive>
 8002702:	bf00      	nop
 8002704:	20000355 	.word	0x20000355

08002708 <__sinit_lock_acquire>:
 8002708:	4801      	ldr	r0, [pc, #4]	; (8002710 <__sinit_lock_acquire+0x8>)
 800270a:	f000 b8cc 	b.w	80028a6 <__retarget_lock_acquire_recursive>
 800270e:	bf00      	nop
 8002710:	20000356 	.word	0x20000356

08002714 <__sinit_lock_release>:
 8002714:	4801      	ldr	r0, [pc, #4]	; (800271c <__sinit_lock_release+0x8>)
 8002716:	f000 b8c7 	b.w	80028a8 <__retarget_lock_release_recursive>
 800271a:	bf00      	nop
 800271c:	20000356 	.word	0x20000356

08002720 <__sinit>:
 8002720:	b510      	push	{r4, lr}
 8002722:	4604      	mov	r4, r0
 8002724:	f7ff fff0 	bl	8002708 <__sinit_lock_acquire>
 8002728:	69a3      	ldr	r3, [r4, #24]
 800272a:	b11b      	cbz	r3, 8002734 <__sinit+0x14>
 800272c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002730:	f7ff bff0 	b.w	8002714 <__sinit_lock_release>
 8002734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002738:	6523      	str	r3, [r4, #80]	; 0x50
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <__sinit+0x68>)
 800273c:	4a13      	ldr	r2, [pc, #76]	; (800278c <__sinit+0x6c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	62a2      	str	r2, [r4, #40]	; 0x28
 8002742:	42a3      	cmp	r3, r4
 8002744:	bf04      	itt	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	61a3      	streq	r3, [r4, #24]
 800274a:	4620      	mov	r0, r4
 800274c:	f000 f820 	bl	8002790 <__sfp>
 8002750:	6060      	str	r0, [r4, #4]
 8002752:	4620      	mov	r0, r4
 8002754:	f000 f81c 	bl	8002790 <__sfp>
 8002758:	60a0      	str	r0, [r4, #8]
 800275a:	4620      	mov	r0, r4
 800275c:	f000 f818 	bl	8002790 <__sfp>
 8002760:	2200      	movs	r2, #0
 8002762:	60e0      	str	r0, [r4, #12]
 8002764:	2104      	movs	r1, #4
 8002766:	6860      	ldr	r0, [r4, #4]
 8002768:	f7ff ff82 	bl	8002670 <std>
 800276c:	68a0      	ldr	r0, [r4, #8]
 800276e:	2201      	movs	r2, #1
 8002770:	2109      	movs	r1, #9
 8002772:	f7ff ff7d 	bl	8002670 <std>
 8002776:	68e0      	ldr	r0, [r4, #12]
 8002778:	2202      	movs	r2, #2
 800277a:	2112      	movs	r1, #18
 800277c:	f7ff ff78 	bl	8002670 <std>
 8002780:	2301      	movs	r3, #1
 8002782:	61a3      	str	r3, [r4, #24]
 8002784:	e7d2      	b.n	800272c <__sinit+0xc>
 8002786:	bf00      	nop
 8002788:	0800555c 	.word	0x0800555c
 800278c:	080026b9 	.word	0x080026b9

08002790 <__sfp>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	4607      	mov	r7, r0
 8002794:	f7ff ffac 	bl	80026f0 <__sfp_lock_acquire>
 8002798:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <__sfp+0x84>)
 800279a:	681e      	ldr	r6, [r3, #0]
 800279c:	69b3      	ldr	r3, [r6, #24]
 800279e:	b913      	cbnz	r3, 80027a6 <__sfp+0x16>
 80027a0:	4630      	mov	r0, r6
 80027a2:	f7ff ffbd 	bl	8002720 <__sinit>
 80027a6:	3648      	adds	r6, #72	; 0x48
 80027a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	d503      	bpl.n	80027b8 <__sfp+0x28>
 80027b0:	6833      	ldr	r3, [r6, #0]
 80027b2:	b30b      	cbz	r3, 80027f8 <__sfp+0x68>
 80027b4:	6836      	ldr	r6, [r6, #0]
 80027b6:	e7f7      	b.n	80027a8 <__sfp+0x18>
 80027b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80027bc:	b9d5      	cbnz	r5, 80027f4 <__sfp+0x64>
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <__sfp+0x88>)
 80027c0:	60e3      	str	r3, [r4, #12]
 80027c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027c6:	6665      	str	r5, [r4, #100]	; 0x64
 80027c8:	f000 f86c 	bl	80028a4 <__retarget_lock_init_recursive>
 80027cc:	f7ff ff96 	bl	80026fc <__sfp_lock_release>
 80027d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80027d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80027d8:	6025      	str	r5, [r4, #0]
 80027da:	61a5      	str	r5, [r4, #24]
 80027dc:	2208      	movs	r2, #8
 80027de:	4629      	mov	r1, r5
 80027e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027e4:	f000 f861 	bl	80028aa <memset>
 80027e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80027f0:	4620      	mov	r0, r4
 80027f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027f4:	3468      	adds	r4, #104	; 0x68
 80027f6:	e7d9      	b.n	80027ac <__sfp+0x1c>
 80027f8:	2104      	movs	r1, #4
 80027fa:	4638      	mov	r0, r7
 80027fc:	f7ff ff62 	bl	80026c4 <__sfmoreglue>
 8002800:	4604      	mov	r4, r0
 8002802:	6030      	str	r0, [r6, #0]
 8002804:	2800      	cmp	r0, #0
 8002806:	d1d5      	bne.n	80027b4 <__sfp+0x24>
 8002808:	f7ff ff78 	bl	80026fc <__sfp_lock_release>
 800280c:	230c      	movs	r3, #12
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	e7ee      	b.n	80027f0 <__sfp+0x60>
 8002812:	bf00      	nop
 8002814:	0800555c 	.word	0x0800555c
 8002818:	ffff0001 	.word	0xffff0001

0800281c <_fwalk_reent>:
 800281c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002820:	4606      	mov	r6, r0
 8002822:	4688      	mov	r8, r1
 8002824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002828:	2700      	movs	r7, #0
 800282a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800282e:	f1b9 0901 	subs.w	r9, r9, #1
 8002832:	d505      	bpl.n	8002840 <_fwalk_reent+0x24>
 8002834:	6824      	ldr	r4, [r4, #0]
 8002836:	2c00      	cmp	r4, #0
 8002838:	d1f7      	bne.n	800282a <_fwalk_reent+0xe>
 800283a:	4638      	mov	r0, r7
 800283c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002840:	89ab      	ldrh	r3, [r5, #12]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d907      	bls.n	8002856 <_fwalk_reent+0x3a>
 8002846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800284a:	3301      	adds	r3, #1
 800284c:	d003      	beq.n	8002856 <_fwalk_reent+0x3a>
 800284e:	4629      	mov	r1, r5
 8002850:	4630      	mov	r0, r6
 8002852:	47c0      	blx	r8
 8002854:	4307      	orrs	r7, r0
 8002856:	3568      	adds	r5, #104	; 0x68
 8002858:	e7e9      	b.n	800282e <_fwalk_reent+0x12>
	...

0800285c <__libc_init_array>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	4d0d      	ldr	r5, [pc, #52]	; (8002894 <__libc_init_array+0x38>)
 8002860:	4c0d      	ldr	r4, [pc, #52]	; (8002898 <__libc_init_array+0x3c>)
 8002862:	1b64      	subs	r4, r4, r5
 8002864:	10a4      	asrs	r4, r4, #2
 8002866:	2600      	movs	r6, #0
 8002868:	42a6      	cmp	r6, r4
 800286a:	d109      	bne.n	8002880 <__libc_init_array+0x24>
 800286c:	4d0b      	ldr	r5, [pc, #44]	; (800289c <__libc_init_array+0x40>)
 800286e:	4c0c      	ldr	r4, [pc, #48]	; (80028a0 <__libc_init_array+0x44>)
 8002870:	f002 fe18 	bl	80054a4 <_init>
 8002874:	1b64      	subs	r4, r4, r5
 8002876:	10a4      	asrs	r4, r4, #2
 8002878:	2600      	movs	r6, #0
 800287a:	42a6      	cmp	r6, r4
 800287c:	d105      	bne.n	800288a <__libc_init_array+0x2e>
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	f855 3b04 	ldr.w	r3, [r5], #4
 8002884:	4798      	blx	r3
 8002886:	3601      	adds	r6, #1
 8002888:	e7ee      	b.n	8002868 <__libc_init_array+0xc>
 800288a:	f855 3b04 	ldr.w	r3, [r5], #4
 800288e:	4798      	blx	r3
 8002890:	3601      	adds	r6, #1
 8002892:	e7f2      	b.n	800287a <__libc_init_array+0x1e>
 8002894:	080058d4 	.word	0x080058d4
 8002898:	080058d4 	.word	0x080058d4
 800289c:	080058d4 	.word	0x080058d4
 80028a0:	080058d8 	.word	0x080058d8

080028a4 <__retarget_lock_init_recursive>:
 80028a4:	4770      	bx	lr

080028a6 <__retarget_lock_acquire_recursive>:
 80028a6:	4770      	bx	lr

080028a8 <__retarget_lock_release_recursive>:
 80028a8:	4770      	bx	lr

080028aa <memset>:
 80028aa:	4402      	add	r2, r0
 80028ac:	4603      	mov	r3, r0
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d100      	bne.n	80028b4 <memset+0xa>
 80028b2:	4770      	bx	lr
 80028b4:	f803 1b01 	strb.w	r1, [r3], #1
 80028b8:	e7f9      	b.n	80028ae <memset+0x4>
	...

080028bc <sbrk_aligned>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	4e0e      	ldr	r6, [pc, #56]	; (80028f8 <sbrk_aligned+0x3c>)
 80028c0:	460c      	mov	r4, r1
 80028c2:	6831      	ldr	r1, [r6, #0]
 80028c4:	4605      	mov	r5, r0
 80028c6:	b911      	cbnz	r1, 80028ce <sbrk_aligned+0x12>
 80028c8:	f000 fcf6 	bl	80032b8 <_sbrk_r>
 80028cc:	6030      	str	r0, [r6, #0]
 80028ce:	4621      	mov	r1, r4
 80028d0:	4628      	mov	r0, r5
 80028d2:	f000 fcf1 	bl	80032b8 <_sbrk_r>
 80028d6:	1c43      	adds	r3, r0, #1
 80028d8:	d00a      	beq.n	80028f0 <sbrk_aligned+0x34>
 80028da:	1cc4      	adds	r4, r0, #3
 80028dc:	f024 0403 	bic.w	r4, r4, #3
 80028e0:	42a0      	cmp	r0, r4
 80028e2:	d007      	beq.n	80028f4 <sbrk_aligned+0x38>
 80028e4:	1a21      	subs	r1, r4, r0
 80028e6:	4628      	mov	r0, r5
 80028e8:	f000 fce6 	bl	80032b8 <_sbrk_r>
 80028ec:	3001      	adds	r0, #1
 80028ee:	d101      	bne.n	80028f4 <sbrk_aligned+0x38>
 80028f0:	f04f 34ff 	mov.w	r4, #4294967295
 80028f4:	4620      	mov	r0, r4
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	2000035c 	.word	0x2000035c

080028fc <_malloc_r>:
 80028fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002900:	1ccd      	adds	r5, r1, #3
 8002902:	f025 0503 	bic.w	r5, r5, #3
 8002906:	3508      	adds	r5, #8
 8002908:	2d0c      	cmp	r5, #12
 800290a:	bf38      	it	cc
 800290c:	250c      	movcc	r5, #12
 800290e:	2d00      	cmp	r5, #0
 8002910:	4607      	mov	r7, r0
 8002912:	db01      	blt.n	8002918 <_malloc_r+0x1c>
 8002914:	42a9      	cmp	r1, r5
 8002916:	d905      	bls.n	8002924 <_malloc_r+0x28>
 8002918:	230c      	movs	r3, #12
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	2600      	movs	r6, #0
 800291e:	4630      	mov	r0, r6
 8002920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002924:	4e2e      	ldr	r6, [pc, #184]	; (80029e0 <_malloc_r+0xe4>)
 8002926:	f001 fcc7 	bl	80042b8 <__malloc_lock>
 800292a:	6833      	ldr	r3, [r6, #0]
 800292c:	461c      	mov	r4, r3
 800292e:	bb34      	cbnz	r4, 800297e <_malloc_r+0x82>
 8002930:	4629      	mov	r1, r5
 8002932:	4638      	mov	r0, r7
 8002934:	f7ff ffc2 	bl	80028bc <sbrk_aligned>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	4604      	mov	r4, r0
 800293c:	d14d      	bne.n	80029da <_malloc_r+0xde>
 800293e:	6834      	ldr	r4, [r6, #0]
 8002940:	4626      	mov	r6, r4
 8002942:	2e00      	cmp	r6, #0
 8002944:	d140      	bne.n	80029c8 <_malloc_r+0xcc>
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	4631      	mov	r1, r6
 800294a:	4638      	mov	r0, r7
 800294c:	eb04 0803 	add.w	r8, r4, r3
 8002950:	f000 fcb2 	bl	80032b8 <_sbrk_r>
 8002954:	4580      	cmp	r8, r0
 8002956:	d13a      	bne.n	80029ce <_malloc_r+0xd2>
 8002958:	6821      	ldr	r1, [r4, #0]
 800295a:	3503      	adds	r5, #3
 800295c:	1a6d      	subs	r5, r5, r1
 800295e:	f025 0503 	bic.w	r5, r5, #3
 8002962:	3508      	adds	r5, #8
 8002964:	2d0c      	cmp	r5, #12
 8002966:	bf38      	it	cc
 8002968:	250c      	movcc	r5, #12
 800296a:	4629      	mov	r1, r5
 800296c:	4638      	mov	r0, r7
 800296e:	f7ff ffa5 	bl	80028bc <sbrk_aligned>
 8002972:	3001      	adds	r0, #1
 8002974:	d02b      	beq.n	80029ce <_malloc_r+0xd2>
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	442b      	add	r3, r5
 800297a:	6023      	str	r3, [r4, #0]
 800297c:	e00e      	b.n	800299c <_malloc_r+0xa0>
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	1b52      	subs	r2, r2, r5
 8002982:	d41e      	bmi.n	80029c2 <_malloc_r+0xc6>
 8002984:	2a0b      	cmp	r2, #11
 8002986:	d916      	bls.n	80029b6 <_malloc_r+0xba>
 8002988:	1961      	adds	r1, r4, r5
 800298a:	42a3      	cmp	r3, r4
 800298c:	6025      	str	r5, [r4, #0]
 800298e:	bf18      	it	ne
 8002990:	6059      	strne	r1, [r3, #4]
 8002992:	6863      	ldr	r3, [r4, #4]
 8002994:	bf08      	it	eq
 8002996:	6031      	streq	r1, [r6, #0]
 8002998:	5162      	str	r2, [r4, r5]
 800299a:	604b      	str	r3, [r1, #4]
 800299c:	4638      	mov	r0, r7
 800299e:	f104 060b 	add.w	r6, r4, #11
 80029a2:	f001 fc8f 	bl	80042c4 <__malloc_unlock>
 80029a6:	f026 0607 	bic.w	r6, r6, #7
 80029aa:	1d23      	adds	r3, r4, #4
 80029ac:	1af2      	subs	r2, r6, r3
 80029ae:	d0b6      	beq.n	800291e <_malloc_r+0x22>
 80029b0:	1b9b      	subs	r3, r3, r6
 80029b2:	50a3      	str	r3, [r4, r2]
 80029b4:	e7b3      	b.n	800291e <_malloc_r+0x22>
 80029b6:	6862      	ldr	r2, [r4, #4]
 80029b8:	42a3      	cmp	r3, r4
 80029ba:	bf0c      	ite	eq
 80029bc:	6032      	streq	r2, [r6, #0]
 80029be:	605a      	strne	r2, [r3, #4]
 80029c0:	e7ec      	b.n	800299c <_malloc_r+0xa0>
 80029c2:	4623      	mov	r3, r4
 80029c4:	6864      	ldr	r4, [r4, #4]
 80029c6:	e7b2      	b.n	800292e <_malloc_r+0x32>
 80029c8:	4634      	mov	r4, r6
 80029ca:	6876      	ldr	r6, [r6, #4]
 80029cc:	e7b9      	b.n	8002942 <_malloc_r+0x46>
 80029ce:	230c      	movs	r3, #12
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	4638      	mov	r0, r7
 80029d4:	f001 fc76 	bl	80042c4 <__malloc_unlock>
 80029d8:	e7a1      	b.n	800291e <_malloc_r+0x22>
 80029da:	6025      	str	r5, [r4, #0]
 80029dc:	e7de      	b.n	800299c <_malloc_r+0xa0>
 80029de:	bf00      	nop
 80029e0:	20000358 	.word	0x20000358

080029e4 <__cvt>:
 80029e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029e8:	ec55 4b10 	vmov	r4, r5, d0
 80029ec:	2d00      	cmp	r5, #0
 80029ee:	460e      	mov	r6, r1
 80029f0:	4619      	mov	r1, r3
 80029f2:	462b      	mov	r3, r5
 80029f4:	bfbb      	ittet	lt
 80029f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80029fa:	461d      	movlt	r5, r3
 80029fc:	2300      	movge	r3, #0
 80029fe:	232d      	movlt	r3, #45	; 0x2d
 8002a00:	700b      	strb	r3, [r1, #0]
 8002a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002a08:	4691      	mov	r9, r2
 8002a0a:	f023 0820 	bic.w	r8, r3, #32
 8002a0e:	bfbc      	itt	lt
 8002a10:	4622      	movlt	r2, r4
 8002a12:	4614      	movlt	r4, r2
 8002a14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002a18:	d005      	beq.n	8002a26 <__cvt+0x42>
 8002a1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002a1e:	d100      	bne.n	8002a22 <__cvt+0x3e>
 8002a20:	3601      	adds	r6, #1
 8002a22:	2102      	movs	r1, #2
 8002a24:	e000      	b.n	8002a28 <__cvt+0x44>
 8002a26:	2103      	movs	r1, #3
 8002a28:	ab03      	add	r3, sp, #12
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	ab02      	add	r3, sp, #8
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	ec45 4b10 	vmov	d0, r4, r5
 8002a34:	4653      	mov	r3, sl
 8002a36:	4632      	mov	r2, r6
 8002a38:	f000 fd62 	bl	8003500 <_dtoa_r>
 8002a3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002a40:	4607      	mov	r7, r0
 8002a42:	d102      	bne.n	8002a4a <__cvt+0x66>
 8002a44:	f019 0f01 	tst.w	r9, #1
 8002a48:	d022      	beq.n	8002a90 <__cvt+0xac>
 8002a4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002a4e:	eb07 0906 	add.w	r9, r7, r6
 8002a52:	d110      	bne.n	8002a76 <__cvt+0x92>
 8002a54:	783b      	ldrb	r3, [r7, #0]
 8002a56:	2b30      	cmp	r3, #48	; 0x30
 8002a58:	d10a      	bne.n	8002a70 <__cvt+0x8c>
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	4620      	mov	r0, r4
 8002a60:	4629      	mov	r1, r5
 8002a62:	f7fe f851 	bl	8000b08 <__aeabi_dcmpeq>
 8002a66:	b918      	cbnz	r0, 8002a70 <__cvt+0x8c>
 8002a68:	f1c6 0601 	rsb	r6, r6, #1
 8002a6c:	f8ca 6000 	str.w	r6, [sl]
 8002a70:	f8da 3000 	ldr.w	r3, [sl]
 8002a74:	4499      	add	r9, r3
 8002a76:	2200      	movs	r2, #0
 8002a78:	2300      	movs	r3, #0
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f7fe f843 	bl	8000b08 <__aeabi_dcmpeq>
 8002a82:	b108      	cbz	r0, 8002a88 <__cvt+0xa4>
 8002a84:	f8cd 900c 	str.w	r9, [sp, #12]
 8002a88:	2230      	movs	r2, #48	; 0x30
 8002a8a:	9b03      	ldr	r3, [sp, #12]
 8002a8c:	454b      	cmp	r3, r9
 8002a8e:	d307      	bcc.n	8002aa0 <__cvt+0xbc>
 8002a90:	9b03      	ldr	r3, [sp, #12]
 8002a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a94:	1bdb      	subs	r3, r3, r7
 8002a96:	4638      	mov	r0, r7
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	b004      	add	sp, #16
 8002a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aa0:	1c59      	adds	r1, r3, #1
 8002aa2:	9103      	str	r1, [sp, #12]
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e7f0      	b.n	8002a8a <__cvt+0xa6>

08002aa8 <__exponent>:
 8002aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2900      	cmp	r1, #0
 8002aae:	bfb8      	it	lt
 8002ab0:	4249      	neglt	r1, r1
 8002ab2:	f803 2b02 	strb.w	r2, [r3], #2
 8002ab6:	bfb4      	ite	lt
 8002ab8:	222d      	movlt	r2, #45	; 0x2d
 8002aba:	222b      	movge	r2, #43	; 0x2b
 8002abc:	2909      	cmp	r1, #9
 8002abe:	7042      	strb	r2, [r0, #1]
 8002ac0:	dd2a      	ble.n	8002b18 <__exponent+0x70>
 8002ac2:	f10d 0407 	add.w	r4, sp, #7
 8002ac6:	46a4      	mov	ip, r4
 8002ac8:	270a      	movs	r7, #10
 8002aca:	46a6      	mov	lr, r4
 8002acc:	460a      	mov	r2, r1
 8002ace:	fb91 f6f7 	sdiv	r6, r1, r7
 8002ad2:	fb07 1516 	mls	r5, r7, r6, r1
 8002ad6:	3530      	adds	r5, #48	; 0x30
 8002ad8:	2a63      	cmp	r2, #99	; 0x63
 8002ada:	f104 34ff 	add.w	r4, r4, #4294967295
 8002ade:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002ae2:	4631      	mov	r1, r6
 8002ae4:	dcf1      	bgt.n	8002aca <__exponent+0x22>
 8002ae6:	3130      	adds	r1, #48	; 0x30
 8002ae8:	f1ae 0502 	sub.w	r5, lr, #2
 8002aec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002af0:	1c44      	adds	r4, r0, #1
 8002af2:	4629      	mov	r1, r5
 8002af4:	4561      	cmp	r1, ip
 8002af6:	d30a      	bcc.n	8002b0e <__exponent+0x66>
 8002af8:	f10d 0209 	add.w	r2, sp, #9
 8002afc:	eba2 020e 	sub.w	r2, r2, lr
 8002b00:	4565      	cmp	r5, ip
 8002b02:	bf88      	it	hi
 8002b04:	2200      	movhi	r2, #0
 8002b06:	4413      	add	r3, r2
 8002b08:	1a18      	subs	r0, r3, r0
 8002b0a:	b003      	add	sp, #12
 8002b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002b16:	e7ed      	b.n	8002af4 <__exponent+0x4c>
 8002b18:	2330      	movs	r3, #48	; 0x30
 8002b1a:	3130      	adds	r1, #48	; 0x30
 8002b1c:	7083      	strb	r3, [r0, #2]
 8002b1e:	70c1      	strb	r1, [r0, #3]
 8002b20:	1d03      	adds	r3, r0, #4
 8002b22:	e7f1      	b.n	8002b08 <__exponent+0x60>

08002b24 <_printf_float>:
 8002b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b28:	ed2d 8b02 	vpush	{d8}
 8002b2c:	b08d      	sub	sp, #52	; 0x34
 8002b2e:	460c      	mov	r4, r1
 8002b30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002b34:	4616      	mov	r6, r2
 8002b36:	461f      	mov	r7, r3
 8002b38:	4605      	mov	r5, r0
 8002b3a:	f001 fb91 	bl	8004260 <_localeconv_r>
 8002b3e:	f8d0 a000 	ldr.w	sl, [r0]
 8002b42:	4650      	mov	r0, sl
 8002b44:	f7fd fb64 	bl	8000210 <strlen>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	9305      	str	r3, [sp, #20]
 8002b50:	f8d8 3000 	ldr.w	r3, [r8]
 8002b54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002b58:	3307      	adds	r3, #7
 8002b5a:	f023 0307 	bic.w	r3, r3, #7
 8002b5e:	f103 0208 	add.w	r2, r3, #8
 8002b62:	f8c8 2000 	str.w	r2, [r8]
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002b6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002b72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002b76:	9307      	str	r3, [sp, #28]
 8002b78:	f8cd 8018 	str.w	r8, [sp, #24]
 8002b7c:	ee08 0a10 	vmov	s16, r0
 8002b80:	4b9f      	ldr	r3, [pc, #636]	; (8002e00 <_printf_float+0x2dc>)
 8002b82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b86:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8a:	f7fd ffef 	bl	8000b6c <__aeabi_dcmpun>
 8002b8e:	bb88      	cbnz	r0, 8002bf4 <_printf_float+0xd0>
 8002b90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b94:	4b9a      	ldr	r3, [pc, #616]	; (8002e00 <_printf_float+0x2dc>)
 8002b96:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9a:	f7fd ffc9 	bl	8000b30 <__aeabi_dcmple>
 8002b9e:	bb48      	cbnz	r0, 8002bf4 <_printf_float+0xd0>
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	f7fd ffb8 	bl	8000b1c <__aeabi_dcmplt>
 8002bac:	b110      	cbz	r0, 8002bb4 <_printf_float+0x90>
 8002bae:	232d      	movs	r3, #45	; 0x2d
 8002bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb4:	4b93      	ldr	r3, [pc, #588]	; (8002e04 <_printf_float+0x2e0>)
 8002bb6:	4894      	ldr	r0, [pc, #592]	; (8002e08 <_printf_float+0x2e4>)
 8002bb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002bbc:	bf94      	ite	ls
 8002bbe:	4698      	movls	r8, r3
 8002bc0:	4680      	movhi	r8, r0
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	6123      	str	r3, [r4, #16]
 8002bc6:	9b05      	ldr	r3, [sp, #20]
 8002bc8:	f023 0204 	bic.w	r2, r3, #4
 8002bcc:	6022      	str	r2, [r4, #0]
 8002bce:	f04f 0900 	mov.w	r9, #0
 8002bd2:	9700      	str	r7, [sp, #0]
 8002bd4:	4633      	mov	r3, r6
 8002bd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8002bd8:	4621      	mov	r1, r4
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f000 f9d8 	bl	8002f90 <_printf_common>
 8002be0:	3001      	adds	r0, #1
 8002be2:	f040 8090 	bne.w	8002d06 <_printf_float+0x1e2>
 8002be6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bea:	b00d      	add	sp, #52	; 0x34
 8002bec:	ecbd 8b02 	vpop	{d8}
 8002bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	4640      	mov	r0, r8
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	f7fd ffb6 	bl	8000b6c <__aeabi_dcmpun>
 8002c00:	b140      	cbz	r0, 8002c14 <_printf_float+0xf0>
 8002c02:	464b      	mov	r3, r9
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bfbc      	itt	lt
 8002c08:	232d      	movlt	r3, #45	; 0x2d
 8002c0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002c0e:	487f      	ldr	r0, [pc, #508]	; (8002e0c <_printf_float+0x2e8>)
 8002c10:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <_printf_float+0x2ec>)
 8002c12:	e7d1      	b.n	8002bb8 <_printf_float+0x94>
 8002c14:	6863      	ldr	r3, [r4, #4]
 8002c16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002c1a:	9206      	str	r2, [sp, #24]
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	d13f      	bne.n	8002ca0 <_printf_float+0x17c>
 8002c20:	2306      	movs	r3, #6
 8002c22:	6063      	str	r3, [r4, #4]
 8002c24:	9b05      	ldr	r3, [sp, #20]
 8002c26:	6861      	ldr	r1, [r4, #4]
 8002c28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	9303      	str	r3, [sp, #12]
 8002c30:	ab0a      	add	r3, sp, #40	; 0x28
 8002c32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002c36:	ab09      	add	r3, sp, #36	; 0x24
 8002c38:	ec49 8b10 	vmov	d0, r8, r9
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	6022      	str	r2, [r4, #0]
 8002c40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002c44:	4628      	mov	r0, r5
 8002c46:	f7ff fecd 	bl	80029e4 <__cvt>
 8002c4a:	9b06      	ldr	r3, [sp, #24]
 8002c4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002c4e:	2b47      	cmp	r3, #71	; 0x47
 8002c50:	4680      	mov	r8, r0
 8002c52:	d108      	bne.n	8002c66 <_printf_float+0x142>
 8002c54:	1cc8      	adds	r0, r1, #3
 8002c56:	db02      	blt.n	8002c5e <_printf_float+0x13a>
 8002c58:	6863      	ldr	r3, [r4, #4]
 8002c5a:	4299      	cmp	r1, r3
 8002c5c:	dd41      	ble.n	8002ce2 <_printf_float+0x1be>
 8002c5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8002c62:	fa5f fb8b 	uxtb.w	fp, fp
 8002c66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002c6a:	d820      	bhi.n	8002cae <_printf_float+0x18a>
 8002c6c:	3901      	subs	r1, #1
 8002c6e:	465a      	mov	r2, fp
 8002c70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002c74:	9109      	str	r1, [sp, #36]	; 0x24
 8002c76:	f7ff ff17 	bl	8002aa8 <__exponent>
 8002c7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c7c:	1813      	adds	r3, r2, r0
 8002c7e:	2a01      	cmp	r2, #1
 8002c80:	4681      	mov	r9, r0
 8002c82:	6123      	str	r3, [r4, #16]
 8002c84:	dc02      	bgt.n	8002c8c <_printf_float+0x168>
 8002c86:	6822      	ldr	r2, [r4, #0]
 8002c88:	07d2      	lsls	r2, r2, #31
 8002c8a:	d501      	bpl.n	8002c90 <_printf_float+0x16c>
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	6123      	str	r3, [r4, #16]
 8002c90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d09c      	beq.n	8002bd2 <_printf_float+0xae>
 8002c98:	232d      	movs	r3, #45	; 0x2d
 8002c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c9e:	e798      	b.n	8002bd2 <_printf_float+0xae>
 8002ca0:	9a06      	ldr	r2, [sp, #24]
 8002ca2:	2a47      	cmp	r2, #71	; 0x47
 8002ca4:	d1be      	bne.n	8002c24 <_printf_float+0x100>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1bc      	bne.n	8002c24 <_printf_float+0x100>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e7b9      	b.n	8002c22 <_printf_float+0xfe>
 8002cae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002cb2:	d118      	bne.n	8002ce6 <_printf_float+0x1c2>
 8002cb4:	2900      	cmp	r1, #0
 8002cb6:	6863      	ldr	r3, [r4, #4]
 8002cb8:	dd0b      	ble.n	8002cd2 <_printf_float+0x1ae>
 8002cba:	6121      	str	r1, [r4, #16]
 8002cbc:	b913      	cbnz	r3, 8002cc4 <_printf_float+0x1a0>
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	07d0      	lsls	r0, r2, #31
 8002cc2:	d502      	bpl.n	8002cca <_printf_float+0x1a6>
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	440b      	add	r3, r1
 8002cc8:	6123      	str	r3, [r4, #16]
 8002cca:	65a1      	str	r1, [r4, #88]	; 0x58
 8002ccc:	f04f 0900 	mov.w	r9, #0
 8002cd0:	e7de      	b.n	8002c90 <_printf_float+0x16c>
 8002cd2:	b913      	cbnz	r3, 8002cda <_printf_float+0x1b6>
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	07d2      	lsls	r2, r2, #31
 8002cd8:	d501      	bpl.n	8002cde <_printf_float+0x1ba>
 8002cda:	3302      	adds	r3, #2
 8002cdc:	e7f4      	b.n	8002cc8 <_printf_float+0x1a4>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e7f2      	b.n	8002cc8 <_printf_float+0x1a4>
 8002ce2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ce8:	4299      	cmp	r1, r3
 8002cea:	db05      	blt.n	8002cf8 <_printf_float+0x1d4>
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	6121      	str	r1, [r4, #16]
 8002cf0:	07d8      	lsls	r0, r3, #31
 8002cf2:	d5ea      	bpl.n	8002cca <_printf_float+0x1a6>
 8002cf4:	1c4b      	adds	r3, r1, #1
 8002cf6:	e7e7      	b.n	8002cc8 <_printf_float+0x1a4>
 8002cf8:	2900      	cmp	r1, #0
 8002cfa:	bfd4      	ite	le
 8002cfc:	f1c1 0202 	rsble	r2, r1, #2
 8002d00:	2201      	movgt	r2, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	e7e0      	b.n	8002cc8 <_printf_float+0x1a4>
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	055a      	lsls	r2, r3, #21
 8002d0a:	d407      	bmi.n	8002d1c <_printf_float+0x1f8>
 8002d0c:	6923      	ldr	r3, [r4, #16]
 8002d0e:	4642      	mov	r2, r8
 8002d10:	4631      	mov	r1, r6
 8002d12:	4628      	mov	r0, r5
 8002d14:	47b8      	blx	r7
 8002d16:	3001      	adds	r0, #1
 8002d18:	d12c      	bne.n	8002d74 <_printf_float+0x250>
 8002d1a:	e764      	b.n	8002be6 <_printf_float+0xc2>
 8002d1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002d20:	f240 80e0 	bls.w	8002ee4 <_printf_float+0x3c0>
 8002d24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f7fd feec 	bl	8000b08 <__aeabi_dcmpeq>
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d034      	beq.n	8002d9e <_printf_float+0x27a>
 8002d34:	4a37      	ldr	r2, [pc, #220]	; (8002e14 <_printf_float+0x2f0>)
 8002d36:	2301      	movs	r3, #1
 8002d38:	4631      	mov	r1, r6
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	47b8      	blx	r7
 8002d3e:	3001      	adds	r0, #1
 8002d40:	f43f af51 	beq.w	8002be6 <_printf_float+0xc2>
 8002d44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	db02      	blt.n	8002d52 <_printf_float+0x22e>
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	07d8      	lsls	r0, r3, #31
 8002d50:	d510      	bpl.n	8002d74 <_printf_float+0x250>
 8002d52:	ee18 3a10 	vmov	r3, s16
 8002d56:	4652      	mov	r2, sl
 8002d58:	4631      	mov	r1, r6
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	47b8      	blx	r7
 8002d5e:	3001      	adds	r0, #1
 8002d60:	f43f af41 	beq.w	8002be6 <_printf_float+0xc2>
 8002d64:	f04f 0800 	mov.w	r8, #0
 8002d68:	f104 091a 	add.w	r9, r4, #26
 8002d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	4543      	cmp	r3, r8
 8002d72:	dc09      	bgt.n	8002d88 <_printf_float+0x264>
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	079b      	lsls	r3, r3, #30
 8002d78:	f100 8105 	bmi.w	8002f86 <_printf_float+0x462>
 8002d7c:	68e0      	ldr	r0, [r4, #12]
 8002d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d80:	4298      	cmp	r0, r3
 8002d82:	bfb8      	it	lt
 8002d84:	4618      	movlt	r0, r3
 8002d86:	e730      	b.n	8002bea <_printf_float+0xc6>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	464a      	mov	r2, r9
 8002d8c:	4631      	mov	r1, r6
 8002d8e:	4628      	mov	r0, r5
 8002d90:	47b8      	blx	r7
 8002d92:	3001      	adds	r0, #1
 8002d94:	f43f af27 	beq.w	8002be6 <_printf_float+0xc2>
 8002d98:	f108 0801 	add.w	r8, r8, #1
 8002d9c:	e7e6      	b.n	8002d6c <_printf_float+0x248>
 8002d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	dc39      	bgt.n	8002e18 <_printf_float+0x2f4>
 8002da4:	4a1b      	ldr	r2, [pc, #108]	; (8002e14 <_printf_float+0x2f0>)
 8002da6:	2301      	movs	r3, #1
 8002da8:	4631      	mov	r1, r6
 8002daa:	4628      	mov	r0, r5
 8002dac:	47b8      	blx	r7
 8002dae:	3001      	adds	r0, #1
 8002db0:	f43f af19 	beq.w	8002be6 <_printf_float+0xc2>
 8002db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002db8:	4313      	orrs	r3, r2
 8002dba:	d102      	bne.n	8002dc2 <_printf_float+0x29e>
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	07d9      	lsls	r1, r3, #31
 8002dc0:	d5d8      	bpl.n	8002d74 <_printf_float+0x250>
 8002dc2:	ee18 3a10 	vmov	r3, s16
 8002dc6:	4652      	mov	r2, sl
 8002dc8:	4631      	mov	r1, r6
 8002dca:	4628      	mov	r0, r5
 8002dcc:	47b8      	blx	r7
 8002dce:	3001      	adds	r0, #1
 8002dd0:	f43f af09 	beq.w	8002be6 <_printf_float+0xc2>
 8002dd4:	f04f 0900 	mov.w	r9, #0
 8002dd8:	f104 0a1a 	add.w	sl, r4, #26
 8002ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dde:	425b      	negs	r3, r3
 8002de0:	454b      	cmp	r3, r9
 8002de2:	dc01      	bgt.n	8002de8 <_printf_float+0x2c4>
 8002de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002de6:	e792      	b.n	8002d0e <_printf_float+0x1ea>
 8002de8:	2301      	movs	r3, #1
 8002dea:	4652      	mov	r2, sl
 8002dec:	4631      	mov	r1, r6
 8002dee:	4628      	mov	r0, r5
 8002df0:	47b8      	blx	r7
 8002df2:	3001      	adds	r0, #1
 8002df4:	f43f aef7 	beq.w	8002be6 <_printf_float+0xc2>
 8002df8:	f109 0901 	add.w	r9, r9, #1
 8002dfc:	e7ee      	b.n	8002ddc <_printf_float+0x2b8>
 8002dfe:	bf00      	nop
 8002e00:	7fefffff 	.word	0x7fefffff
 8002e04:	08005560 	.word	0x08005560
 8002e08:	08005564 	.word	0x08005564
 8002e0c:	0800556c 	.word	0x0800556c
 8002e10:	08005568 	.word	0x08005568
 8002e14:	08005570 	.word	0x08005570
 8002e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	bfa8      	it	ge
 8002e20:	461a      	movge	r2, r3
 8002e22:	2a00      	cmp	r2, #0
 8002e24:	4691      	mov	r9, r2
 8002e26:	dc37      	bgt.n	8002e98 <_printf_float+0x374>
 8002e28:	f04f 0b00 	mov.w	fp, #0
 8002e2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e30:	f104 021a 	add.w	r2, r4, #26
 8002e34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e36:	9305      	str	r3, [sp, #20]
 8002e38:	eba3 0309 	sub.w	r3, r3, r9
 8002e3c:	455b      	cmp	r3, fp
 8002e3e:	dc33      	bgt.n	8002ea8 <_printf_float+0x384>
 8002e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e44:	429a      	cmp	r2, r3
 8002e46:	db3b      	blt.n	8002ec0 <_printf_float+0x39c>
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	07da      	lsls	r2, r3, #31
 8002e4c:	d438      	bmi.n	8002ec0 <_printf_float+0x39c>
 8002e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e50:	9a05      	ldr	r2, [sp, #20]
 8002e52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e54:	1a9a      	subs	r2, r3, r2
 8002e56:	eba3 0901 	sub.w	r9, r3, r1
 8002e5a:	4591      	cmp	r9, r2
 8002e5c:	bfa8      	it	ge
 8002e5e:	4691      	movge	r9, r2
 8002e60:	f1b9 0f00 	cmp.w	r9, #0
 8002e64:	dc35      	bgt.n	8002ed2 <_printf_float+0x3ae>
 8002e66:	f04f 0800 	mov.w	r8, #0
 8002e6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e6e:	f104 0a1a 	add.w	sl, r4, #26
 8002e72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	eba3 0309 	sub.w	r3, r3, r9
 8002e7c:	4543      	cmp	r3, r8
 8002e7e:	f77f af79 	ble.w	8002d74 <_printf_float+0x250>
 8002e82:	2301      	movs	r3, #1
 8002e84:	4652      	mov	r2, sl
 8002e86:	4631      	mov	r1, r6
 8002e88:	4628      	mov	r0, r5
 8002e8a:	47b8      	blx	r7
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	f43f aeaa 	beq.w	8002be6 <_printf_float+0xc2>
 8002e92:	f108 0801 	add.w	r8, r8, #1
 8002e96:	e7ec      	b.n	8002e72 <_printf_float+0x34e>
 8002e98:	4613      	mov	r3, r2
 8002e9a:	4631      	mov	r1, r6
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	47b8      	blx	r7
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	d1c0      	bne.n	8002e28 <_printf_float+0x304>
 8002ea6:	e69e      	b.n	8002be6 <_printf_float+0xc2>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	4631      	mov	r1, r6
 8002eac:	4628      	mov	r0, r5
 8002eae:	9205      	str	r2, [sp, #20]
 8002eb0:	47b8      	blx	r7
 8002eb2:	3001      	adds	r0, #1
 8002eb4:	f43f ae97 	beq.w	8002be6 <_printf_float+0xc2>
 8002eb8:	9a05      	ldr	r2, [sp, #20]
 8002eba:	f10b 0b01 	add.w	fp, fp, #1
 8002ebe:	e7b9      	b.n	8002e34 <_printf_float+0x310>
 8002ec0:	ee18 3a10 	vmov	r3, s16
 8002ec4:	4652      	mov	r2, sl
 8002ec6:	4631      	mov	r1, r6
 8002ec8:	4628      	mov	r0, r5
 8002eca:	47b8      	blx	r7
 8002ecc:	3001      	adds	r0, #1
 8002ece:	d1be      	bne.n	8002e4e <_printf_float+0x32a>
 8002ed0:	e689      	b.n	8002be6 <_printf_float+0xc2>
 8002ed2:	9a05      	ldr	r2, [sp, #20]
 8002ed4:	464b      	mov	r3, r9
 8002ed6:	4442      	add	r2, r8
 8002ed8:	4631      	mov	r1, r6
 8002eda:	4628      	mov	r0, r5
 8002edc:	47b8      	blx	r7
 8002ede:	3001      	adds	r0, #1
 8002ee0:	d1c1      	bne.n	8002e66 <_printf_float+0x342>
 8002ee2:	e680      	b.n	8002be6 <_printf_float+0xc2>
 8002ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ee6:	2a01      	cmp	r2, #1
 8002ee8:	dc01      	bgt.n	8002eee <_printf_float+0x3ca>
 8002eea:	07db      	lsls	r3, r3, #31
 8002eec:	d538      	bpl.n	8002f60 <_printf_float+0x43c>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	4642      	mov	r2, r8
 8002ef2:	4631      	mov	r1, r6
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	47b8      	blx	r7
 8002ef8:	3001      	adds	r0, #1
 8002efa:	f43f ae74 	beq.w	8002be6 <_printf_float+0xc2>
 8002efe:	ee18 3a10 	vmov	r3, s16
 8002f02:	4652      	mov	r2, sl
 8002f04:	4631      	mov	r1, r6
 8002f06:	4628      	mov	r0, r5
 8002f08:	47b8      	blx	r7
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	f43f ae6b 	beq.w	8002be6 <_printf_float+0xc2>
 8002f10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f14:	2200      	movs	r2, #0
 8002f16:	2300      	movs	r3, #0
 8002f18:	f7fd fdf6 	bl	8000b08 <__aeabi_dcmpeq>
 8002f1c:	b9d8      	cbnz	r0, 8002f56 <_printf_float+0x432>
 8002f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f20:	f108 0201 	add.w	r2, r8, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	4631      	mov	r1, r6
 8002f28:	4628      	mov	r0, r5
 8002f2a:	47b8      	blx	r7
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d10e      	bne.n	8002f4e <_printf_float+0x42a>
 8002f30:	e659      	b.n	8002be6 <_printf_float+0xc2>
 8002f32:	2301      	movs	r3, #1
 8002f34:	4652      	mov	r2, sl
 8002f36:	4631      	mov	r1, r6
 8002f38:	4628      	mov	r0, r5
 8002f3a:	47b8      	blx	r7
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	f43f ae52 	beq.w	8002be6 <_printf_float+0xc2>
 8002f42:	f108 0801 	add.w	r8, r8, #1
 8002f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	4543      	cmp	r3, r8
 8002f4c:	dcf1      	bgt.n	8002f32 <_printf_float+0x40e>
 8002f4e:	464b      	mov	r3, r9
 8002f50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f54:	e6dc      	b.n	8002d10 <_printf_float+0x1ec>
 8002f56:	f04f 0800 	mov.w	r8, #0
 8002f5a:	f104 0a1a 	add.w	sl, r4, #26
 8002f5e:	e7f2      	b.n	8002f46 <_printf_float+0x422>
 8002f60:	2301      	movs	r3, #1
 8002f62:	4642      	mov	r2, r8
 8002f64:	e7df      	b.n	8002f26 <_printf_float+0x402>
 8002f66:	2301      	movs	r3, #1
 8002f68:	464a      	mov	r2, r9
 8002f6a:	4631      	mov	r1, r6
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	47b8      	blx	r7
 8002f70:	3001      	adds	r0, #1
 8002f72:	f43f ae38 	beq.w	8002be6 <_printf_float+0xc2>
 8002f76:	f108 0801 	add.w	r8, r8, #1
 8002f7a:	68e3      	ldr	r3, [r4, #12]
 8002f7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f7e:	1a5b      	subs	r3, r3, r1
 8002f80:	4543      	cmp	r3, r8
 8002f82:	dcf0      	bgt.n	8002f66 <_printf_float+0x442>
 8002f84:	e6fa      	b.n	8002d7c <_printf_float+0x258>
 8002f86:	f04f 0800 	mov.w	r8, #0
 8002f8a:	f104 0919 	add.w	r9, r4, #25
 8002f8e:	e7f4      	b.n	8002f7a <_printf_float+0x456>

08002f90 <_printf_common>:
 8002f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f94:	4616      	mov	r6, r2
 8002f96:	4699      	mov	r9, r3
 8002f98:	688a      	ldr	r2, [r1, #8]
 8002f9a:	690b      	ldr	r3, [r1, #16]
 8002f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bfb8      	it	lt
 8002fa4:	4613      	movlt	r3, r2
 8002fa6:	6033      	str	r3, [r6, #0]
 8002fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fac:	4607      	mov	r7, r0
 8002fae:	460c      	mov	r4, r1
 8002fb0:	b10a      	cbz	r2, 8002fb6 <_printf_common+0x26>
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	6033      	str	r3, [r6, #0]
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	0699      	lsls	r1, r3, #26
 8002fba:	bf42      	ittt	mi
 8002fbc:	6833      	ldrmi	r3, [r6, #0]
 8002fbe:	3302      	addmi	r3, #2
 8002fc0:	6033      	strmi	r3, [r6, #0]
 8002fc2:	6825      	ldr	r5, [r4, #0]
 8002fc4:	f015 0506 	ands.w	r5, r5, #6
 8002fc8:	d106      	bne.n	8002fd8 <_printf_common+0x48>
 8002fca:	f104 0a19 	add.w	sl, r4, #25
 8002fce:	68e3      	ldr	r3, [r4, #12]
 8002fd0:	6832      	ldr	r2, [r6, #0]
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	42ab      	cmp	r3, r5
 8002fd6:	dc26      	bgt.n	8003026 <_printf_common+0x96>
 8002fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fdc:	1e13      	subs	r3, r2, #0
 8002fde:	6822      	ldr	r2, [r4, #0]
 8002fe0:	bf18      	it	ne
 8002fe2:	2301      	movne	r3, #1
 8002fe4:	0692      	lsls	r2, r2, #26
 8002fe6:	d42b      	bmi.n	8003040 <_printf_common+0xb0>
 8002fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fec:	4649      	mov	r1, r9
 8002fee:	4638      	mov	r0, r7
 8002ff0:	47c0      	blx	r8
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	d01e      	beq.n	8003034 <_printf_common+0xa4>
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	68e5      	ldr	r5, [r4, #12]
 8002ffa:	6832      	ldr	r2, [r6, #0]
 8002ffc:	f003 0306 	and.w	r3, r3, #6
 8003000:	2b04      	cmp	r3, #4
 8003002:	bf08      	it	eq
 8003004:	1aad      	subeq	r5, r5, r2
 8003006:	68a3      	ldr	r3, [r4, #8]
 8003008:	6922      	ldr	r2, [r4, #16]
 800300a:	bf0c      	ite	eq
 800300c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003010:	2500      	movne	r5, #0
 8003012:	4293      	cmp	r3, r2
 8003014:	bfc4      	itt	gt
 8003016:	1a9b      	subgt	r3, r3, r2
 8003018:	18ed      	addgt	r5, r5, r3
 800301a:	2600      	movs	r6, #0
 800301c:	341a      	adds	r4, #26
 800301e:	42b5      	cmp	r5, r6
 8003020:	d11a      	bne.n	8003058 <_printf_common+0xc8>
 8003022:	2000      	movs	r0, #0
 8003024:	e008      	b.n	8003038 <_printf_common+0xa8>
 8003026:	2301      	movs	r3, #1
 8003028:	4652      	mov	r2, sl
 800302a:	4649      	mov	r1, r9
 800302c:	4638      	mov	r0, r7
 800302e:	47c0      	blx	r8
 8003030:	3001      	adds	r0, #1
 8003032:	d103      	bne.n	800303c <_printf_common+0xac>
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800303c:	3501      	adds	r5, #1
 800303e:	e7c6      	b.n	8002fce <_printf_common+0x3e>
 8003040:	18e1      	adds	r1, r4, r3
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	2030      	movs	r0, #48	; 0x30
 8003046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800304a:	4422      	add	r2, r4
 800304c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003054:	3302      	adds	r3, #2
 8003056:	e7c7      	b.n	8002fe8 <_printf_common+0x58>
 8003058:	2301      	movs	r3, #1
 800305a:	4622      	mov	r2, r4
 800305c:	4649      	mov	r1, r9
 800305e:	4638      	mov	r0, r7
 8003060:	47c0      	blx	r8
 8003062:	3001      	adds	r0, #1
 8003064:	d0e6      	beq.n	8003034 <_printf_common+0xa4>
 8003066:	3601      	adds	r6, #1
 8003068:	e7d9      	b.n	800301e <_printf_common+0x8e>
	...

0800306c <_printf_i>:
 800306c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003070:	7e0f      	ldrb	r7, [r1, #24]
 8003072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003074:	2f78      	cmp	r7, #120	; 0x78
 8003076:	4691      	mov	r9, r2
 8003078:	4680      	mov	r8, r0
 800307a:	460c      	mov	r4, r1
 800307c:	469a      	mov	sl, r3
 800307e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003082:	d807      	bhi.n	8003094 <_printf_i+0x28>
 8003084:	2f62      	cmp	r7, #98	; 0x62
 8003086:	d80a      	bhi.n	800309e <_printf_i+0x32>
 8003088:	2f00      	cmp	r7, #0
 800308a:	f000 80d8 	beq.w	800323e <_printf_i+0x1d2>
 800308e:	2f58      	cmp	r7, #88	; 0x58
 8003090:	f000 80a3 	beq.w	80031da <_printf_i+0x16e>
 8003094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800309c:	e03a      	b.n	8003114 <_printf_i+0xa8>
 800309e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030a2:	2b15      	cmp	r3, #21
 80030a4:	d8f6      	bhi.n	8003094 <_printf_i+0x28>
 80030a6:	a101      	add	r1, pc, #4	; (adr r1, 80030ac <_printf_i+0x40>)
 80030a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030ac:	08003105 	.word	0x08003105
 80030b0:	08003119 	.word	0x08003119
 80030b4:	08003095 	.word	0x08003095
 80030b8:	08003095 	.word	0x08003095
 80030bc:	08003095 	.word	0x08003095
 80030c0:	08003095 	.word	0x08003095
 80030c4:	08003119 	.word	0x08003119
 80030c8:	08003095 	.word	0x08003095
 80030cc:	08003095 	.word	0x08003095
 80030d0:	08003095 	.word	0x08003095
 80030d4:	08003095 	.word	0x08003095
 80030d8:	08003225 	.word	0x08003225
 80030dc:	08003149 	.word	0x08003149
 80030e0:	08003207 	.word	0x08003207
 80030e4:	08003095 	.word	0x08003095
 80030e8:	08003095 	.word	0x08003095
 80030ec:	08003247 	.word	0x08003247
 80030f0:	08003095 	.word	0x08003095
 80030f4:	08003149 	.word	0x08003149
 80030f8:	08003095 	.word	0x08003095
 80030fc:	08003095 	.word	0x08003095
 8003100:	0800320f 	.word	0x0800320f
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	1d1a      	adds	r2, r3, #4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	602a      	str	r2, [r5, #0]
 800310c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003114:	2301      	movs	r3, #1
 8003116:	e0a3      	b.n	8003260 <_printf_i+0x1f4>
 8003118:	6820      	ldr	r0, [r4, #0]
 800311a:	6829      	ldr	r1, [r5, #0]
 800311c:	0606      	lsls	r6, r0, #24
 800311e:	f101 0304 	add.w	r3, r1, #4
 8003122:	d50a      	bpl.n	800313a <_printf_i+0xce>
 8003124:	680e      	ldr	r6, [r1, #0]
 8003126:	602b      	str	r3, [r5, #0]
 8003128:	2e00      	cmp	r6, #0
 800312a:	da03      	bge.n	8003134 <_printf_i+0xc8>
 800312c:	232d      	movs	r3, #45	; 0x2d
 800312e:	4276      	negs	r6, r6
 8003130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003134:	485e      	ldr	r0, [pc, #376]	; (80032b0 <_printf_i+0x244>)
 8003136:	230a      	movs	r3, #10
 8003138:	e019      	b.n	800316e <_printf_i+0x102>
 800313a:	680e      	ldr	r6, [r1, #0]
 800313c:	602b      	str	r3, [r5, #0]
 800313e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003142:	bf18      	it	ne
 8003144:	b236      	sxthne	r6, r6
 8003146:	e7ef      	b.n	8003128 <_printf_i+0xbc>
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	6820      	ldr	r0, [r4, #0]
 800314c:	1d19      	adds	r1, r3, #4
 800314e:	6029      	str	r1, [r5, #0]
 8003150:	0601      	lsls	r1, r0, #24
 8003152:	d501      	bpl.n	8003158 <_printf_i+0xec>
 8003154:	681e      	ldr	r6, [r3, #0]
 8003156:	e002      	b.n	800315e <_printf_i+0xf2>
 8003158:	0646      	lsls	r6, r0, #25
 800315a:	d5fb      	bpl.n	8003154 <_printf_i+0xe8>
 800315c:	881e      	ldrh	r6, [r3, #0]
 800315e:	4854      	ldr	r0, [pc, #336]	; (80032b0 <_printf_i+0x244>)
 8003160:	2f6f      	cmp	r7, #111	; 0x6f
 8003162:	bf0c      	ite	eq
 8003164:	2308      	moveq	r3, #8
 8003166:	230a      	movne	r3, #10
 8003168:	2100      	movs	r1, #0
 800316a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800316e:	6865      	ldr	r5, [r4, #4]
 8003170:	60a5      	str	r5, [r4, #8]
 8003172:	2d00      	cmp	r5, #0
 8003174:	bfa2      	ittt	ge
 8003176:	6821      	ldrge	r1, [r4, #0]
 8003178:	f021 0104 	bicge.w	r1, r1, #4
 800317c:	6021      	strge	r1, [r4, #0]
 800317e:	b90e      	cbnz	r6, 8003184 <_printf_i+0x118>
 8003180:	2d00      	cmp	r5, #0
 8003182:	d04d      	beq.n	8003220 <_printf_i+0x1b4>
 8003184:	4615      	mov	r5, r2
 8003186:	fbb6 f1f3 	udiv	r1, r6, r3
 800318a:	fb03 6711 	mls	r7, r3, r1, r6
 800318e:	5dc7      	ldrb	r7, [r0, r7]
 8003190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003194:	4637      	mov	r7, r6
 8003196:	42bb      	cmp	r3, r7
 8003198:	460e      	mov	r6, r1
 800319a:	d9f4      	bls.n	8003186 <_printf_i+0x11a>
 800319c:	2b08      	cmp	r3, #8
 800319e:	d10b      	bne.n	80031b8 <_printf_i+0x14c>
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	07de      	lsls	r6, r3, #31
 80031a4:	d508      	bpl.n	80031b8 <_printf_i+0x14c>
 80031a6:	6923      	ldr	r3, [r4, #16]
 80031a8:	6861      	ldr	r1, [r4, #4]
 80031aa:	4299      	cmp	r1, r3
 80031ac:	bfde      	ittt	le
 80031ae:	2330      	movle	r3, #48	; 0x30
 80031b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031b8:	1b52      	subs	r2, r2, r5
 80031ba:	6122      	str	r2, [r4, #16]
 80031bc:	f8cd a000 	str.w	sl, [sp]
 80031c0:	464b      	mov	r3, r9
 80031c2:	aa03      	add	r2, sp, #12
 80031c4:	4621      	mov	r1, r4
 80031c6:	4640      	mov	r0, r8
 80031c8:	f7ff fee2 	bl	8002f90 <_printf_common>
 80031cc:	3001      	adds	r0, #1
 80031ce:	d14c      	bne.n	800326a <_printf_i+0x1fe>
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	b004      	add	sp, #16
 80031d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031da:	4835      	ldr	r0, [pc, #212]	; (80032b0 <_printf_i+0x244>)
 80031dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80031e0:	6829      	ldr	r1, [r5, #0]
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80031e8:	6029      	str	r1, [r5, #0]
 80031ea:	061d      	lsls	r5, r3, #24
 80031ec:	d514      	bpl.n	8003218 <_printf_i+0x1ac>
 80031ee:	07df      	lsls	r7, r3, #31
 80031f0:	bf44      	itt	mi
 80031f2:	f043 0320 	orrmi.w	r3, r3, #32
 80031f6:	6023      	strmi	r3, [r4, #0]
 80031f8:	b91e      	cbnz	r6, 8003202 <_printf_i+0x196>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	f023 0320 	bic.w	r3, r3, #32
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	2310      	movs	r3, #16
 8003204:	e7b0      	b.n	8003168 <_printf_i+0xfc>
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	f043 0320 	orr.w	r3, r3, #32
 800320c:	6023      	str	r3, [r4, #0]
 800320e:	2378      	movs	r3, #120	; 0x78
 8003210:	4828      	ldr	r0, [pc, #160]	; (80032b4 <_printf_i+0x248>)
 8003212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003216:	e7e3      	b.n	80031e0 <_printf_i+0x174>
 8003218:	0659      	lsls	r1, r3, #25
 800321a:	bf48      	it	mi
 800321c:	b2b6      	uxthmi	r6, r6
 800321e:	e7e6      	b.n	80031ee <_printf_i+0x182>
 8003220:	4615      	mov	r5, r2
 8003222:	e7bb      	b.n	800319c <_printf_i+0x130>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	6826      	ldr	r6, [r4, #0]
 8003228:	6961      	ldr	r1, [r4, #20]
 800322a:	1d18      	adds	r0, r3, #4
 800322c:	6028      	str	r0, [r5, #0]
 800322e:	0635      	lsls	r5, r6, #24
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	d501      	bpl.n	8003238 <_printf_i+0x1cc>
 8003234:	6019      	str	r1, [r3, #0]
 8003236:	e002      	b.n	800323e <_printf_i+0x1d2>
 8003238:	0670      	lsls	r0, r6, #25
 800323a:	d5fb      	bpl.n	8003234 <_printf_i+0x1c8>
 800323c:	8019      	strh	r1, [r3, #0]
 800323e:	2300      	movs	r3, #0
 8003240:	6123      	str	r3, [r4, #16]
 8003242:	4615      	mov	r5, r2
 8003244:	e7ba      	b.n	80031bc <_printf_i+0x150>
 8003246:	682b      	ldr	r3, [r5, #0]
 8003248:	1d1a      	adds	r2, r3, #4
 800324a:	602a      	str	r2, [r5, #0]
 800324c:	681d      	ldr	r5, [r3, #0]
 800324e:	6862      	ldr	r2, [r4, #4]
 8003250:	2100      	movs	r1, #0
 8003252:	4628      	mov	r0, r5
 8003254:	f7fc ffe4 	bl	8000220 <memchr>
 8003258:	b108      	cbz	r0, 800325e <_printf_i+0x1f2>
 800325a:	1b40      	subs	r0, r0, r5
 800325c:	6060      	str	r0, [r4, #4]
 800325e:	6863      	ldr	r3, [r4, #4]
 8003260:	6123      	str	r3, [r4, #16]
 8003262:	2300      	movs	r3, #0
 8003264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003268:	e7a8      	b.n	80031bc <_printf_i+0x150>
 800326a:	6923      	ldr	r3, [r4, #16]
 800326c:	462a      	mov	r2, r5
 800326e:	4649      	mov	r1, r9
 8003270:	4640      	mov	r0, r8
 8003272:	47d0      	blx	sl
 8003274:	3001      	adds	r0, #1
 8003276:	d0ab      	beq.n	80031d0 <_printf_i+0x164>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	079b      	lsls	r3, r3, #30
 800327c:	d413      	bmi.n	80032a6 <_printf_i+0x23a>
 800327e:	68e0      	ldr	r0, [r4, #12]
 8003280:	9b03      	ldr	r3, [sp, #12]
 8003282:	4298      	cmp	r0, r3
 8003284:	bfb8      	it	lt
 8003286:	4618      	movlt	r0, r3
 8003288:	e7a4      	b.n	80031d4 <_printf_i+0x168>
 800328a:	2301      	movs	r3, #1
 800328c:	4632      	mov	r2, r6
 800328e:	4649      	mov	r1, r9
 8003290:	4640      	mov	r0, r8
 8003292:	47d0      	blx	sl
 8003294:	3001      	adds	r0, #1
 8003296:	d09b      	beq.n	80031d0 <_printf_i+0x164>
 8003298:	3501      	adds	r5, #1
 800329a:	68e3      	ldr	r3, [r4, #12]
 800329c:	9903      	ldr	r1, [sp, #12]
 800329e:	1a5b      	subs	r3, r3, r1
 80032a0:	42ab      	cmp	r3, r5
 80032a2:	dcf2      	bgt.n	800328a <_printf_i+0x21e>
 80032a4:	e7eb      	b.n	800327e <_printf_i+0x212>
 80032a6:	2500      	movs	r5, #0
 80032a8:	f104 0619 	add.w	r6, r4, #25
 80032ac:	e7f5      	b.n	800329a <_printf_i+0x22e>
 80032ae:	bf00      	nop
 80032b0:	08005572 	.word	0x08005572
 80032b4:	08005583 	.word	0x08005583

080032b8 <_sbrk_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4d06      	ldr	r5, [pc, #24]	; (80032d4 <_sbrk_r+0x1c>)
 80032bc:	2300      	movs	r3, #0
 80032be:	4604      	mov	r4, r0
 80032c0:	4608      	mov	r0, r1
 80032c2:	602b      	str	r3, [r5, #0]
 80032c4:	f7ff f95e 	bl	8002584 <_sbrk>
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	d102      	bne.n	80032d2 <_sbrk_r+0x1a>
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	b103      	cbz	r3, 80032d2 <_sbrk_r+0x1a>
 80032d0:	6023      	str	r3, [r4, #0]
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
 80032d4:	20000360 	.word	0x20000360

080032d8 <siprintf>:
 80032d8:	b40e      	push	{r1, r2, r3}
 80032da:	b500      	push	{lr}
 80032dc:	b09c      	sub	sp, #112	; 0x70
 80032de:	ab1d      	add	r3, sp, #116	; 0x74
 80032e0:	9002      	str	r0, [sp, #8]
 80032e2:	9006      	str	r0, [sp, #24]
 80032e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032e8:	4809      	ldr	r0, [pc, #36]	; (8003310 <siprintf+0x38>)
 80032ea:	9107      	str	r1, [sp, #28]
 80032ec:	9104      	str	r1, [sp, #16]
 80032ee:	4909      	ldr	r1, [pc, #36]	; (8003314 <siprintf+0x3c>)
 80032f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80032f4:	9105      	str	r1, [sp, #20]
 80032f6:	6800      	ldr	r0, [r0, #0]
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	a902      	add	r1, sp, #8
 80032fc:	f001 fc2a 	bl	8004b54 <_svfiprintf_r>
 8003300:	9b02      	ldr	r3, [sp, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	b01c      	add	sp, #112	; 0x70
 8003308:	f85d eb04 	ldr.w	lr, [sp], #4
 800330c:	b003      	add	sp, #12
 800330e:	4770      	bx	lr
 8003310:	20000010 	.word	0x20000010
 8003314:	ffff0208 	.word	0xffff0208

08003318 <__sread>:
 8003318:	b510      	push	{r4, lr}
 800331a:	460c      	mov	r4, r1
 800331c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003320:	f001 fd18 	bl	8004d54 <_read_r>
 8003324:	2800      	cmp	r0, #0
 8003326:	bfab      	itete	ge
 8003328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800332a:	89a3      	ldrhlt	r3, [r4, #12]
 800332c:	181b      	addge	r3, r3, r0
 800332e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003332:	bfac      	ite	ge
 8003334:	6563      	strge	r3, [r4, #84]	; 0x54
 8003336:	81a3      	strhlt	r3, [r4, #12]
 8003338:	bd10      	pop	{r4, pc}

0800333a <__swrite>:
 800333a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800333e:	461f      	mov	r7, r3
 8003340:	898b      	ldrh	r3, [r1, #12]
 8003342:	05db      	lsls	r3, r3, #23
 8003344:	4605      	mov	r5, r0
 8003346:	460c      	mov	r4, r1
 8003348:	4616      	mov	r6, r2
 800334a:	d505      	bpl.n	8003358 <__swrite+0x1e>
 800334c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003350:	2302      	movs	r3, #2
 8003352:	2200      	movs	r2, #0
 8003354:	f000 ff88 	bl	8004268 <_lseek_r>
 8003358:	89a3      	ldrh	r3, [r4, #12]
 800335a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800335e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003362:	81a3      	strh	r3, [r4, #12]
 8003364:	4632      	mov	r2, r6
 8003366:	463b      	mov	r3, r7
 8003368:	4628      	mov	r0, r5
 800336a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800336e:	f000 b817 	b.w	80033a0 <_write_r>

08003372 <__sseek>:
 8003372:	b510      	push	{r4, lr}
 8003374:	460c      	mov	r4, r1
 8003376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800337a:	f000 ff75 	bl	8004268 <_lseek_r>
 800337e:	1c43      	adds	r3, r0, #1
 8003380:	89a3      	ldrh	r3, [r4, #12]
 8003382:	bf15      	itete	ne
 8003384:	6560      	strne	r0, [r4, #84]	; 0x54
 8003386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800338a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800338e:	81a3      	strheq	r3, [r4, #12]
 8003390:	bf18      	it	ne
 8003392:	81a3      	strhne	r3, [r4, #12]
 8003394:	bd10      	pop	{r4, pc}

08003396 <__sclose>:
 8003396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800339a:	f000 b813 	b.w	80033c4 <_close_r>
	...

080033a0 <_write_r>:
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4d07      	ldr	r5, [pc, #28]	; (80033c0 <_write_r+0x20>)
 80033a4:	4604      	mov	r4, r0
 80033a6:	4608      	mov	r0, r1
 80033a8:	4611      	mov	r1, r2
 80033aa:	2200      	movs	r2, #0
 80033ac:	602a      	str	r2, [r5, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7ff f88f 	bl	80024d2 <_write>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d102      	bne.n	80033be <_write_r+0x1e>
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	b103      	cbz	r3, 80033be <_write_r+0x1e>
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	20000360 	.word	0x20000360

080033c4 <_close_r>:
 80033c4:	b538      	push	{r3, r4, r5, lr}
 80033c6:	4d06      	ldr	r5, [pc, #24]	; (80033e0 <_close_r+0x1c>)
 80033c8:	2300      	movs	r3, #0
 80033ca:	4604      	mov	r4, r0
 80033cc:	4608      	mov	r0, r1
 80033ce:	602b      	str	r3, [r5, #0]
 80033d0:	f7ff f8b0 	bl	8002534 <_close>
 80033d4:	1c43      	adds	r3, r0, #1
 80033d6:	d102      	bne.n	80033de <_close_r+0x1a>
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	b103      	cbz	r3, 80033de <_close_r+0x1a>
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	bd38      	pop	{r3, r4, r5, pc}
 80033e0:	20000360 	.word	0x20000360

080033e4 <quorem>:
 80033e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e8:	6903      	ldr	r3, [r0, #16]
 80033ea:	690c      	ldr	r4, [r1, #16]
 80033ec:	42a3      	cmp	r3, r4
 80033ee:	4607      	mov	r7, r0
 80033f0:	f2c0 8081 	blt.w	80034f6 <quorem+0x112>
 80033f4:	3c01      	subs	r4, #1
 80033f6:	f101 0814 	add.w	r8, r1, #20
 80033fa:	f100 0514 	add.w	r5, r0, #20
 80033fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003408:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800340c:	3301      	adds	r3, #1
 800340e:	429a      	cmp	r2, r3
 8003410:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003414:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003418:	fbb2 f6f3 	udiv	r6, r2, r3
 800341c:	d331      	bcc.n	8003482 <quorem+0x9e>
 800341e:	f04f 0e00 	mov.w	lr, #0
 8003422:	4640      	mov	r0, r8
 8003424:	46ac      	mov	ip, r5
 8003426:	46f2      	mov	sl, lr
 8003428:	f850 2b04 	ldr.w	r2, [r0], #4
 800342c:	b293      	uxth	r3, r2
 800342e:	fb06 e303 	mla	r3, r6, r3, lr
 8003432:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003436:	b29b      	uxth	r3, r3
 8003438:	ebaa 0303 	sub.w	r3, sl, r3
 800343c:	f8dc a000 	ldr.w	sl, [ip]
 8003440:	0c12      	lsrs	r2, r2, #16
 8003442:	fa13 f38a 	uxtah	r3, r3, sl
 8003446:	fb06 e202 	mla	r2, r6, r2, lr
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	9b00      	ldr	r3, [sp, #0]
 800344e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003452:	b292      	uxth	r2, r2
 8003454:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800345c:	f8bd 3000 	ldrh.w	r3, [sp]
 8003460:	4581      	cmp	r9, r0
 8003462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003466:	f84c 3b04 	str.w	r3, [ip], #4
 800346a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800346e:	d2db      	bcs.n	8003428 <quorem+0x44>
 8003470:	f855 300b 	ldr.w	r3, [r5, fp]
 8003474:	b92b      	cbnz	r3, 8003482 <quorem+0x9e>
 8003476:	9b01      	ldr	r3, [sp, #4]
 8003478:	3b04      	subs	r3, #4
 800347a:	429d      	cmp	r5, r3
 800347c:	461a      	mov	r2, r3
 800347e:	d32e      	bcc.n	80034de <quorem+0xfa>
 8003480:	613c      	str	r4, [r7, #16]
 8003482:	4638      	mov	r0, r7
 8003484:	f001 f9a6 	bl	80047d4 <__mcmp>
 8003488:	2800      	cmp	r0, #0
 800348a:	db24      	blt.n	80034d6 <quorem+0xf2>
 800348c:	3601      	adds	r6, #1
 800348e:	4628      	mov	r0, r5
 8003490:	f04f 0c00 	mov.w	ip, #0
 8003494:	f858 2b04 	ldr.w	r2, [r8], #4
 8003498:	f8d0 e000 	ldr.w	lr, [r0]
 800349c:	b293      	uxth	r3, r2
 800349e:	ebac 0303 	sub.w	r3, ip, r3
 80034a2:	0c12      	lsrs	r2, r2, #16
 80034a4:	fa13 f38e 	uxtah	r3, r3, lr
 80034a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80034ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034b6:	45c1      	cmp	r9, r8
 80034b8:	f840 3b04 	str.w	r3, [r0], #4
 80034bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80034c0:	d2e8      	bcs.n	8003494 <quorem+0xb0>
 80034c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80034c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80034ca:	b922      	cbnz	r2, 80034d6 <quorem+0xf2>
 80034cc:	3b04      	subs	r3, #4
 80034ce:	429d      	cmp	r5, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	d30a      	bcc.n	80034ea <quorem+0x106>
 80034d4:	613c      	str	r4, [r7, #16]
 80034d6:	4630      	mov	r0, r6
 80034d8:	b003      	add	sp, #12
 80034da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	3b04      	subs	r3, #4
 80034e2:	2a00      	cmp	r2, #0
 80034e4:	d1cc      	bne.n	8003480 <quorem+0x9c>
 80034e6:	3c01      	subs	r4, #1
 80034e8:	e7c7      	b.n	800347a <quorem+0x96>
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	3b04      	subs	r3, #4
 80034ee:	2a00      	cmp	r2, #0
 80034f0:	d1f0      	bne.n	80034d4 <quorem+0xf0>
 80034f2:	3c01      	subs	r4, #1
 80034f4:	e7eb      	b.n	80034ce <quorem+0xea>
 80034f6:	2000      	movs	r0, #0
 80034f8:	e7ee      	b.n	80034d8 <quorem+0xf4>
 80034fa:	0000      	movs	r0, r0
 80034fc:	0000      	movs	r0, r0
	...

08003500 <_dtoa_r>:
 8003500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003504:	ed2d 8b04 	vpush	{d8-d9}
 8003508:	ec57 6b10 	vmov	r6, r7, d0
 800350c:	b093      	sub	sp, #76	; 0x4c
 800350e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003510:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003514:	9106      	str	r1, [sp, #24]
 8003516:	ee10 aa10 	vmov	sl, s0
 800351a:	4604      	mov	r4, r0
 800351c:	9209      	str	r2, [sp, #36]	; 0x24
 800351e:	930c      	str	r3, [sp, #48]	; 0x30
 8003520:	46bb      	mov	fp, r7
 8003522:	b975      	cbnz	r5, 8003542 <_dtoa_r+0x42>
 8003524:	2010      	movs	r0, #16
 8003526:	f000 feb1 	bl	800428c <malloc>
 800352a:	4602      	mov	r2, r0
 800352c:	6260      	str	r0, [r4, #36]	; 0x24
 800352e:	b920      	cbnz	r0, 800353a <_dtoa_r+0x3a>
 8003530:	4ba7      	ldr	r3, [pc, #668]	; (80037d0 <_dtoa_r+0x2d0>)
 8003532:	21ea      	movs	r1, #234	; 0xea
 8003534:	48a7      	ldr	r0, [pc, #668]	; (80037d4 <_dtoa_r+0x2d4>)
 8003536:	f001 fc1f 	bl	8004d78 <__assert_func>
 800353a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800353e:	6005      	str	r5, [r0, #0]
 8003540:	60c5      	str	r5, [r0, #12]
 8003542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	b151      	cbz	r1, 800355e <_dtoa_r+0x5e>
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	604a      	str	r2, [r1, #4]
 800354c:	2301      	movs	r3, #1
 800354e:	4093      	lsls	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
 8003552:	4620      	mov	r0, r4
 8003554:	f000 fefc 	bl	8004350 <_Bfree>
 8003558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	1e3b      	subs	r3, r7, #0
 8003560:	bfaa      	itet	ge
 8003562:	2300      	movge	r3, #0
 8003564:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003568:	f8c8 3000 	strge.w	r3, [r8]
 800356c:	4b9a      	ldr	r3, [pc, #616]	; (80037d8 <_dtoa_r+0x2d8>)
 800356e:	bfbc      	itt	lt
 8003570:	2201      	movlt	r2, #1
 8003572:	f8c8 2000 	strlt.w	r2, [r8]
 8003576:	ea33 030b 	bics.w	r3, r3, fp
 800357a:	d11b      	bne.n	80035b4 <_dtoa_r+0xb4>
 800357c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800357e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003588:	4333      	orrs	r3, r6
 800358a:	f000 8592 	beq.w	80040b2 <_dtoa_r+0xbb2>
 800358e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003590:	b963      	cbnz	r3, 80035ac <_dtoa_r+0xac>
 8003592:	4b92      	ldr	r3, [pc, #584]	; (80037dc <_dtoa_r+0x2dc>)
 8003594:	e022      	b.n	80035dc <_dtoa_r+0xdc>
 8003596:	4b92      	ldr	r3, [pc, #584]	; (80037e0 <_dtoa_r+0x2e0>)
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	3308      	adds	r3, #8
 800359c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	9801      	ldr	r0, [sp, #4]
 80035a2:	b013      	add	sp, #76	; 0x4c
 80035a4:	ecbd 8b04 	vpop	{d8-d9}
 80035a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ac:	4b8b      	ldr	r3, [pc, #556]	; (80037dc <_dtoa_r+0x2dc>)
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	3303      	adds	r3, #3
 80035b2:	e7f3      	b.n	800359c <_dtoa_r+0x9c>
 80035b4:	2200      	movs	r2, #0
 80035b6:	2300      	movs	r3, #0
 80035b8:	4650      	mov	r0, sl
 80035ba:	4659      	mov	r1, fp
 80035bc:	f7fd faa4 	bl	8000b08 <__aeabi_dcmpeq>
 80035c0:	ec4b ab19 	vmov	d9, sl, fp
 80035c4:	4680      	mov	r8, r0
 80035c6:	b158      	cbz	r0, 80035e0 <_dtoa_r+0xe0>
 80035c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035ca:	2301      	movs	r3, #1
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 856b 	beq.w	80040ac <_dtoa_r+0xbac>
 80035d6:	4883      	ldr	r0, [pc, #524]	; (80037e4 <_dtoa_r+0x2e4>)
 80035d8:	6018      	str	r0, [r3, #0]
 80035da:	1e43      	subs	r3, r0, #1
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	e7df      	b.n	80035a0 <_dtoa_r+0xa0>
 80035e0:	ec4b ab10 	vmov	d0, sl, fp
 80035e4:	aa10      	add	r2, sp, #64	; 0x40
 80035e6:	a911      	add	r1, sp, #68	; 0x44
 80035e8:	4620      	mov	r0, r4
 80035ea:	f001 f999 	bl	8004920 <__d2b>
 80035ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80035f2:	ee08 0a10 	vmov	s16, r0
 80035f6:	2d00      	cmp	r5, #0
 80035f8:	f000 8084 	beq.w	8003704 <_dtoa_r+0x204>
 80035fc:	ee19 3a90 	vmov	r3, s19
 8003600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003604:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003608:	4656      	mov	r6, sl
 800360a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800360e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003612:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003616:	4b74      	ldr	r3, [pc, #464]	; (80037e8 <_dtoa_r+0x2e8>)
 8003618:	2200      	movs	r2, #0
 800361a:	4630      	mov	r0, r6
 800361c:	4639      	mov	r1, r7
 800361e:	f7fc fe53 	bl	80002c8 <__aeabi_dsub>
 8003622:	a365      	add	r3, pc, #404	; (adr r3, 80037b8 <_dtoa_r+0x2b8>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f7fd f806 	bl	8000638 <__aeabi_dmul>
 800362c:	a364      	add	r3, pc, #400	; (adr r3, 80037c0 <_dtoa_r+0x2c0>)
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f7fc fe4b 	bl	80002cc <__adddf3>
 8003636:	4606      	mov	r6, r0
 8003638:	4628      	mov	r0, r5
 800363a:	460f      	mov	r7, r1
 800363c:	f7fc ff92 	bl	8000564 <__aeabi_i2d>
 8003640:	a361      	add	r3, pc, #388	; (adr r3, 80037c8 <_dtoa_r+0x2c8>)
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f7fc fff7 	bl	8000638 <__aeabi_dmul>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4630      	mov	r0, r6
 8003650:	4639      	mov	r1, r7
 8003652:	f7fc fe3b 	bl	80002cc <__adddf3>
 8003656:	4606      	mov	r6, r0
 8003658:	460f      	mov	r7, r1
 800365a:	f7fd fa9d 	bl	8000b98 <__aeabi_d2iz>
 800365e:	2200      	movs	r2, #0
 8003660:	9000      	str	r0, [sp, #0]
 8003662:	2300      	movs	r3, #0
 8003664:	4630      	mov	r0, r6
 8003666:	4639      	mov	r1, r7
 8003668:	f7fd fa58 	bl	8000b1c <__aeabi_dcmplt>
 800366c:	b150      	cbz	r0, 8003684 <_dtoa_r+0x184>
 800366e:	9800      	ldr	r0, [sp, #0]
 8003670:	f7fc ff78 	bl	8000564 <__aeabi_i2d>
 8003674:	4632      	mov	r2, r6
 8003676:	463b      	mov	r3, r7
 8003678:	f7fd fa46 	bl	8000b08 <__aeabi_dcmpeq>
 800367c:	b910      	cbnz	r0, 8003684 <_dtoa_r+0x184>
 800367e:	9b00      	ldr	r3, [sp, #0]
 8003680:	3b01      	subs	r3, #1
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	9b00      	ldr	r3, [sp, #0]
 8003686:	2b16      	cmp	r3, #22
 8003688:	d85a      	bhi.n	8003740 <_dtoa_r+0x240>
 800368a:	9a00      	ldr	r2, [sp, #0]
 800368c:	4b57      	ldr	r3, [pc, #348]	; (80037ec <_dtoa_r+0x2ec>)
 800368e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	ec51 0b19 	vmov	r0, r1, d9
 800369a:	f7fd fa3f 	bl	8000b1c <__aeabi_dcmplt>
 800369e:	2800      	cmp	r0, #0
 80036a0:	d050      	beq.n	8003744 <_dtoa_r+0x244>
 80036a2:	9b00      	ldr	r3, [sp, #0]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2300      	movs	r3, #0
 80036aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80036ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036ae:	1b5d      	subs	r5, r3, r5
 80036b0:	1e6b      	subs	r3, r5, #1
 80036b2:	9305      	str	r3, [sp, #20]
 80036b4:	bf45      	ittet	mi
 80036b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80036ba:	9304      	strmi	r3, [sp, #16]
 80036bc:	2300      	movpl	r3, #0
 80036be:	2300      	movmi	r3, #0
 80036c0:	bf4c      	ite	mi
 80036c2:	9305      	strmi	r3, [sp, #20]
 80036c4:	9304      	strpl	r3, [sp, #16]
 80036c6:	9b00      	ldr	r3, [sp, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db3d      	blt.n	8003748 <_dtoa_r+0x248>
 80036cc:	9b05      	ldr	r3, [sp, #20]
 80036ce:	9a00      	ldr	r2, [sp, #0]
 80036d0:	920a      	str	r2, [sp, #40]	; 0x28
 80036d2:	4413      	add	r3, r2
 80036d4:	9305      	str	r3, [sp, #20]
 80036d6:	2300      	movs	r3, #0
 80036d8:	9307      	str	r3, [sp, #28]
 80036da:	9b06      	ldr	r3, [sp, #24]
 80036dc:	2b09      	cmp	r3, #9
 80036de:	f200 8089 	bhi.w	80037f4 <_dtoa_r+0x2f4>
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	bfc4      	itt	gt
 80036e6:	3b04      	subgt	r3, #4
 80036e8:	9306      	strgt	r3, [sp, #24]
 80036ea:	9b06      	ldr	r3, [sp, #24]
 80036ec:	f1a3 0302 	sub.w	r3, r3, #2
 80036f0:	bfcc      	ite	gt
 80036f2:	2500      	movgt	r5, #0
 80036f4:	2501      	movle	r5, #1
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	f200 8087 	bhi.w	800380a <_dtoa_r+0x30a>
 80036fc:	e8df f003 	tbb	[pc, r3]
 8003700:	59383a2d 	.word	0x59383a2d
 8003704:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003708:	441d      	add	r5, r3
 800370a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800370e:	2b20      	cmp	r3, #32
 8003710:	bfc1      	itttt	gt
 8003712:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003716:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800371a:	fa0b f303 	lslgt.w	r3, fp, r3
 800371e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003722:	bfda      	itte	le
 8003724:	f1c3 0320 	rsble	r3, r3, #32
 8003728:	fa06 f003 	lslle.w	r0, r6, r3
 800372c:	4318      	orrgt	r0, r3
 800372e:	f7fc ff09 	bl	8000544 <__aeabi_ui2d>
 8003732:	2301      	movs	r3, #1
 8003734:	4606      	mov	r6, r0
 8003736:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800373a:	3d01      	subs	r5, #1
 800373c:	930e      	str	r3, [sp, #56]	; 0x38
 800373e:	e76a      	b.n	8003616 <_dtoa_r+0x116>
 8003740:	2301      	movs	r3, #1
 8003742:	e7b2      	b.n	80036aa <_dtoa_r+0x1aa>
 8003744:	900b      	str	r0, [sp, #44]	; 0x2c
 8003746:	e7b1      	b.n	80036ac <_dtoa_r+0x1ac>
 8003748:	9b04      	ldr	r3, [sp, #16]
 800374a:	9a00      	ldr	r2, [sp, #0]
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	9304      	str	r3, [sp, #16]
 8003750:	4253      	negs	r3, r2
 8003752:	9307      	str	r3, [sp, #28]
 8003754:	2300      	movs	r3, #0
 8003756:	930a      	str	r3, [sp, #40]	; 0x28
 8003758:	e7bf      	b.n	80036da <_dtoa_r+0x1da>
 800375a:	2300      	movs	r3, #0
 800375c:	9308      	str	r3, [sp, #32]
 800375e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003760:	2b00      	cmp	r3, #0
 8003762:	dc55      	bgt.n	8003810 <_dtoa_r+0x310>
 8003764:	2301      	movs	r3, #1
 8003766:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800376a:	461a      	mov	r2, r3
 800376c:	9209      	str	r2, [sp, #36]	; 0x24
 800376e:	e00c      	b.n	800378a <_dtoa_r+0x28a>
 8003770:	2301      	movs	r3, #1
 8003772:	e7f3      	b.n	800375c <_dtoa_r+0x25c>
 8003774:	2300      	movs	r3, #0
 8003776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003778:	9308      	str	r3, [sp, #32]
 800377a:	9b00      	ldr	r3, [sp, #0]
 800377c:	4413      	add	r3, r2
 800377e:	9302      	str	r3, [sp, #8]
 8003780:	3301      	adds	r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	9303      	str	r3, [sp, #12]
 8003786:	bfb8      	it	lt
 8003788:	2301      	movlt	r3, #1
 800378a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800378c:	2200      	movs	r2, #0
 800378e:	6042      	str	r2, [r0, #4]
 8003790:	2204      	movs	r2, #4
 8003792:	f102 0614 	add.w	r6, r2, #20
 8003796:	429e      	cmp	r6, r3
 8003798:	6841      	ldr	r1, [r0, #4]
 800379a:	d93d      	bls.n	8003818 <_dtoa_r+0x318>
 800379c:	4620      	mov	r0, r4
 800379e:	f000 fd97 	bl	80042d0 <_Balloc>
 80037a2:	9001      	str	r0, [sp, #4]
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d13b      	bne.n	8003820 <_dtoa_r+0x320>
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <_dtoa_r+0x2f0>)
 80037aa:	4602      	mov	r2, r0
 80037ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80037b0:	e6c0      	b.n	8003534 <_dtoa_r+0x34>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e7df      	b.n	8003776 <_dtoa_r+0x276>
 80037b6:	bf00      	nop
 80037b8:	636f4361 	.word	0x636f4361
 80037bc:	3fd287a7 	.word	0x3fd287a7
 80037c0:	8b60c8b3 	.word	0x8b60c8b3
 80037c4:	3fc68a28 	.word	0x3fc68a28
 80037c8:	509f79fb 	.word	0x509f79fb
 80037cc:	3fd34413 	.word	0x3fd34413
 80037d0:	080055a1 	.word	0x080055a1
 80037d4:	080055b8 	.word	0x080055b8
 80037d8:	7ff00000 	.word	0x7ff00000
 80037dc:	0800559d 	.word	0x0800559d
 80037e0:	08005594 	.word	0x08005594
 80037e4:	08005571 	.word	0x08005571
 80037e8:	3ff80000 	.word	0x3ff80000
 80037ec:	080056a8 	.word	0x080056a8
 80037f0:	08005613 	.word	0x08005613
 80037f4:	2501      	movs	r5, #1
 80037f6:	2300      	movs	r3, #0
 80037f8:	9306      	str	r3, [sp, #24]
 80037fa:	9508      	str	r5, [sp, #32]
 80037fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003800:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003804:	2200      	movs	r2, #0
 8003806:	2312      	movs	r3, #18
 8003808:	e7b0      	b.n	800376c <_dtoa_r+0x26c>
 800380a:	2301      	movs	r3, #1
 800380c:	9308      	str	r3, [sp, #32]
 800380e:	e7f5      	b.n	80037fc <_dtoa_r+0x2fc>
 8003810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003812:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003816:	e7b8      	b.n	800378a <_dtoa_r+0x28a>
 8003818:	3101      	adds	r1, #1
 800381a:	6041      	str	r1, [r0, #4]
 800381c:	0052      	lsls	r2, r2, #1
 800381e:	e7b8      	b.n	8003792 <_dtoa_r+0x292>
 8003820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003822:	9a01      	ldr	r2, [sp, #4]
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	9b03      	ldr	r3, [sp, #12]
 8003828:	2b0e      	cmp	r3, #14
 800382a:	f200 809d 	bhi.w	8003968 <_dtoa_r+0x468>
 800382e:	2d00      	cmp	r5, #0
 8003830:	f000 809a 	beq.w	8003968 <_dtoa_r+0x468>
 8003834:	9b00      	ldr	r3, [sp, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	dd32      	ble.n	80038a0 <_dtoa_r+0x3a0>
 800383a:	4ab7      	ldr	r2, [pc, #732]	; (8003b18 <_dtoa_r+0x618>)
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003844:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003848:	9b00      	ldr	r3, [sp, #0]
 800384a:	05d8      	lsls	r0, r3, #23
 800384c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003850:	d516      	bpl.n	8003880 <_dtoa_r+0x380>
 8003852:	4bb2      	ldr	r3, [pc, #712]	; (8003b1c <_dtoa_r+0x61c>)
 8003854:	ec51 0b19 	vmov	r0, r1, d9
 8003858:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800385c:	f7fd f816 	bl	800088c <__aeabi_ddiv>
 8003860:	f007 070f 	and.w	r7, r7, #15
 8003864:	4682      	mov	sl, r0
 8003866:	468b      	mov	fp, r1
 8003868:	2503      	movs	r5, #3
 800386a:	4eac      	ldr	r6, [pc, #688]	; (8003b1c <_dtoa_r+0x61c>)
 800386c:	b957      	cbnz	r7, 8003884 <_dtoa_r+0x384>
 800386e:	4642      	mov	r2, r8
 8003870:	464b      	mov	r3, r9
 8003872:	4650      	mov	r0, sl
 8003874:	4659      	mov	r1, fp
 8003876:	f7fd f809 	bl	800088c <__aeabi_ddiv>
 800387a:	4682      	mov	sl, r0
 800387c:	468b      	mov	fp, r1
 800387e:	e028      	b.n	80038d2 <_dtoa_r+0x3d2>
 8003880:	2502      	movs	r5, #2
 8003882:	e7f2      	b.n	800386a <_dtoa_r+0x36a>
 8003884:	07f9      	lsls	r1, r7, #31
 8003886:	d508      	bpl.n	800389a <_dtoa_r+0x39a>
 8003888:	4640      	mov	r0, r8
 800388a:	4649      	mov	r1, r9
 800388c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003890:	f7fc fed2 	bl	8000638 <__aeabi_dmul>
 8003894:	3501      	adds	r5, #1
 8003896:	4680      	mov	r8, r0
 8003898:	4689      	mov	r9, r1
 800389a:	107f      	asrs	r7, r7, #1
 800389c:	3608      	adds	r6, #8
 800389e:	e7e5      	b.n	800386c <_dtoa_r+0x36c>
 80038a0:	f000 809b 	beq.w	80039da <_dtoa_r+0x4da>
 80038a4:	9b00      	ldr	r3, [sp, #0]
 80038a6:	4f9d      	ldr	r7, [pc, #628]	; (8003b1c <_dtoa_r+0x61c>)
 80038a8:	425e      	negs	r6, r3
 80038aa:	4b9b      	ldr	r3, [pc, #620]	; (8003b18 <_dtoa_r+0x618>)
 80038ac:	f006 020f 	and.w	r2, r6, #15
 80038b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	ec51 0b19 	vmov	r0, r1, d9
 80038bc:	f7fc febc 	bl	8000638 <__aeabi_dmul>
 80038c0:	1136      	asrs	r6, r6, #4
 80038c2:	4682      	mov	sl, r0
 80038c4:	468b      	mov	fp, r1
 80038c6:	2300      	movs	r3, #0
 80038c8:	2502      	movs	r5, #2
 80038ca:	2e00      	cmp	r6, #0
 80038cc:	d17a      	bne.n	80039c4 <_dtoa_r+0x4c4>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1d3      	bne.n	800387a <_dtoa_r+0x37a>
 80038d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8082 	beq.w	80039de <_dtoa_r+0x4de>
 80038da:	4b91      	ldr	r3, [pc, #580]	; (8003b20 <_dtoa_r+0x620>)
 80038dc:	2200      	movs	r2, #0
 80038de:	4650      	mov	r0, sl
 80038e0:	4659      	mov	r1, fp
 80038e2:	f7fd f91b 	bl	8000b1c <__aeabi_dcmplt>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d079      	beq.n	80039de <_dtoa_r+0x4de>
 80038ea:	9b03      	ldr	r3, [sp, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d076      	beq.n	80039de <_dtoa_r+0x4de>
 80038f0:	9b02      	ldr	r3, [sp, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	dd36      	ble.n	8003964 <_dtoa_r+0x464>
 80038f6:	9b00      	ldr	r3, [sp, #0]
 80038f8:	4650      	mov	r0, sl
 80038fa:	4659      	mov	r1, fp
 80038fc:	1e5f      	subs	r7, r3, #1
 80038fe:	2200      	movs	r2, #0
 8003900:	4b88      	ldr	r3, [pc, #544]	; (8003b24 <_dtoa_r+0x624>)
 8003902:	f7fc fe99 	bl	8000638 <__aeabi_dmul>
 8003906:	9e02      	ldr	r6, [sp, #8]
 8003908:	4682      	mov	sl, r0
 800390a:	468b      	mov	fp, r1
 800390c:	3501      	adds	r5, #1
 800390e:	4628      	mov	r0, r5
 8003910:	f7fc fe28 	bl	8000564 <__aeabi_i2d>
 8003914:	4652      	mov	r2, sl
 8003916:	465b      	mov	r3, fp
 8003918:	f7fc fe8e 	bl	8000638 <__aeabi_dmul>
 800391c:	4b82      	ldr	r3, [pc, #520]	; (8003b28 <_dtoa_r+0x628>)
 800391e:	2200      	movs	r2, #0
 8003920:	f7fc fcd4 	bl	80002cc <__adddf3>
 8003924:	46d0      	mov	r8, sl
 8003926:	46d9      	mov	r9, fp
 8003928:	4682      	mov	sl, r0
 800392a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800392e:	2e00      	cmp	r6, #0
 8003930:	d158      	bne.n	80039e4 <_dtoa_r+0x4e4>
 8003932:	4b7e      	ldr	r3, [pc, #504]	; (8003b2c <_dtoa_r+0x62c>)
 8003934:	2200      	movs	r2, #0
 8003936:	4640      	mov	r0, r8
 8003938:	4649      	mov	r1, r9
 800393a:	f7fc fcc5 	bl	80002c8 <__aeabi_dsub>
 800393e:	4652      	mov	r2, sl
 8003940:	465b      	mov	r3, fp
 8003942:	4680      	mov	r8, r0
 8003944:	4689      	mov	r9, r1
 8003946:	f7fd f907 	bl	8000b58 <__aeabi_dcmpgt>
 800394a:	2800      	cmp	r0, #0
 800394c:	f040 8295 	bne.w	8003e7a <_dtoa_r+0x97a>
 8003950:	4652      	mov	r2, sl
 8003952:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003956:	4640      	mov	r0, r8
 8003958:	4649      	mov	r1, r9
 800395a:	f7fd f8df 	bl	8000b1c <__aeabi_dcmplt>
 800395e:	2800      	cmp	r0, #0
 8003960:	f040 8289 	bne.w	8003e76 <_dtoa_r+0x976>
 8003964:	ec5b ab19 	vmov	sl, fp, d9
 8003968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800396a:	2b00      	cmp	r3, #0
 800396c:	f2c0 8148 	blt.w	8003c00 <_dtoa_r+0x700>
 8003970:	9a00      	ldr	r2, [sp, #0]
 8003972:	2a0e      	cmp	r2, #14
 8003974:	f300 8144 	bgt.w	8003c00 <_dtoa_r+0x700>
 8003978:	4b67      	ldr	r3, [pc, #412]	; (8003b18 <_dtoa_r+0x618>)
 800397a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800397e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	f280 80d5 	bge.w	8003b34 <_dtoa_r+0x634>
 800398a:	9b03      	ldr	r3, [sp, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f300 80d1 	bgt.w	8003b34 <_dtoa_r+0x634>
 8003992:	f040 826f 	bne.w	8003e74 <_dtoa_r+0x974>
 8003996:	4b65      	ldr	r3, [pc, #404]	; (8003b2c <_dtoa_r+0x62c>)
 8003998:	2200      	movs	r2, #0
 800399a:	4640      	mov	r0, r8
 800399c:	4649      	mov	r1, r9
 800399e:	f7fc fe4b 	bl	8000638 <__aeabi_dmul>
 80039a2:	4652      	mov	r2, sl
 80039a4:	465b      	mov	r3, fp
 80039a6:	f7fd f8cd 	bl	8000b44 <__aeabi_dcmpge>
 80039aa:	9e03      	ldr	r6, [sp, #12]
 80039ac:	4637      	mov	r7, r6
 80039ae:	2800      	cmp	r0, #0
 80039b0:	f040 8245 	bne.w	8003e3e <_dtoa_r+0x93e>
 80039b4:	9d01      	ldr	r5, [sp, #4]
 80039b6:	2331      	movs	r3, #49	; 0x31
 80039b8:	f805 3b01 	strb.w	r3, [r5], #1
 80039bc:	9b00      	ldr	r3, [sp, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	e240      	b.n	8003e46 <_dtoa_r+0x946>
 80039c4:	07f2      	lsls	r2, r6, #31
 80039c6:	d505      	bpl.n	80039d4 <_dtoa_r+0x4d4>
 80039c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039cc:	f7fc fe34 	bl	8000638 <__aeabi_dmul>
 80039d0:	3501      	adds	r5, #1
 80039d2:	2301      	movs	r3, #1
 80039d4:	1076      	asrs	r6, r6, #1
 80039d6:	3708      	adds	r7, #8
 80039d8:	e777      	b.n	80038ca <_dtoa_r+0x3ca>
 80039da:	2502      	movs	r5, #2
 80039dc:	e779      	b.n	80038d2 <_dtoa_r+0x3d2>
 80039de:	9f00      	ldr	r7, [sp, #0]
 80039e0:	9e03      	ldr	r6, [sp, #12]
 80039e2:	e794      	b.n	800390e <_dtoa_r+0x40e>
 80039e4:	9901      	ldr	r1, [sp, #4]
 80039e6:	4b4c      	ldr	r3, [pc, #304]	; (8003b18 <_dtoa_r+0x618>)
 80039e8:	4431      	add	r1, r6
 80039ea:	910d      	str	r1, [sp, #52]	; 0x34
 80039ec:	9908      	ldr	r1, [sp, #32]
 80039ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80039f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80039f6:	2900      	cmp	r1, #0
 80039f8:	d043      	beq.n	8003a82 <_dtoa_r+0x582>
 80039fa:	494d      	ldr	r1, [pc, #308]	; (8003b30 <_dtoa_r+0x630>)
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7fc ff45 	bl	800088c <__aeabi_ddiv>
 8003a02:	4652      	mov	r2, sl
 8003a04:	465b      	mov	r3, fp
 8003a06:	f7fc fc5f 	bl	80002c8 <__aeabi_dsub>
 8003a0a:	9d01      	ldr	r5, [sp, #4]
 8003a0c:	4682      	mov	sl, r0
 8003a0e:	468b      	mov	fp, r1
 8003a10:	4649      	mov	r1, r9
 8003a12:	4640      	mov	r0, r8
 8003a14:	f7fd f8c0 	bl	8000b98 <__aeabi_d2iz>
 8003a18:	4606      	mov	r6, r0
 8003a1a:	f7fc fda3 	bl	8000564 <__aeabi_i2d>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4640      	mov	r0, r8
 8003a24:	4649      	mov	r1, r9
 8003a26:	f7fc fc4f 	bl	80002c8 <__aeabi_dsub>
 8003a2a:	3630      	adds	r6, #48	; 0x30
 8003a2c:	f805 6b01 	strb.w	r6, [r5], #1
 8003a30:	4652      	mov	r2, sl
 8003a32:	465b      	mov	r3, fp
 8003a34:	4680      	mov	r8, r0
 8003a36:	4689      	mov	r9, r1
 8003a38:	f7fd f870 	bl	8000b1c <__aeabi_dcmplt>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d163      	bne.n	8003b08 <_dtoa_r+0x608>
 8003a40:	4642      	mov	r2, r8
 8003a42:	464b      	mov	r3, r9
 8003a44:	4936      	ldr	r1, [pc, #216]	; (8003b20 <_dtoa_r+0x620>)
 8003a46:	2000      	movs	r0, #0
 8003a48:	f7fc fc3e 	bl	80002c8 <__aeabi_dsub>
 8003a4c:	4652      	mov	r2, sl
 8003a4e:	465b      	mov	r3, fp
 8003a50:	f7fd f864 	bl	8000b1c <__aeabi_dcmplt>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	f040 80b5 	bne.w	8003bc4 <_dtoa_r+0x6c4>
 8003a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a5c:	429d      	cmp	r5, r3
 8003a5e:	d081      	beq.n	8003964 <_dtoa_r+0x464>
 8003a60:	4b30      	ldr	r3, [pc, #192]	; (8003b24 <_dtoa_r+0x624>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	4650      	mov	r0, sl
 8003a66:	4659      	mov	r1, fp
 8003a68:	f7fc fde6 	bl	8000638 <__aeabi_dmul>
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <_dtoa_r+0x624>)
 8003a6e:	4682      	mov	sl, r0
 8003a70:	468b      	mov	fp, r1
 8003a72:	4640      	mov	r0, r8
 8003a74:	4649      	mov	r1, r9
 8003a76:	2200      	movs	r2, #0
 8003a78:	f7fc fdde 	bl	8000638 <__aeabi_dmul>
 8003a7c:	4680      	mov	r8, r0
 8003a7e:	4689      	mov	r9, r1
 8003a80:	e7c6      	b.n	8003a10 <_dtoa_r+0x510>
 8003a82:	4650      	mov	r0, sl
 8003a84:	4659      	mov	r1, fp
 8003a86:	f7fc fdd7 	bl	8000638 <__aeabi_dmul>
 8003a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a8c:	9d01      	ldr	r5, [sp, #4]
 8003a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a90:	4682      	mov	sl, r0
 8003a92:	468b      	mov	fp, r1
 8003a94:	4649      	mov	r1, r9
 8003a96:	4640      	mov	r0, r8
 8003a98:	f7fd f87e 	bl	8000b98 <__aeabi_d2iz>
 8003a9c:	4606      	mov	r6, r0
 8003a9e:	f7fc fd61 	bl	8000564 <__aeabi_i2d>
 8003aa2:	3630      	adds	r6, #48	; 0x30
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4640      	mov	r0, r8
 8003aaa:	4649      	mov	r1, r9
 8003aac:	f7fc fc0c 	bl	80002c8 <__aeabi_dsub>
 8003ab0:	f805 6b01 	strb.w	r6, [r5], #1
 8003ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ab6:	429d      	cmp	r5, r3
 8003ab8:	4680      	mov	r8, r0
 8003aba:	4689      	mov	r9, r1
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	d124      	bne.n	8003b0c <_dtoa_r+0x60c>
 8003ac2:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <_dtoa_r+0x630>)
 8003ac4:	4650      	mov	r0, sl
 8003ac6:	4659      	mov	r1, fp
 8003ac8:	f7fc fc00 	bl	80002cc <__adddf3>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4640      	mov	r0, r8
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	f7fd f840 	bl	8000b58 <__aeabi_dcmpgt>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	d173      	bne.n	8003bc4 <_dtoa_r+0x6c4>
 8003adc:	4652      	mov	r2, sl
 8003ade:	465b      	mov	r3, fp
 8003ae0:	4913      	ldr	r1, [pc, #76]	; (8003b30 <_dtoa_r+0x630>)
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f7fc fbf0 	bl	80002c8 <__aeabi_dsub>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4640      	mov	r0, r8
 8003aee:	4649      	mov	r1, r9
 8003af0:	f7fd f814 	bl	8000b1c <__aeabi_dcmplt>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	f43f af35 	beq.w	8003964 <_dtoa_r+0x464>
 8003afa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003afc:	1e6b      	subs	r3, r5, #1
 8003afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003b04:	2b30      	cmp	r3, #48	; 0x30
 8003b06:	d0f8      	beq.n	8003afa <_dtoa_r+0x5fa>
 8003b08:	9700      	str	r7, [sp, #0]
 8003b0a:	e049      	b.n	8003ba0 <_dtoa_r+0x6a0>
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <_dtoa_r+0x624>)
 8003b0e:	f7fc fd93 	bl	8000638 <__aeabi_dmul>
 8003b12:	4680      	mov	r8, r0
 8003b14:	4689      	mov	r9, r1
 8003b16:	e7bd      	b.n	8003a94 <_dtoa_r+0x594>
 8003b18:	080056a8 	.word	0x080056a8
 8003b1c:	08005680 	.word	0x08005680
 8003b20:	3ff00000 	.word	0x3ff00000
 8003b24:	40240000 	.word	0x40240000
 8003b28:	401c0000 	.word	0x401c0000
 8003b2c:	40140000 	.word	0x40140000
 8003b30:	3fe00000 	.word	0x3fe00000
 8003b34:	9d01      	ldr	r5, [sp, #4]
 8003b36:	4656      	mov	r6, sl
 8003b38:	465f      	mov	r7, fp
 8003b3a:	4642      	mov	r2, r8
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	4630      	mov	r0, r6
 8003b40:	4639      	mov	r1, r7
 8003b42:	f7fc fea3 	bl	800088c <__aeabi_ddiv>
 8003b46:	f7fd f827 	bl	8000b98 <__aeabi_d2iz>
 8003b4a:	4682      	mov	sl, r0
 8003b4c:	f7fc fd0a 	bl	8000564 <__aeabi_i2d>
 8003b50:	4642      	mov	r2, r8
 8003b52:	464b      	mov	r3, r9
 8003b54:	f7fc fd70 	bl	8000638 <__aeabi_dmul>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	4639      	mov	r1, r7
 8003b60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8003b64:	f7fc fbb0 	bl	80002c8 <__aeabi_dsub>
 8003b68:	f805 6b01 	strb.w	r6, [r5], #1
 8003b6c:	9e01      	ldr	r6, [sp, #4]
 8003b6e:	9f03      	ldr	r7, [sp, #12]
 8003b70:	1bae      	subs	r6, r5, r6
 8003b72:	42b7      	cmp	r7, r6
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	d135      	bne.n	8003be6 <_dtoa_r+0x6e6>
 8003b7a:	f7fc fba7 	bl	80002cc <__adddf3>
 8003b7e:	4642      	mov	r2, r8
 8003b80:	464b      	mov	r3, r9
 8003b82:	4606      	mov	r6, r0
 8003b84:	460f      	mov	r7, r1
 8003b86:	f7fc ffe7 	bl	8000b58 <__aeabi_dcmpgt>
 8003b8a:	b9d0      	cbnz	r0, 8003bc2 <_dtoa_r+0x6c2>
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	464b      	mov	r3, r9
 8003b90:	4630      	mov	r0, r6
 8003b92:	4639      	mov	r1, r7
 8003b94:	f7fc ffb8 	bl	8000b08 <__aeabi_dcmpeq>
 8003b98:	b110      	cbz	r0, 8003ba0 <_dtoa_r+0x6a0>
 8003b9a:	f01a 0f01 	tst.w	sl, #1
 8003b9e:	d110      	bne.n	8003bc2 <_dtoa_r+0x6c2>
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	ee18 1a10 	vmov	r1, s16
 8003ba6:	f000 fbd3 	bl	8004350 <_Bfree>
 8003baa:	2300      	movs	r3, #0
 8003bac:	9800      	ldr	r0, [sp, #0]
 8003bae:	702b      	strb	r3, [r5, #0]
 8003bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	6018      	str	r0, [r3, #0]
 8003bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f43f acf1 	beq.w	80035a0 <_dtoa_r+0xa0>
 8003bbe:	601d      	str	r5, [r3, #0]
 8003bc0:	e4ee      	b.n	80035a0 <_dtoa_r+0xa0>
 8003bc2:	9f00      	ldr	r7, [sp, #0]
 8003bc4:	462b      	mov	r3, r5
 8003bc6:	461d      	mov	r5, r3
 8003bc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003bcc:	2a39      	cmp	r2, #57	; 0x39
 8003bce:	d106      	bne.n	8003bde <_dtoa_r+0x6de>
 8003bd0:	9a01      	ldr	r2, [sp, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d1f7      	bne.n	8003bc6 <_dtoa_r+0x6c6>
 8003bd6:	9901      	ldr	r1, [sp, #4]
 8003bd8:	2230      	movs	r2, #48	; 0x30
 8003bda:	3701      	adds	r7, #1
 8003bdc:	700a      	strb	r2, [r1, #0]
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	3201      	adds	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	e790      	b.n	8003b08 <_dtoa_r+0x608>
 8003be6:	4ba6      	ldr	r3, [pc, #664]	; (8003e80 <_dtoa_r+0x980>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	f7fc fd25 	bl	8000638 <__aeabi_dmul>
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4606      	mov	r6, r0
 8003bf4:	460f      	mov	r7, r1
 8003bf6:	f7fc ff87 	bl	8000b08 <__aeabi_dcmpeq>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d09d      	beq.n	8003b3a <_dtoa_r+0x63a>
 8003bfe:	e7cf      	b.n	8003ba0 <_dtoa_r+0x6a0>
 8003c00:	9a08      	ldr	r2, [sp, #32]
 8003c02:	2a00      	cmp	r2, #0
 8003c04:	f000 80d7 	beq.w	8003db6 <_dtoa_r+0x8b6>
 8003c08:	9a06      	ldr	r2, [sp, #24]
 8003c0a:	2a01      	cmp	r2, #1
 8003c0c:	f300 80ba 	bgt.w	8003d84 <_dtoa_r+0x884>
 8003c10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	f000 80b2 	beq.w	8003d7c <_dtoa_r+0x87c>
 8003c18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003c1c:	9e07      	ldr	r6, [sp, #28]
 8003c1e:	9d04      	ldr	r5, [sp, #16]
 8003c20:	9a04      	ldr	r2, [sp, #16]
 8003c22:	441a      	add	r2, r3
 8003c24:	9204      	str	r2, [sp, #16]
 8003c26:	9a05      	ldr	r2, [sp, #20]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	441a      	add	r2, r3
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	9205      	str	r2, [sp, #20]
 8003c30:	f000 fc46 	bl	80044c0 <__i2b>
 8003c34:	4607      	mov	r7, r0
 8003c36:	2d00      	cmp	r5, #0
 8003c38:	dd0c      	ble.n	8003c54 <_dtoa_r+0x754>
 8003c3a:	9b05      	ldr	r3, [sp, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	dd09      	ble.n	8003c54 <_dtoa_r+0x754>
 8003c40:	42ab      	cmp	r3, r5
 8003c42:	9a04      	ldr	r2, [sp, #16]
 8003c44:	bfa8      	it	ge
 8003c46:	462b      	movge	r3, r5
 8003c48:	1ad2      	subs	r2, r2, r3
 8003c4a:	9204      	str	r2, [sp, #16]
 8003c4c:	9a05      	ldr	r2, [sp, #20]
 8003c4e:	1aed      	subs	r5, r5, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	9305      	str	r3, [sp, #20]
 8003c54:	9b07      	ldr	r3, [sp, #28]
 8003c56:	b31b      	cbz	r3, 8003ca0 <_dtoa_r+0x7a0>
 8003c58:	9b08      	ldr	r3, [sp, #32]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80af 	beq.w	8003dbe <_dtoa_r+0x8be>
 8003c60:	2e00      	cmp	r6, #0
 8003c62:	dd13      	ble.n	8003c8c <_dtoa_r+0x78c>
 8003c64:	4639      	mov	r1, r7
 8003c66:	4632      	mov	r2, r6
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f000 fce9 	bl	8004640 <__pow5mult>
 8003c6e:	ee18 2a10 	vmov	r2, s16
 8003c72:	4601      	mov	r1, r0
 8003c74:	4607      	mov	r7, r0
 8003c76:	4620      	mov	r0, r4
 8003c78:	f000 fc38 	bl	80044ec <__multiply>
 8003c7c:	ee18 1a10 	vmov	r1, s16
 8003c80:	4680      	mov	r8, r0
 8003c82:	4620      	mov	r0, r4
 8003c84:	f000 fb64 	bl	8004350 <_Bfree>
 8003c88:	ee08 8a10 	vmov	s16, r8
 8003c8c:	9b07      	ldr	r3, [sp, #28]
 8003c8e:	1b9a      	subs	r2, r3, r6
 8003c90:	d006      	beq.n	8003ca0 <_dtoa_r+0x7a0>
 8003c92:	ee18 1a10 	vmov	r1, s16
 8003c96:	4620      	mov	r0, r4
 8003c98:	f000 fcd2 	bl	8004640 <__pow5mult>
 8003c9c:	ee08 0a10 	vmov	s16, r0
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f000 fc0c 	bl	80044c0 <__i2b>
 8003ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	4606      	mov	r6, r0
 8003cae:	f340 8088 	ble.w	8003dc2 <_dtoa_r+0x8c2>
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4601      	mov	r1, r0
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f000 fcc2 	bl	8004640 <__pow5mult>
 8003cbc:	9b06      	ldr	r3, [sp, #24]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	4606      	mov	r6, r0
 8003cc2:	f340 8081 	ble.w	8003dc8 <_dtoa_r+0x8c8>
 8003cc6:	f04f 0800 	mov.w	r8, #0
 8003cca:	6933      	ldr	r3, [r6, #16]
 8003ccc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003cd0:	6918      	ldr	r0, [r3, #16]
 8003cd2:	f000 fba5 	bl	8004420 <__hi0bits>
 8003cd6:	f1c0 0020 	rsb	r0, r0, #32
 8003cda:	9b05      	ldr	r3, [sp, #20]
 8003cdc:	4418      	add	r0, r3
 8003cde:	f010 001f 	ands.w	r0, r0, #31
 8003ce2:	f000 8092 	beq.w	8003e0a <_dtoa_r+0x90a>
 8003ce6:	f1c0 0320 	rsb	r3, r0, #32
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	f340 808a 	ble.w	8003e04 <_dtoa_r+0x904>
 8003cf0:	f1c0 001c 	rsb	r0, r0, #28
 8003cf4:	9b04      	ldr	r3, [sp, #16]
 8003cf6:	4403      	add	r3, r0
 8003cf8:	9304      	str	r3, [sp, #16]
 8003cfa:	9b05      	ldr	r3, [sp, #20]
 8003cfc:	4403      	add	r3, r0
 8003cfe:	4405      	add	r5, r0
 8003d00:	9305      	str	r3, [sp, #20]
 8003d02:	9b04      	ldr	r3, [sp, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	dd07      	ble.n	8003d18 <_dtoa_r+0x818>
 8003d08:	ee18 1a10 	vmov	r1, s16
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f000 fcf0 	bl	80046f4 <__lshift>
 8003d14:	ee08 0a10 	vmov	s16, r0
 8003d18:	9b05      	ldr	r3, [sp, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	dd05      	ble.n	8003d2a <_dtoa_r+0x82a>
 8003d1e:	4631      	mov	r1, r6
 8003d20:	461a      	mov	r2, r3
 8003d22:	4620      	mov	r0, r4
 8003d24:	f000 fce6 	bl	80046f4 <__lshift>
 8003d28:	4606      	mov	r6, r0
 8003d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d06e      	beq.n	8003e0e <_dtoa_r+0x90e>
 8003d30:	ee18 0a10 	vmov	r0, s16
 8003d34:	4631      	mov	r1, r6
 8003d36:	f000 fd4d 	bl	80047d4 <__mcmp>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	da67      	bge.n	8003e0e <_dtoa_r+0x90e>
 8003d3e:	9b00      	ldr	r3, [sp, #0]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	ee18 1a10 	vmov	r1, s16
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	220a      	movs	r2, #10
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f000 fb21 	bl	8004394 <__multadd>
 8003d52:	9b08      	ldr	r3, [sp, #32]
 8003d54:	ee08 0a10 	vmov	s16, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 81b1 	beq.w	80040c0 <_dtoa_r+0xbc0>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	4639      	mov	r1, r7
 8003d62:	220a      	movs	r2, #10
 8003d64:	4620      	mov	r0, r4
 8003d66:	f000 fb15 	bl	8004394 <__multadd>
 8003d6a:	9b02      	ldr	r3, [sp, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	4607      	mov	r7, r0
 8003d70:	f300 808e 	bgt.w	8003e90 <_dtoa_r+0x990>
 8003d74:	9b06      	ldr	r3, [sp, #24]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	dc51      	bgt.n	8003e1e <_dtoa_r+0x91e>
 8003d7a:	e089      	b.n	8003e90 <_dtoa_r+0x990>
 8003d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003d82:	e74b      	b.n	8003c1c <_dtoa_r+0x71c>
 8003d84:	9b03      	ldr	r3, [sp, #12]
 8003d86:	1e5e      	subs	r6, r3, #1
 8003d88:	9b07      	ldr	r3, [sp, #28]
 8003d8a:	42b3      	cmp	r3, r6
 8003d8c:	bfbf      	itttt	lt
 8003d8e:	9b07      	ldrlt	r3, [sp, #28]
 8003d90:	9607      	strlt	r6, [sp, #28]
 8003d92:	1af2      	sublt	r2, r6, r3
 8003d94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003d96:	bfb6      	itet	lt
 8003d98:	189b      	addlt	r3, r3, r2
 8003d9a:	1b9e      	subge	r6, r3, r6
 8003d9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8003d9e:	9b03      	ldr	r3, [sp, #12]
 8003da0:	bfb8      	it	lt
 8003da2:	2600      	movlt	r6, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bfb7      	itett	lt
 8003da8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8003dac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003db0:	1a9d      	sublt	r5, r3, r2
 8003db2:	2300      	movlt	r3, #0
 8003db4:	e734      	b.n	8003c20 <_dtoa_r+0x720>
 8003db6:	9e07      	ldr	r6, [sp, #28]
 8003db8:	9d04      	ldr	r5, [sp, #16]
 8003dba:	9f08      	ldr	r7, [sp, #32]
 8003dbc:	e73b      	b.n	8003c36 <_dtoa_r+0x736>
 8003dbe:	9a07      	ldr	r2, [sp, #28]
 8003dc0:	e767      	b.n	8003c92 <_dtoa_r+0x792>
 8003dc2:	9b06      	ldr	r3, [sp, #24]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	dc18      	bgt.n	8003dfa <_dtoa_r+0x8fa>
 8003dc8:	f1ba 0f00 	cmp.w	sl, #0
 8003dcc:	d115      	bne.n	8003dfa <_dtoa_r+0x8fa>
 8003dce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003dd2:	b993      	cbnz	r3, 8003dfa <_dtoa_r+0x8fa>
 8003dd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003dd8:	0d1b      	lsrs	r3, r3, #20
 8003dda:	051b      	lsls	r3, r3, #20
 8003ddc:	b183      	cbz	r3, 8003e00 <_dtoa_r+0x900>
 8003dde:	9b04      	ldr	r3, [sp, #16]
 8003de0:	3301      	adds	r3, #1
 8003de2:	9304      	str	r3, [sp, #16]
 8003de4:	9b05      	ldr	r3, [sp, #20]
 8003de6:	3301      	adds	r3, #1
 8003de8:	9305      	str	r3, [sp, #20]
 8003dea:	f04f 0801 	mov.w	r8, #1
 8003dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f47f af6a 	bne.w	8003cca <_dtoa_r+0x7ca>
 8003df6:	2001      	movs	r0, #1
 8003df8:	e76f      	b.n	8003cda <_dtoa_r+0x7da>
 8003dfa:	f04f 0800 	mov.w	r8, #0
 8003dfe:	e7f6      	b.n	8003dee <_dtoa_r+0x8ee>
 8003e00:	4698      	mov	r8, r3
 8003e02:	e7f4      	b.n	8003dee <_dtoa_r+0x8ee>
 8003e04:	f43f af7d 	beq.w	8003d02 <_dtoa_r+0x802>
 8003e08:	4618      	mov	r0, r3
 8003e0a:	301c      	adds	r0, #28
 8003e0c:	e772      	b.n	8003cf4 <_dtoa_r+0x7f4>
 8003e0e:	9b03      	ldr	r3, [sp, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	dc37      	bgt.n	8003e84 <_dtoa_r+0x984>
 8003e14:	9b06      	ldr	r3, [sp, #24]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	dd34      	ble.n	8003e84 <_dtoa_r+0x984>
 8003e1a:	9b03      	ldr	r3, [sp, #12]
 8003e1c:	9302      	str	r3, [sp, #8]
 8003e1e:	9b02      	ldr	r3, [sp, #8]
 8003e20:	b96b      	cbnz	r3, 8003e3e <_dtoa_r+0x93e>
 8003e22:	4631      	mov	r1, r6
 8003e24:	2205      	movs	r2, #5
 8003e26:	4620      	mov	r0, r4
 8003e28:	f000 fab4 	bl	8004394 <__multadd>
 8003e2c:	4601      	mov	r1, r0
 8003e2e:	4606      	mov	r6, r0
 8003e30:	ee18 0a10 	vmov	r0, s16
 8003e34:	f000 fcce 	bl	80047d4 <__mcmp>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	f73f adbb 	bgt.w	80039b4 <_dtoa_r+0x4b4>
 8003e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e40:	9d01      	ldr	r5, [sp, #4]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	f04f 0800 	mov.w	r8, #0
 8003e4a:	4631      	mov	r1, r6
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f000 fa7f 	bl	8004350 <_Bfree>
 8003e52:	2f00      	cmp	r7, #0
 8003e54:	f43f aea4 	beq.w	8003ba0 <_dtoa_r+0x6a0>
 8003e58:	f1b8 0f00 	cmp.w	r8, #0
 8003e5c:	d005      	beq.n	8003e6a <_dtoa_r+0x96a>
 8003e5e:	45b8      	cmp	r8, r7
 8003e60:	d003      	beq.n	8003e6a <_dtoa_r+0x96a>
 8003e62:	4641      	mov	r1, r8
 8003e64:	4620      	mov	r0, r4
 8003e66:	f000 fa73 	bl	8004350 <_Bfree>
 8003e6a:	4639      	mov	r1, r7
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f000 fa6f 	bl	8004350 <_Bfree>
 8003e72:	e695      	b.n	8003ba0 <_dtoa_r+0x6a0>
 8003e74:	2600      	movs	r6, #0
 8003e76:	4637      	mov	r7, r6
 8003e78:	e7e1      	b.n	8003e3e <_dtoa_r+0x93e>
 8003e7a:	9700      	str	r7, [sp, #0]
 8003e7c:	4637      	mov	r7, r6
 8003e7e:	e599      	b.n	80039b4 <_dtoa_r+0x4b4>
 8003e80:	40240000 	.word	0x40240000
 8003e84:	9b08      	ldr	r3, [sp, #32]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80ca 	beq.w	8004020 <_dtoa_r+0xb20>
 8003e8c:	9b03      	ldr	r3, [sp, #12]
 8003e8e:	9302      	str	r3, [sp, #8]
 8003e90:	2d00      	cmp	r5, #0
 8003e92:	dd05      	ble.n	8003ea0 <_dtoa_r+0x9a0>
 8003e94:	4639      	mov	r1, r7
 8003e96:	462a      	mov	r2, r5
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f000 fc2b 	bl	80046f4 <__lshift>
 8003e9e:	4607      	mov	r7, r0
 8003ea0:	f1b8 0f00 	cmp.w	r8, #0
 8003ea4:	d05b      	beq.n	8003f5e <_dtoa_r+0xa5e>
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f000 fa11 	bl	80042d0 <_Balloc>
 8003eae:	4605      	mov	r5, r0
 8003eb0:	b928      	cbnz	r0, 8003ebe <_dtoa_r+0x9be>
 8003eb2:	4b87      	ldr	r3, [pc, #540]	; (80040d0 <_dtoa_r+0xbd0>)
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003eba:	f7ff bb3b 	b.w	8003534 <_dtoa_r+0x34>
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	3202      	adds	r2, #2
 8003ec2:	0092      	lsls	r2, r2, #2
 8003ec4:	f107 010c 	add.w	r1, r7, #12
 8003ec8:	300c      	adds	r0, #12
 8003eca:	f000 f9e7 	bl	800429c <memcpy>
 8003ece:	2201      	movs	r2, #1
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f000 fc0e 	bl	80046f4 <__lshift>
 8003ed8:	9b01      	ldr	r3, [sp, #4]
 8003eda:	f103 0901 	add.w	r9, r3, #1
 8003ede:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	9305      	str	r3, [sp, #20]
 8003ee6:	f00a 0301 	and.w	r3, sl, #1
 8003eea:	46b8      	mov	r8, r7
 8003eec:	9304      	str	r3, [sp, #16]
 8003eee:	4607      	mov	r7, r0
 8003ef0:	4631      	mov	r1, r6
 8003ef2:	ee18 0a10 	vmov	r0, s16
 8003ef6:	f7ff fa75 	bl	80033e4 <quorem>
 8003efa:	4641      	mov	r1, r8
 8003efc:	9002      	str	r0, [sp, #8]
 8003efe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003f02:	ee18 0a10 	vmov	r0, s16
 8003f06:	f000 fc65 	bl	80047d4 <__mcmp>
 8003f0a:	463a      	mov	r2, r7
 8003f0c:	9003      	str	r0, [sp, #12]
 8003f0e:	4631      	mov	r1, r6
 8003f10:	4620      	mov	r0, r4
 8003f12:	f000 fc7b 	bl	800480c <__mdiff>
 8003f16:	68c2      	ldr	r2, [r0, #12]
 8003f18:	f109 3bff 	add.w	fp, r9, #4294967295
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	bb02      	cbnz	r2, 8003f62 <_dtoa_r+0xa62>
 8003f20:	4601      	mov	r1, r0
 8003f22:	ee18 0a10 	vmov	r0, s16
 8003f26:	f000 fc55 	bl	80047d4 <__mcmp>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	4620      	mov	r0, r4
 8003f30:	9207      	str	r2, [sp, #28]
 8003f32:	f000 fa0d 	bl	8004350 <_Bfree>
 8003f36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8003f3a:	ea43 0102 	orr.w	r1, r3, r2
 8003f3e:	9b04      	ldr	r3, [sp, #16]
 8003f40:	430b      	orrs	r3, r1
 8003f42:	464d      	mov	r5, r9
 8003f44:	d10f      	bne.n	8003f66 <_dtoa_r+0xa66>
 8003f46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003f4a:	d02a      	beq.n	8003fa2 <_dtoa_r+0xaa2>
 8003f4c:	9b03      	ldr	r3, [sp, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	dd02      	ble.n	8003f58 <_dtoa_r+0xa58>
 8003f52:	9b02      	ldr	r3, [sp, #8]
 8003f54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8003f58:	f88b a000 	strb.w	sl, [fp]
 8003f5c:	e775      	b.n	8003e4a <_dtoa_r+0x94a>
 8003f5e:	4638      	mov	r0, r7
 8003f60:	e7ba      	b.n	8003ed8 <_dtoa_r+0x9d8>
 8003f62:	2201      	movs	r2, #1
 8003f64:	e7e2      	b.n	8003f2c <_dtoa_r+0xa2c>
 8003f66:	9b03      	ldr	r3, [sp, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	db04      	blt.n	8003f76 <_dtoa_r+0xa76>
 8003f6c:	9906      	ldr	r1, [sp, #24]
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	9904      	ldr	r1, [sp, #16]
 8003f72:	430b      	orrs	r3, r1
 8003f74:	d122      	bne.n	8003fbc <_dtoa_r+0xabc>
 8003f76:	2a00      	cmp	r2, #0
 8003f78:	ddee      	ble.n	8003f58 <_dtoa_r+0xa58>
 8003f7a:	ee18 1a10 	vmov	r1, s16
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4620      	mov	r0, r4
 8003f82:	f000 fbb7 	bl	80046f4 <__lshift>
 8003f86:	4631      	mov	r1, r6
 8003f88:	ee08 0a10 	vmov	s16, r0
 8003f8c:	f000 fc22 	bl	80047d4 <__mcmp>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	dc03      	bgt.n	8003f9c <_dtoa_r+0xa9c>
 8003f94:	d1e0      	bne.n	8003f58 <_dtoa_r+0xa58>
 8003f96:	f01a 0f01 	tst.w	sl, #1
 8003f9a:	d0dd      	beq.n	8003f58 <_dtoa_r+0xa58>
 8003f9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003fa0:	d1d7      	bne.n	8003f52 <_dtoa_r+0xa52>
 8003fa2:	2339      	movs	r3, #57	; 0x39
 8003fa4:	f88b 3000 	strb.w	r3, [fp]
 8003fa8:	462b      	mov	r3, r5
 8003faa:	461d      	mov	r5, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003fb2:	2a39      	cmp	r2, #57	; 0x39
 8003fb4:	d071      	beq.n	800409a <_dtoa_r+0xb9a>
 8003fb6:	3201      	adds	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e746      	b.n	8003e4a <_dtoa_r+0x94a>
 8003fbc:	2a00      	cmp	r2, #0
 8003fbe:	dd07      	ble.n	8003fd0 <_dtoa_r+0xad0>
 8003fc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003fc4:	d0ed      	beq.n	8003fa2 <_dtoa_r+0xaa2>
 8003fc6:	f10a 0301 	add.w	r3, sl, #1
 8003fca:	f88b 3000 	strb.w	r3, [fp]
 8003fce:	e73c      	b.n	8003e4a <_dtoa_r+0x94a>
 8003fd0:	9b05      	ldr	r3, [sp, #20]
 8003fd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8003fd6:	4599      	cmp	r9, r3
 8003fd8:	d047      	beq.n	800406a <_dtoa_r+0xb6a>
 8003fda:	ee18 1a10 	vmov	r1, s16
 8003fde:	2300      	movs	r3, #0
 8003fe0:	220a      	movs	r2, #10
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f000 f9d6 	bl	8004394 <__multadd>
 8003fe8:	45b8      	cmp	r8, r7
 8003fea:	ee08 0a10 	vmov	s16, r0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	f04f 020a 	mov.w	r2, #10
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	d106      	bne.n	800400a <_dtoa_r+0xb0a>
 8003ffc:	f000 f9ca 	bl	8004394 <__multadd>
 8004000:	4680      	mov	r8, r0
 8004002:	4607      	mov	r7, r0
 8004004:	f109 0901 	add.w	r9, r9, #1
 8004008:	e772      	b.n	8003ef0 <_dtoa_r+0x9f0>
 800400a:	f000 f9c3 	bl	8004394 <__multadd>
 800400e:	4639      	mov	r1, r7
 8004010:	4680      	mov	r8, r0
 8004012:	2300      	movs	r3, #0
 8004014:	220a      	movs	r2, #10
 8004016:	4620      	mov	r0, r4
 8004018:	f000 f9bc 	bl	8004394 <__multadd>
 800401c:	4607      	mov	r7, r0
 800401e:	e7f1      	b.n	8004004 <_dtoa_r+0xb04>
 8004020:	9b03      	ldr	r3, [sp, #12]
 8004022:	9302      	str	r3, [sp, #8]
 8004024:	9d01      	ldr	r5, [sp, #4]
 8004026:	ee18 0a10 	vmov	r0, s16
 800402a:	4631      	mov	r1, r6
 800402c:	f7ff f9da 	bl	80033e4 <quorem>
 8004030:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004034:	9b01      	ldr	r3, [sp, #4]
 8004036:	f805 ab01 	strb.w	sl, [r5], #1
 800403a:	1aea      	subs	r2, r5, r3
 800403c:	9b02      	ldr	r3, [sp, #8]
 800403e:	4293      	cmp	r3, r2
 8004040:	dd09      	ble.n	8004056 <_dtoa_r+0xb56>
 8004042:	ee18 1a10 	vmov	r1, s16
 8004046:	2300      	movs	r3, #0
 8004048:	220a      	movs	r2, #10
 800404a:	4620      	mov	r0, r4
 800404c:	f000 f9a2 	bl	8004394 <__multadd>
 8004050:	ee08 0a10 	vmov	s16, r0
 8004054:	e7e7      	b.n	8004026 <_dtoa_r+0xb26>
 8004056:	9b02      	ldr	r3, [sp, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	bfc8      	it	gt
 800405c:	461d      	movgt	r5, r3
 800405e:	9b01      	ldr	r3, [sp, #4]
 8004060:	bfd8      	it	le
 8004062:	2501      	movle	r5, #1
 8004064:	441d      	add	r5, r3
 8004066:	f04f 0800 	mov.w	r8, #0
 800406a:	ee18 1a10 	vmov	r1, s16
 800406e:	2201      	movs	r2, #1
 8004070:	4620      	mov	r0, r4
 8004072:	f000 fb3f 	bl	80046f4 <__lshift>
 8004076:	4631      	mov	r1, r6
 8004078:	ee08 0a10 	vmov	s16, r0
 800407c:	f000 fbaa 	bl	80047d4 <__mcmp>
 8004080:	2800      	cmp	r0, #0
 8004082:	dc91      	bgt.n	8003fa8 <_dtoa_r+0xaa8>
 8004084:	d102      	bne.n	800408c <_dtoa_r+0xb8c>
 8004086:	f01a 0f01 	tst.w	sl, #1
 800408a:	d18d      	bne.n	8003fa8 <_dtoa_r+0xaa8>
 800408c:	462b      	mov	r3, r5
 800408e:	461d      	mov	r5, r3
 8004090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004094:	2a30      	cmp	r2, #48	; 0x30
 8004096:	d0fa      	beq.n	800408e <_dtoa_r+0xb8e>
 8004098:	e6d7      	b.n	8003e4a <_dtoa_r+0x94a>
 800409a:	9a01      	ldr	r2, [sp, #4]
 800409c:	429a      	cmp	r2, r3
 800409e:	d184      	bne.n	8003faa <_dtoa_r+0xaaa>
 80040a0:	9b00      	ldr	r3, [sp, #0]
 80040a2:	3301      	adds	r3, #1
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	2331      	movs	r3, #49	; 0x31
 80040a8:	7013      	strb	r3, [r2, #0]
 80040aa:	e6ce      	b.n	8003e4a <_dtoa_r+0x94a>
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <_dtoa_r+0xbd4>)
 80040ae:	f7ff ba95 	b.w	80035dc <_dtoa_r+0xdc>
 80040b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f47f aa6e 	bne.w	8003596 <_dtoa_r+0x96>
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <_dtoa_r+0xbd8>)
 80040bc:	f7ff ba8e 	b.w	80035dc <_dtoa_r+0xdc>
 80040c0:	9b02      	ldr	r3, [sp, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dcae      	bgt.n	8004024 <_dtoa_r+0xb24>
 80040c6:	9b06      	ldr	r3, [sp, #24]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	f73f aea8 	bgt.w	8003e1e <_dtoa_r+0x91e>
 80040ce:	e7a9      	b.n	8004024 <_dtoa_r+0xb24>
 80040d0:	08005613 	.word	0x08005613
 80040d4:	08005570 	.word	0x08005570
 80040d8:	08005594 	.word	0x08005594

080040dc <__sflush_r>:
 80040dc:	898a      	ldrh	r2, [r1, #12]
 80040de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e2:	4605      	mov	r5, r0
 80040e4:	0710      	lsls	r0, r2, #28
 80040e6:	460c      	mov	r4, r1
 80040e8:	d458      	bmi.n	800419c <__sflush_r+0xc0>
 80040ea:	684b      	ldr	r3, [r1, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	dc05      	bgt.n	80040fc <__sflush_r+0x20>
 80040f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	dc02      	bgt.n	80040fc <__sflush_r+0x20>
 80040f6:	2000      	movs	r0, #0
 80040f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040fe:	2e00      	cmp	r6, #0
 8004100:	d0f9      	beq.n	80040f6 <__sflush_r+0x1a>
 8004102:	2300      	movs	r3, #0
 8004104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004108:	682f      	ldr	r7, [r5, #0]
 800410a:	602b      	str	r3, [r5, #0]
 800410c:	d032      	beq.n	8004174 <__sflush_r+0x98>
 800410e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004110:	89a3      	ldrh	r3, [r4, #12]
 8004112:	075a      	lsls	r2, r3, #29
 8004114:	d505      	bpl.n	8004122 <__sflush_r+0x46>
 8004116:	6863      	ldr	r3, [r4, #4]
 8004118:	1ac0      	subs	r0, r0, r3
 800411a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800411c:	b10b      	cbz	r3, 8004122 <__sflush_r+0x46>
 800411e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004120:	1ac0      	subs	r0, r0, r3
 8004122:	2300      	movs	r3, #0
 8004124:	4602      	mov	r2, r0
 8004126:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004128:	6a21      	ldr	r1, [r4, #32]
 800412a:	4628      	mov	r0, r5
 800412c:	47b0      	blx	r6
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	d106      	bne.n	8004142 <__sflush_r+0x66>
 8004134:	6829      	ldr	r1, [r5, #0]
 8004136:	291d      	cmp	r1, #29
 8004138:	d82c      	bhi.n	8004194 <__sflush_r+0xb8>
 800413a:	4a2a      	ldr	r2, [pc, #168]	; (80041e4 <__sflush_r+0x108>)
 800413c:	40ca      	lsrs	r2, r1
 800413e:	07d6      	lsls	r6, r2, #31
 8004140:	d528      	bpl.n	8004194 <__sflush_r+0xb8>
 8004142:	2200      	movs	r2, #0
 8004144:	6062      	str	r2, [r4, #4]
 8004146:	04d9      	lsls	r1, r3, #19
 8004148:	6922      	ldr	r2, [r4, #16]
 800414a:	6022      	str	r2, [r4, #0]
 800414c:	d504      	bpl.n	8004158 <__sflush_r+0x7c>
 800414e:	1c42      	adds	r2, r0, #1
 8004150:	d101      	bne.n	8004156 <__sflush_r+0x7a>
 8004152:	682b      	ldr	r3, [r5, #0]
 8004154:	b903      	cbnz	r3, 8004158 <__sflush_r+0x7c>
 8004156:	6560      	str	r0, [r4, #84]	; 0x54
 8004158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800415a:	602f      	str	r7, [r5, #0]
 800415c:	2900      	cmp	r1, #0
 800415e:	d0ca      	beq.n	80040f6 <__sflush_r+0x1a>
 8004160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004164:	4299      	cmp	r1, r3
 8004166:	d002      	beq.n	800416e <__sflush_r+0x92>
 8004168:	4628      	mov	r0, r5
 800416a:	f000 fc4b 	bl	8004a04 <_free_r>
 800416e:	2000      	movs	r0, #0
 8004170:	6360      	str	r0, [r4, #52]	; 0x34
 8004172:	e7c1      	b.n	80040f8 <__sflush_r+0x1c>
 8004174:	6a21      	ldr	r1, [r4, #32]
 8004176:	2301      	movs	r3, #1
 8004178:	4628      	mov	r0, r5
 800417a:	47b0      	blx	r6
 800417c:	1c41      	adds	r1, r0, #1
 800417e:	d1c7      	bne.n	8004110 <__sflush_r+0x34>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0c4      	beq.n	8004110 <__sflush_r+0x34>
 8004186:	2b1d      	cmp	r3, #29
 8004188:	d001      	beq.n	800418e <__sflush_r+0xb2>
 800418a:	2b16      	cmp	r3, #22
 800418c:	d101      	bne.n	8004192 <__sflush_r+0xb6>
 800418e:	602f      	str	r7, [r5, #0]
 8004190:	e7b1      	b.n	80040f6 <__sflush_r+0x1a>
 8004192:	89a3      	ldrh	r3, [r4, #12]
 8004194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004198:	81a3      	strh	r3, [r4, #12]
 800419a:	e7ad      	b.n	80040f8 <__sflush_r+0x1c>
 800419c:	690f      	ldr	r7, [r1, #16]
 800419e:	2f00      	cmp	r7, #0
 80041a0:	d0a9      	beq.n	80040f6 <__sflush_r+0x1a>
 80041a2:	0793      	lsls	r3, r2, #30
 80041a4:	680e      	ldr	r6, [r1, #0]
 80041a6:	bf08      	it	eq
 80041a8:	694b      	ldreq	r3, [r1, #20]
 80041aa:	600f      	str	r7, [r1, #0]
 80041ac:	bf18      	it	ne
 80041ae:	2300      	movne	r3, #0
 80041b0:	eba6 0807 	sub.w	r8, r6, r7
 80041b4:	608b      	str	r3, [r1, #8]
 80041b6:	f1b8 0f00 	cmp.w	r8, #0
 80041ba:	dd9c      	ble.n	80040f6 <__sflush_r+0x1a>
 80041bc:	6a21      	ldr	r1, [r4, #32]
 80041be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041c0:	4643      	mov	r3, r8
 80041c2:	463a      	mov	r2, r7
 80041c4:	4628      	mov	r0, r5
 80041c6:	47b0      	blx	r6
 80041c8:	2800      	cmp	r0, #0
 80041ca:	dc06      	bgt.n	80041da <__sflush_r+0xfe>
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d2:	81a3      	strh	r3, [r4, #12]
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	e78e      	b.n	80040f8 <__sflush_r+0x1c>
 80041da:	4407      	add	r7, r0
 80041dc:	eba8 0800 	sub.w	r8, r8, r0
 80041e0:	e7e9      	b.n	80041b6 <__sflush_r+0xda>
 80041e2:	bf00      	nop
 80041e4:	20400001 	.word	0x20400001

080041e8 <_fflush_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	690b      	ldr	r3, [r1, #16]
 80041ec:	4605      	mov	r5, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	b913      	cbnz	r3, 80041f8 <_fflush_r+0x10>
 80041f2:	2500      	movs	r5, #0
 80041f4:	4628      	mov	r0, r5
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	b118      	cbz	r0, 8004202 <_fflush_r+0x1a>
 80041fa:	6983      	ldr	r3, [r0, #24]
 80041fc:	b90b      	cbnz	r3, 8004202 <_fflush_r+0x1a>
 80041fe:	f7fe fa8f 	bl	8002720 <__sinit>
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <_fflush_r+0x6c>)
 8004204:	429c      	cmp	r4, r3
 8004206:	d11b      	bne.n	8004240 <_fflush_r+0x58>
 8004208:	686c      	ldr	r4, [r5, #4]
 800420a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0ef      	beq.n	80041f2 <_fflush_r+0xa>
 8004212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004214:	07d0      	lsls	r0, r2, #31
 8004216:	d404      	bmi.n	8004222 <_fflush_r+0x3a>
 8004218:	0599      	lsls	r1, r3, #22
 800421a:	d402      	bmi.n	8004222 <_fflush_r+0x3a>
 800421c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800421e:	f7fe fb42 	bl	80028a6 <__retarget_lock_acquire_recursive>
 8004222:	4628      	mov	r0, r5
 8004224:	4621      	mov	r1, r4
 8004226:	f7ff ff59 	bl	80040dc <__sflush_r>
 800422a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800422c:	07da      	lsls	r2, r3, #31
 800422e:	4605      	mov	r5, r0
 8004230:	d4e0      	bmi.n	80041f4 <_fflush_r+0xc>
 8004232:	89a3      	ldrh	r3, [r4, #12]
 8004234:	059b      	lsls	r3, r3, #22
 8004236:	d4dd      	bmi.n	80041f4 <_fflush_r+0xc>
 8004238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800423a:	f7fe fb35 	bl	80028a8 <__retarget_lock_release_recursive>
 800423e:	e7d9      	b.n	80041f4 <_fflush_r+0xc>
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <_fflush_r+0x70>)
 8004242:	429c      	cmp	r4, r3
 8004244:	d101      	bne.n	800424a <_fflush_r+0x62>
 8004246:	68ac      	ldr	r4, [r5, #8]
 8004248:	e7df      	b.n	800420a <_fflush_r+0x22>
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <_fflush_r+0x74>)
 800424c:	429c      	cmp	r4, r3
 800424e:	bf08      	it	eq
 8004250:	68ec      	ldreq	r4, [r5, #12]
 8004252:	e7da      	b.n	800420a <_fflush_r+0x22>
 8004254:	0800551c 	.word	0x0800551c
 8004258:	0800553c 	.word	0x0800553c
 800425c:	080054fc 	.word	0x080054fc

08004260 <_localeconv_r>:
 8004260:	4800      	ldr	r0, [pc, #0]	; (8004264 <_localeconv_r+0x4>)
 8004262:	4770      	bx	lr
 8004264:	20000164 	.word	0x20000164

08004268 <_lseek_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4d07      	ldr	r5, [pc, #28]	; (8004288 <_lseek_r+0x20>)
 800426c:	4604      	mov	r4, r0
 800426e:	4608      	mov	r0, r1
 8004270:	4611      	mov	r1, r2
 8004272:	2200      	movs	r2, #0
 8004274:	602a      	str	r2, [r5, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	f7fe f919 	bl	80024ae <_lseek>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d102      	bne.n	8004286 <_lseek_r+0x1e>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	b103      	cbz	r3, 8004286 <_lseek_r+0x1e>
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	20000360 	.word	0x20000360

0800428c <malloc>:
 800428c:	4b02      	ldr	r3, [pc, #8]	; (8004298 <malloc+0xc>)
 800428e:	4601      	mov	r1, r0
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	f7fe bb33 	b.w	80028fc <_malloc_r>
 8004296:	bf00      	nop
 8004298:	20000010 	.word	0x20000010

0800429c <memcpy>:
 800429c:	440a      	add	r2, r1
 800429e:	4291      	cmp	r1, r2
 80042a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80042a4:	d100      	bne.n	80042a8 <memcpy+0xc>
 80042a6:	4770      	bx	lr
 80042a8:	b510      	push	{r4, lr}
 80042aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042b2:	4291      	cmp	r1, r2
 80042b4:	d1f9      	bne.n	80042aa <memcpy+0xe>
 80042b6:	bd10      	pop	{r4, pc}

080042b8 <__malloc_lock>:
 80042b8:	4801      	ldr	r0, [pc, #4]	; (80042c0 <__malloc_lock+0x8>)
 80042ba:	f7fe baf4 	b.w	80028a6 <__retarget_lock_acquire_recursive>
 80042be:	bf00      	nop
 80042c0:	20000354 	.word	0x20000354

080042c4 <__malloc_unlock>:
 80042c4:	4801      	ldr	r0, [pc, #4]	; (80042cc <__malloc_unlock+0x8>)
 80042c6:	f7fe baef 	b.w	80028a8 <__retarget_lock_release_recursive>
 80042ca:	bf00      	nop
 80042cc:	20000354 	.word	0x20000354

080042d0 <_Balloc>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80042d4:	4604      	mov	r4, r0
 80042d6:	460d      	mov	r5, r1
 80042d8:	b976      	cbnz	r6, 80042f8 <_Balloc+0x28>
 80042da:	2010      	movs	r0, #16
 80042dc:	f7ff ffd6 	bl	800428c <malloc>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6260      	str	r0, [r4, #36]	; 0x24
 80042e4:	b920      	cbnz	r0, 80042f0 <_Balloc+0x20>
 80042e6:	4b18      	ldr	r3, [pc, #96]	; (8004348 <_Balloc+0x78>)
 80042e8:	4818      	ldr	r0, [pc, #96]	; (800434c <_Balloc+0x7c>)
 80042ea:	2166      	movs	r1, #102	; 0x66
 80042ec:	f000 fd44 	bl	8004d78 <__assert_func>
 80042f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80042f4:	6006      	str	r6, [r0, #0]
 80042f6:	60c6      	str	r6, [r0, #12]
 80042f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80042fa:	68f3      	ldr	r3, [r6, #12]
 80042fc:	b183      	cbz	r3, 8004320 <_Balloc+0x50>
 80042fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004306:	b9b8      	cbnz	r0, 8004338 <_Balloc+0x68>
 8004308:	2101      	movs	r1, #1
 800430a:	fa01 f605 	lsl.w	r6, r1, r5
 800430e:	1d72      	adds	r2, r6, #5
 8004310:	0092      	lsls	r2, r2, #2
 8004312:	4620      	mov	r0, r4
 8004314:	f000 fb60 	bl	80049d8 <_calloc_r>
 8004318:	b160      	cbz	r0, 8004334 <_Balloc+0x64>
 800431a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800431e:	e00e      	b.n	800433e <_Balloc+0x6e>
 8004320:	2221      	movs	r2, #33	; 0x21
 8004322:	2104      	movs	r1, #4
 8004324:	4620      	mov	r0, r4
 8004326:	f000 fb57 	bl	80049d8 <_calloc_r>
 800432a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800432c:	60f0      	str	r0, [r6, #12]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e4      	bne.n	80042fe <_Balloc+0x2e>
 8004334:	2000      	movs	r0, #0
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	6802      	ldr	r2, [r0, #0]
 800433a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800433e:	2300      	movs	r3, #0
 8004340:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004344:	e7f7      	b.n	8004336 <_Balloc+0x66>
 8004346:	bf00      	nop
 8004348:	080055a1 	.word	0x080055a1
 800434c:	08005624 	.word	0x08005624

08004350 <_Bfree>:
 8004350:	b570      	push	{r4, r5, r6, lr}
 8004352:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004354:	4605      	mov	r5, r0
 8004356:	460c      	mov	r4, r1
 8004358:	b976      	cbnz	r6, 8004378 <_Bfree+0x28>
 800435a:	2010      	movs	r0, #16
 800435c:	f7ff ff96 	bl	800428c <malloc>
 8004360:	4602      	mov	r2, r0
 8004362:	6268      	str	r0, [r5, #36]	; 0x24
 8004364:	b920      	cbnz	r0, 8004370 <_Bfree+0x20>
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <_Bfree+0x3c>)
 8004368:	4809      	ldr	r0, [pc, #36]	; (8004390 <_Bfree+0x40>)
 800436a:	218a      	movs	r1, #138	; 0x8a
 800436c:	f000 fd04 	bl	8004d78 <__assert_func>
 8004370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004374:	6006      	str	r6, [r0, #0]
 8004376:	60c6      	str	r6, [r0, #12]
 8004378:	b13c      	cbz	r4, 800438a <_Bfree+0x3a>
 800437a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800437c:	6862      	ldr	r2, [r4, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004384:	6021      	str	r1, [r4, #0]
 8004386:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	080055a1 	.word	0x080055a1
 8004390:	08005624 	.word	0x08005624

08004394 <__multadd>:
 8004394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004398:	690d      	ldr	r5, [r1, #16]
 800439a:	4607      	mov	r7, r0
 800439c:	460c      	mov	r4, r1
 800439e:	461e      	mov	r6, r3
 80043a0:	f101 0c14 	add.w	ip, r1, #20
 80043a4:	2000      	movs	r0, #0
 80043a6:	f8dc 3000 	ldr.w	r3, [ip]
 80043aa:	b299      	uxth	r1, r3
 80043ac:	fb02 6101 	mla	r1, r2, r1, r6
 80043b0:	0c1e      	lsrs	r6, r3, #16
 80043b2:	0c0b      	lsrs	r3, r1, #16
 80043b4:	fb02 3306 	mla	r3, r2, r6, r3
 80043b8:	b289      	uxth	r1, r1
 80043ba:	3001      	adds	r0, #1
 80043bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80043c0:	4285      	cmp	r5, r0
 80043c2:	f84c 1b04 	str.w	r1, [ip], #4
 80043c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80043ca:	dcec      	bgt.n	80043a6 <__multadd+0x12>
 80043cc:	b30e      	cbz	r6, 8004412 <__multadd+0x7e>
 80043ce:	68a3      	ldr	r3, [r4, #8]
 80043d0:	42ab      	cmp	r3, r5
 80043d2:	dc19      	bgt.n	8004408 <__multadd+0x74>
 80043d4:	6861      	ldr	r1, [r4, #4]
 80043d6:	4638      	mov	r0, r7
 80043d8:	3101      	adds	r1, #1
 80043da:	f7ff ff79 	bl	80042d0 <_Balloc>
 80043de:	4680      	mov	r8, r0
 80043e0:	b928      	cbnz	r0, 80043ee <__multadd+0x5a>
 80043e2:	4602      	mov	r2, r0
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <__multadd+0x84>)
 80043e6:	480d      	ldr	r0, [pc, #52]	; (800441c <__multadd+0x88>)
 80043e8:	21b5      	movs	r1, #181	; 0xb5
 80043ea:	f000 fcc5 	bl	8004d78 <__assert_func>
 80043ee:	6922      	ldr	r2, [r4, #16]
 80043f0:	3202      	adds	r2, #2
 80043f2:	f104 010c 	add.w	r1, r4, #12
 80043f6:	0092      	lsls	r2, r2, #2
 80043f8:	300c      	adds	r0, #12
 80043fa:	f7ff ff4f 	bl	800429c <memcpy>
 80043fe:	4621      	mov	r1, r4
 8004400:	4638      	mov	r0, r7
 8004402:	f7ff ffa5 	bl	8004350 <_Bfree>
 8004406:	4644      	mov	r4, r8
 8004408:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800440c:	3501      	adds	r5, #1
 800440e:	615e      	str	r6, [r3, #20]
 8004410:	6125      	str	r5, [r4, #16]
 8004412:	4620      	mov	r0, r4
 8004414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004418:	08005613 	.word	0x08005613
 800441c:	08005624 	.word	0x08005624

08004420 <__hi0bits>:
 8004420:	0c03      	lsrs	r3, r0, #16
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	b9d3      	cbnz	r3, 800445c <__hi0bits+0x3c>
 8004426:	0400      	lsls	r0, r0, #16
 8004428:	2310      	movs	r3, #16
 800442a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800442e:	bf04      	itt	eq
 8004430:	0200      	lsleq	r0, r0, #8
 8004432:	3308      	addeq	r3, #8
 8004434:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004438:	bf04      	itt	eq
 800443a:	0100      	lsleq	r0, r0, #4
 800443c:	3304      	addeq	r3, #4
 800443e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004442:	bf04      	itt	eq
 8004444:	0080      	lsleq	r0, r0, #2
 8004446:	3302      	addeq	r3, #2
 8004448:	2800      	cmp	r0, #0
 800444a:	db05      	blt.n	8004458 <__hi0bits+0x38>
 800444c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004450:	f103 0301 	add.w	r3, r3, #1
 8004454:	bf08      	it	eq
 8004456:	2320      	moveq	r3, #32
 8004458:	4618      	mov	r0, r3
 800445a:	4770      	bx	lr
 800445c:	2300      	movs	r3, #0
 800445e:	e7e4      	b.n	800442a <__hi0bits+0xa>

08004460 <__lo0bits>:
 8004460:	6803      	ldr	r3, [r0, #0]
 8004462:	f013 0207 	ands.w	r2, r3, #7
 8004466:	4601      	mov	r1, r0
 8004468:	d00b      	beq.n	8004482 <__lo0bits+0x22>
 800446a:	07da      	lsls	r2, r3, #31
 800446c:	d423      	bmi.n	80044b6 <__lo0bits+0x56>
 800446e:	0798      	lsls	r0, r3, #30
 8004470:	bf49      	itett	mi
 8004472:	085b      	lsrmi	r3, r3, #1
 8004474:	089b      	lsrpl	r3, r3, #2
 8004476:	2001      	movmi	r0, #1
 8004478:	600b      	strmi	r3, [r1, #0]
 800447a:	bf5c      	itt	pl
 800447c:	600b      	strpl	r3, [r1, #0]
 800447e:	2002      	movpl	r0, #2
 8004480:	4770      	bx	lr
 8004482:	b298      	uxth	r0, r3
 8004484:	b9a8      	cbnz	r0, 80044b2 <__lo0bits+0x52>
 8004486:	0c1b      	lsrs	r3, r3, #16
 8004488:	2010      	movs	r0, #16
 800448a:	b2da      	uxtb	r2, r3
 800448c:	b90a      	cbnz	r2, 8004492 <__lo0bits+0x32>
 800448e:	3008      	adds	r0, #8
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	071a      	lsls	r2, r3, #28
 8004494:	bf04      	itt	eq
 8004496:	091b      	lsreq	r3, r3, #4
 8004498:	3004      	addeq	r0, #4
 800449a:	079a      	lsls	r2, r3, #30
 800449c:	bf04      	itt	eq
 800449e:	089b      	lsreq	r3, r3, #2
 80044a0:	3002      	addeq	r0, #2
 80044a2:	07da      	lsls	r2, r3, #31
 80044a4:	d403      	bmi.n	80044ae <__lo0bits+0x4e>
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	f100 0001 	add.w	r0, r0, #1
 80044ac:	d005      	beq.n	80044ba <__lo0bits+0x5a>
 80044ae:	600b      	str	r3, [r1, #0]
 80044b0:	4770      	bx	lr
 80044b2:	4610      	mov	r0, r2
 80044b4:	e7e9      	b.n	800448a <__lo0bits+0x2a>
 80044b6:	2000      	movs	r0, #0
 80044b8:	4770      	bx	lr
 80044ba:	2020      	movs	r0, #32
 80044bc:	4770      	bx	lr
	...

080044c0 <__i2b>:
 80044c0:	b510      	push	{r4, lr}
 80044c2:	460c      	mov	r4, r1
 80044c4:	2101      	movs	r1, #1
 80044c6:	f7ff ff03 	bl	80042d0 <_Balloc>
 80044ca:	4602      	mov	r2, r0
 80044cc:	b928      	cbnz	r0, 80044da <__i2b+0x1a>
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <__i2b+0x24>)
 80044d0:	4805      	ldr	r0, [pc, #20]	; (80044e8 <__i2b+0x28>)
 80044d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80044d6:	f000 fc4f 	bl	8004d78 <__assert_func>
 80044da:	2301      	movs	r3, #1
 80044dc:	6144      	str	r4, [r0, #20]
 80044de:	6103      	str	r3, [r0, #16]
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	bf00      	nop
 80044e4:	08005613 	.word	0x08005613
 80044e8:	08005624 	.word	0x08005624

080044ec <__multiply>:
 80044ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f0:	4691      	mov	r9, r2
 80044f2:	690a      	ldr	r2, [r1, #16]
 80044f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	bfb8      	it	lt
 80044fc:	460b      	movlt	r3, r1
 80044fe:	460c      	mov	r4, r1
 8004500:	bfbc      	itt	lt
 8004502:	464c      	movlt	r4, r9
 8004504:	4699      	movlt	r9, r3
 8004506:	6927      	ldr	r7, [r4, #16]
 8004508:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800450c:	68a3      	ldr	r3, [r4, #8]
 800450e:	6861      	ldr	r1, [r4, #4]
 8004510:	eb07 060a 	add.w	r6, r7, sl
 8004514:	42b3      	cmp	r3, r6
 8004516:	b085      	sub	sp, #20
 8004518:	bfb8      	it	lt
 800451a:	3101      	addlt	r1, #1
 800451c:	f7ff fed8 	bl	80042d0 <_Balloc>
 8004520:	b930      	cbnz	r0, 8004530 <__multiply+0x44>
 8004522:	4602      	mov	r2, r0
 8004524:	4b44      	ldr	r3, [pc, #272]	; (8004638 <__multiply+0x14c>)
 8004526:	4845      	ldr	r0, [pc, #276]	; (800463c <__multiply+0x150>)
 8004528:	f240 115d 	movw	r1, #349	; 0x15d
 800452c:	f000 fc24 	bl	8004d78 <__assert_func>
 8004530:	f100 0514 	add.w	r5, r0, #20
 8004534:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004538:	462b      	mov	r3, r5
 800453a:	2200      	movs	r2, #0
 800453c:	4543      	cmp	r3, r8
 800453e:	d321      	bcc.n	8004584 <__multiply+0x98>
 8004540:	f104 0314 	add.w	r3, r4, #20
 8004544:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004548:	f109 0314 	add.w	r3, r9, #20
 800454c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004550:	9202      	str	r2, [sp, #8]
 8004552:	1b3a      	subs	r2, r7, r4
 8004554:	3a15      	subs	r2, #21
 8004556:	f022 0203 	bic.w	r2, r2, #3
 800455a:	3204      	adds	r2, #4
 800455c:	f104 0115 	add.w	r1, r4, #21
 8004560:	428f      	cmp	r7, r1
 8004562:	bf38      	it	cc
 8004564:	2204      	movcc	r2, #4
 8004566:	9201      	str	r2, [sp, #4]
 8004568:	9a02      	ldr	r2, [sp, #8]
 800456a:	9303      	str	r3, [sp, #12]
 800456c:	429a      	cmp	r2, r3
 800456e:	d80c      	bhi.n	800458a <__multiply+0x9e>
 8004570:	2e00      	cmp	r6, #0
 8004572:	dd03      	ble.n	800457c <__multiply+0x90>
 8004574:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004578:	2b00      	cmp	r3, #0
 800457a:	d05a      	beq.n	8004632 <__multiply+0x146>
 800457c:	6106      	str	r6, [r0, #16]
 800457e:	b005      	add	sp, #20
 8004580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004584:	f843 2b04 	str.w	r2, [r3], #4
 8004588:	e7d8      	b.n	800453c <__multiply+0x50>
 800458a:	f8b3 a000 	ldrh.w	sl, [r3]
 800458e:	f1ba 0f00 	cmp.w	sl, #0
 8004592:	d024      	beq.n	80045de <__multiply+0xf2>
 8004594:	f104 0e14 	add.w	lr, r4, #20
 8004598:	46a9      	mov	r9, r5
 800459a:	f04f 0c00 	mov.w	ip, #0
 800459e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80045a2:	f8d9 1000 	ldr.w	r1, [r9]
 80045a6:	fa1f fb82 	uxth.w	fp, r2
 80045aa:	b289      	uxth	r1, r1
 80045ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80045b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80045b4:	f8d9 2000 	ldr.w	r2, [r9]
 80045b8:	4461      	add	r1, ip
 80045ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80045be:	fb0a c20b 	mla	r2, sl, fp, ip
 80045c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80045c6:	b289      	uxth	r1, r1
 80045c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80045cc:	4577      	cmp	r7, lr
 80045ce:	f849 1b04 	str.w	r1, [r9], #4
 80045d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80045d6:	d8e2      	bhi.n	800459e <__multiply+0xb2>
 80045d8:	9a01      	ldr	r2, [sp, #4]
 80045da:	f845 c002 	str.w	ip, [r5, r2]
 80045de:	9a03      	ldr	r2, [sp, #12]
 80045e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80045e4:	3304      	adds	r3, #4
 80045e6:	f1b9 0f00 	cmp.w	r9, #0
 80045ea:	d020      	beq.n	800462e <__multiply+0x142>
 80045ec:	6829      	ldr	r1, [r5, #0]
 80045ee:	f104 0c14 	add.w	ip, r4, #20
 80045f2:	46ae      	mov	lr, r5
 80045f4:	f04f 0a00 	mov.w	sl, #0
 80045f8:	f8bc b000 	ldrh.w	fp, [ip]
 80045fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004600:	fb09 220b 	mla	r2, r9, fp, r2
 8004604:	4492      	add	sl, r2
 8004606:	b289      	uxth	r1, r1
 8004608:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800460c:	f84e 1b04 	str.w	r1, [lr], #4
 8004610:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004614:	f8be 1000 	ldrh.w	r1, [lr]
 8004618:	0c12      	lsrs	r2, r2, #16
 800461a:	fb09 1102 	mla	r1, r9, r2, r1
 800461e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004622:	4567      	cmp	r7, ip
 8004624:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004628:	d8e6      	bhi.n	80045f8 <__multiply+0x10c>
 800462a:	9a01      	ldr	r2, [sp, #4]
 800462c:	50a9      	str	r1, [r5, r2]
 800462e:	3504      	adds	r5, #4
 8004630:	e79a      	b.n	8004568 <__multiply+0x7c>
 8004632:	3e01      	subs	r6, #1
 8004634:	e79c      	b.n	8004570 <__multiply+0x84>
 8004636:	bf00      	nop
 8004638:	08005613 	.word	0x08005613
 800463c:	08005624 	.word	0x08005624

08004640 <__pow5mult>:
 8004640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004644:	4615      	mov	r5, r2
 8004646:	f012 0203 	ands.w	r2, r2, #3
 800464a:	4606      	mov	r6, r0
 800464c:	460f      	mov	r7, r1
 800464e:	d007      	beq.n	8004660 <__pow5mult+0x20>
 8004650:	4c25      	ldr	r4, [pc, #148]	; (80046e8 <__pow5mult+0xa8>)
 8004652:	3a01      	subs	r2, #1
 8004654:	2300      	movs	r3, #0
 8004656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800465a:	f7ff fe9b 	bl	8004394 <__multadd>
 800465e:	4607      	mov	r7, r0
 8004660:	10ad      	asrs	r5, r5, #2
 8004662:	d03d      	beq.n	80046e0 <__pow5mult+0xa0>
 8004664:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004666:	b97c      	cbnz	r4, 8004688 <__pow5mult+0x48>
 8004668:	2010      	movs	r0, #16
 800466a:	f7ff fe0f 	bl	800428c <malloc>
 800466e:	4602      	mov	r2, r0
 8004670:	6270      	str	r0, [r6, #36]	; 0x24
 8004672:	b928      	cbnz	r0, 8004680 <__pow5mult+0x40>
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <__pow5mult+0xac>)
 8004676:	481e      	ldr	r0, [pc, #120]	; (80046f0 <__pow5mult+0xb0>)
 8004678:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800467c:	f000 fb7c 	bl	8004d78 <__assert_func>
 8004680:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004684:	6004      	str	r4, [r0, #0]
 8004686:	60c4      	str	r4, [r0, #12]
 8004688:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800468c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004690:	b94c      	cbnz	r4, 80046a6 <__pow5mult+0x66>
 8004692:	f240 2171 	movw	r1, #625	; 0x271
 8004696:	4630      	mov	r0, r6
 8004698:	f7ff ff12 	bl	80044c0 <__i2b>
 800469c:	2300      	movs	r3, #0
 800469e:	f8c8 0008 	str.w	r0, [r8, #8]
 80046a2:	4604      	mov	r4, r0
 80046a4:	6003      	str	r3, [r0, #0]
 80046a6:	f04f 0900 	mov.w	r9, #0
 80046aa:	07eb      	lsls	r3, r5, #31
 80046ac:	d50a      	bpl.n	80046c4 <__pow5mult+0x84>
 80046ae:	4639      	mov	r1, r7
 80046b0:	4622      	mov	r2, r4
 80046b2:	4630      	mov	r0, r6
 80046b4:	f7ff ff1a 	bl	80044ec <__multiply>
 80046b8:	4639      	mov	r1, r7
 80046ba:	4680      	mov	r8, r0
 80046bc:	4630      	mov	r0, r6
 80046be:	f7ff fe47 	bl	8004350 <_Bfree>
 80046c2:	4647      	mov	r7, r8
 80046c4:	106d      	asrs	r5, r5, #1
 80046c6:	d00b      	beq.n	80046e0 <__pow5mult+0xa0>
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	b938      	cbnz	r0, 80046dc <__pow5mult+0x9c>
 80046cc:	4622      	mov	r2, r4
 80046ce:	4621      	mov	r1, r4
 80046d0:	4630      	mov	r0, r6
 80046d2:	f7ff ff0b 	bl	80044ec <__multiply>
 80046d6:	6020      	str	r0, [r4, #0]
 80046d8:	f8c0 9000 	str.w	r9, [r0]
 80046dc:	4604      	mov	r4, r0
 80046de:	e7e4      	b.n	80046aa <__pow5mult+0x6a>
 80046e0:	4638      	mov	r0, r7
 80046e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046e6:	bf00      	nop
 80046e8:	08005770 	.word	0x08005770
 80046ec:	080055a1 	.word	0x080055a1
 80046f0:	08005624 	.word	0x08005624

080046f4 <__lshift>:
 80046f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	460c      	mov	r4, r1
 80046fa:	6849      	ldr	r1, [r1, #4]
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004702:	68a3      	ldr	r3, [r4, #8]
 8004704:	4607      	mov	r7, r0
 8004706:	4691      	mov	r9, r2
 8004708:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800470c:	f108 0601 	add.w	r6, r8, #1
 8004710:	42b3      	cmp	r3, r6
 8004712:	db0b      	blt.n	800472c <__lshift+0x38>
 8004714:	4638      	mov	r0, r7
 8004716:	f7ff fddb 	bl	80042d0 <_Balloc>
 800471a:	4605      	mov	r5, r0
 800471c:	b948      	cbnz	r0, 8004732 <__lshift+0x3e>
 800471e:	4602      	mov	r2, r0
 8004720:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <__lshift+0xd8>)
 8004722:	482b      	ldr	r0, [pc, #172]	; (80047d0 <__lshift+0xdc>)
 8004724:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004728:	f000 fb26 	bl	8004d78 <__assert_func>
 800472c:	3101      	adds	r1, #1
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	e7ee      	b.n	8004710 <__lshift+0x1c>
 8004732:	2300      	movs	r3, #0
 8004734:	f100 0114 	add.w	r1, r0, #20
 8004738:	f100 0210 	add.w	r2, r0, #16
 800473c:	4618      	mov	r0, r3
 800473e:	4553      	cmp	r3, sl
 8004740:	db37      	blt.n	80047b2 <__lshift+0xbe>
 8004742:	6920      	ldr	r0, [r4, #16]
 8004744:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004748:	f104 0314 	add.w	r3, r4, #20
 800474c:	f019 091f 	ands.w	r9, r9, #31
 8004750:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004754:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004758:	d02f      	beq.n	80047ba <__lshift+0xc6>
 800475a:	f1c9 0e20 	rsb	lr, r9, #32
 800475e:	468a      	mov	sl, r1
 8004760:	f04f 0c00 	mov.w	ip, #0
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	fa02 f209 	lsl.w	r2, r2, r9
 800476a:	ea42 020c 	orr.w	r2, r2, ip
 800476e:	f84a 2b04 	str.w	r2, [sl], #4
 8004772:	f853 2b04 	ldr.w	r2, [r3], #4
 8004776:	4298      	cmp	r0, r3
 8004778:	fa22 fc0e 	lsr.w	ip, r2, lr
 800477c:	d8f2      	bhi.n	8004764 <__lshift+0x70>
 800477e:	1b03      	subs	r3, r0, r4
 8004780:	3b15      	subs	r3, #21
 8004782:	f023 0303 	bic.w	r3, r3, #3
 8004786:	3304      	adds	r3, #4
 8004788:	f104 0215 	add.w	r2, r4, #21
 800478c:	4290      	cmp	r0, r2
 800478e:	bf38      	it	cc
 8004790:	2304      	movcc	r3, #4
 8004792:	f841 c003 	str.w	ip, [r1, r3]
 8004796:	f1bc 0f00 	cmp.w	ip, #0
 800479a:	d001      	beq.n	80047a0 <__lshift+0xac>
 800479c:	f108 0602 	add.w	r6, r8, #2
 80047a0:	3e01      	subs	r6, #1
 80047a2:	4638      	mov	r0, r7
 80047a4:	612e      	str	r6, [r5, #16]
 80047a6:	4621      	mov	r1, r4
 80047a8:	f7ff fdd2 	bl	8004350 <_Bfree>
 80047ac:	4628      	mov	r0, r5
 80047ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80047b6:	3301      	adds	r3, #1
 80047b8:	e7c1      	b.n	800473e <__lshift+0x4a>
 80047ba:	3904      	subs	r1, #4
 80047bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80047c4:	4298      	cmp	r0, r3
 80047c6:	d8f9      	bhi.n	80047bc <__lshift+0xc8>
 80047c8:	e7ea      	b.n	80047a0 <__lshift+0xac>
 80047ca:	bf00      	nop
 80047cc:	08005613 	.word	0x08005613
 80047d0:	08005624 	.word	0x08005624

080047d4 <__mcmp>:
 80047d4:	b530      	push	{r4, r5, lr}
 80047d6:	6902      	ldr	r2, [r0, #16]
 80047d8:	690c      	ldr	r4, [r1, #16]
 80047da:	1b12      	subs	r2, r2, r4
 80047dc:	d10e      	bne.n	80047fc <__mcmp+0x28>
 80047de:	f100 0314 	add.w	r3, r0, #20
 80047e2:	3114      	adds	r1, #20
 80047e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80047e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80047ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80047f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80047f4:	42a5      	cmp	r5, r4
 80047f6:	d003      	beq.n	8004800 <__mcmp+0x2c>
 80047f8:	d305      	bcc.n	8004806 <__mcmp+0x32>
 80047fa:	2201      	movs	r2, #1
 80047fc:	4610      	mov	r0, r2
 80047fe:	bd30      	pop	{r4, r5, pc}
 8004800:	4283      	cmp	r3, r0
 8004802:	d3f3      	bcc.n	80047ec <__mcmp+0x18>
 8004804:	e7fa      	b.n	80047fc <__mcmp+0x28>
 8004806:	f04f 32ff 	mov.w	r2, #4294967295
 800480a:	e7f7      	b.n	80047fc <__mcmp+0x28>

0800480c <__mdiff>:
 800480c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004810:	460c      	mov	r4, r1
 8004812:	4606      	mov	r6, r0
 8004814:	4611      	mov	r1, r2
 8004816:	4620      	mov	r0, r4
 8004818:	4690      	mov	r8, r2
 800481a:	f7ff ffdb 	bl	80047d4 <__mcmp>
 800481e:	1e05      	subs	r5, r0, #0
 8004820:	d110      	bne.n	8004844 <__mdiff+0x38>
 8004822:	4629      	mov	r1, r5
 8004824:	4630      	mov	r0, r6
 8004826:	f7ff fd53 	bl	80042d0 <_Balloc>
 800482a:	b930      	cbnz	r0, 800483a <__mdiff+0x2e>
 800482c:	4b3a      	ldr	r3, [pc, #232]	; (8004918 <__mdiff+0x10c>)
 800482e:	4602      	mov	r2, r0
 8004830:	f240 2132 	movw	r1, #562	; 0x232
 8004834:	4839      	ldr	r0, [pc, #228]	; (800491c <__mdiff+0x110>)
 8004836:	f000 fa9f 	bl	8004d78 <__assert_func>
 800483a:	2301      	movs	r3, #1
 800483c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004844:	bfa4      	itt	ge
 8004846:	4643      	movge	r3, r8
 8004848:	46a0      	movge	r8, r4
 800484a:	4630      	mov	r0, r6
 800484c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004850:	bfa6      	itte	ge
 8004852:	461c      	movge	r4, r3
 8004854:	2500      	movge	r5, #0
 8004856:	2501      	movlt	r5, #1
 8004858:	f7ff fd3a 	bl	80042d0 <_Balloc>
 800485c:	b920      	cbnz	r0, 8004868 <__mdiff+0x5c>
 800485e:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <__mdiff+0x10c>)
 8004860:	4602      	mov	r2, r0
 8004862:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004866:	e7e5      	b.n	8004834 <__mdiff+0x28>
 8004868:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800486c:	6926      	ldr	r6, [r4, #16]
 800486e:	60c5      	str	r5, [r0, #12]
 8004870:	f104 0914 	add.w	r9, r4, #20
 8004874:	f108 0514 	add.w	r5, r8, #20
 8004878:	f100 0e14 	add.w	lr, r0, #20
 800487c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004880:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004884:	f108 0210 	add.w	r2, r8, #16
 8004888:	46f2      	mov	sl, lr
 800488a:	2100      	movs	r1, #0
 800488c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004890:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004894:	fa1f f883 	uxth.w	r8, r3
 8004898:	fa11 f18b 	uxtah	r1, r1, fp
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	eba1 0808 	sub.w	r8, r1, r8
 80048a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80048a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80048aa:	fa1f f888 	uxth.w	r8, r8
 80048ae:	1419      	asrs	r1, r3, #16
 80048b0:	454e      	cmp	r6, r9
 80048b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80048b6:	f84a 3b04 	str.w	r3, [sl], #4
 80048ba:	d8e7      	bhi.n	800488c <__mdiff+0x80>
 80048bc:	1b33      	subs	r3, r6, r4
 80048be:	3b15      	subs	r3, #21
 80048c0:	f023 0303 	bic.w	r3, r3, #3
 80048c4:	3304      	adds	r3, #4
 80048c6:	3415      	adds	r4, #21
 80048c8:	42a6      	cmp	r6, r4
 80048ca:	bf38      	it	cc
 80048cc:	2304      	movcc	r3, #4
 80048ce:	441d      	add	r5, r3
 80048d0:	4473      	add	r3, lr
 80048d2:	469e      	mov	lr, r3
 80048d4:	462e      	mov	r6, r5
 80048d6:	4566      	cmp	r6, ip
 80048d8:	d30e      	bcc.n	80048f8 <__mdiff+0xec>
 80048da:	f10c 0203 	add.w	r2, ip, #3
 80048de:	1b52      	subs	r2, r2, r5
 80048e0:	f022 0203 	bic.w	r2, r2, #3
 80048e4:	3d03      	subs	r5, #3
 80048e6:	45ac      	cmp	ip, r5
 80048e8:	bf38      	it	cc
 80048ea:	2200      	movcc	r2, #0
 80048ec:	441a      	add	r2, r3
 80048ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80048f2:	b17b      	cbz	r3, 8004914 <__mdiff+0x108>
 80048f4:	6107      	str	r7, [r0, #16]
 80048f6:	e7a3      	b.n	8004840 <__mdiff+0x34>
 80048f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80048fc:	fa11 f288 	uxtah	r2, r1, r8
 8004900:	1414      	asrs	r4, r2, #16
 8004902:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004906:	b292      	uxth	r2, r2
 8004908:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800490c:	f84e 2b04 	str.w	r2, [lr], #4
 8004910:	1421      	asrs	r1, r4, #16
 8004912:	e7e0      	b.n	80048d6 <__mdiff+0xca>
 8004914:	3f01      	subs	r7, #1
 8004916:	e7ea      	b.n	80048ee <__mdiff+0xe2>
 8004918:	08005613 	.word	0x08005613
 800491c:	08005624 	.word	0x08005624

08004920 <__d2b>:
 8004920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004924:	4689      	mov	r9, r1
 8004926:	2101      	movs	r1, #1
 8004928:	ec57 6b10 	vmov	r6, r7, d0
 800492c:	4690      	mov	r8, r2
 800492e:	f7ff fccf 	bl	80042d0 <_Balloc>
 8004932:	4604      	mov	r4, r0
 8004934:	b930      	cbnz	r0, 8004944 <__d2b+0x24>
 8004936:	4602      	mov	r2, r0
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <__d2b+0xb0>)
 800493a:	4826      	ldr	r0, [pc, #152]	; (80049d4 <__d2b+0xb4>)
 800493c:	f240 310a 	movw	r1, #778	; 0x30a
 8004940:	f000 fa1a 	bl	8004d78 <__assert_func>
 8004944:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004948:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800494c:	bb35      	cbnz	r5, 800499c <__d2b+0x7c>
 800494e:	2e00      	cmp	r6, #0
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	d028      	beq.n	80049a6 <__d2b+0x86>
 8004954:	4668      	mov	r0, sp
 8004956:	9600      	str	r6, [sp, #0]
 8004958:	f7ff fd82 	bl	8004460 <__lo0bits>
 800495c:	9900      	ldr	r1, [sp, #0]
 800495e:	b300      	cbz	r0, 80049a2 <__d2b+0x82>
 8004960:	9a01      	ldr	r2, [sp, #4]
 8004962:	f1c0 0320 	rsb	r3, r0, #32
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	430b      	orrs	r3, r1
 800496c:	40c2      	lsrs	r2, r0
 800496e:	6163      	str	r3, [r4, #20]
 8004970:	9201      	str	r2, [sp, #4]
 8004972:	9b01      	ldr	r3, [sp, #4]
 8004974:	61a3      	str	r3, [r4, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf14      	ite	ne
 800497a:	2202      	movne	r2, #2
 800497c:	2201      	moveq	r2, #1
 800497e:	6122      	str	r2, [r4, #16]
 8004980:	b1d5      	cbz	r5, 80049b8 <__d2b+0x98>
 8004982:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004986:	4405      	add	r5, r0
 8004988:	f8c9 5000 	str.w	r5, [r9]
 800498c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004990:	f8c8 0000 	str.w	r0, [r8]
 8004994:	4620      	mov	r0, r4
 8004996:	b003      	add	sp, #12
 8004998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800499c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a0:	e7d5      	b.n	800494e <__d2b+0x2e>
 80049a2:	6161      	str	r1, [r4, #20]
 80049a4:	e7e5      	b.n	8004972 <__d2b+0x52>
 80049a6:	a801      	add	r0, sp, #4
 80049a8:	f7ff fd5a 	bl	8004460 <__lo0bits>
 80049ac:	9b01      	ldr	r3, [sp, #4]
 80049ae:	6163      	str	r3, [r4, #20]
 80049b0:	2201      	movs	r2, #1
 80049b2:	6122      	str	r2, [r4, #16]
 80049b4:	3020      	adds	r0, #32
 80049b6:	e7e3      	b.n	8004980 <__d2b+0x60>
 80049b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80049bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80049c0:	f8c9 0000 	str.w	r0, [r9]
 80049c4:	6918      	ldr	r0, [r3, #16]
 80049c6:	f7ff fd2b 	bl	8004420 <__hi0bits>
 80049ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80049ce:	e7df      	b.n	8004990 <__d2b+0x70>
 80049d0:	08005613 	.word	0x08005613
 80049d4:	08005624 	.word	0x08005624

080049d8 <_calloc_r>:
 80049d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049da:	fba1 2402 	umull	r2, r4, r1, r2
 80049de:	b94c      	cbnz	r4, 80049f4 <_calloc_r+0x1c>
 80049e0:	4611      	mov	r1, r2
 80049e2:	9201      	str	r2, [sp, #4]
 80049e4:	f7fd ff8a 	bl	80028fc <_malloc_r>
 80049e8:	9a01      	ldr	r2, [sp, #4]
 80049ea:	4605      	mov	r5, r0
 80049ec:	b930      	cbnz	r0, 80049fc <_calloc_r+0x24>
 80049ee:	4628      	mov	r0, r5
 80049f0:	b003      	add	sp, #12
 80049f2:	bd30      	pop	{r4, r5, pc}
 80049f4:	220c      	movs	r2, #12
 80049f6:	6002      	str	r2, [r0, #0]
 80049f8:	2500      	movs	r5, #0
 80049fa:	e7f8      	b.n	80049ee <_calloc_r+0x16>
 80049fc:	4621      	mov	r1, r4
 80049fe:	f7fd ff54 	bl	80028aa <memset>
 8004a02:	e7f4      	b.n	80049ee <_calloc_r+0x16>

08004a04 <_free_r>:
 8004a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a06:	2900      	cmp	r1, #0
 8004a08:	d044      	beq.n	8004a94 <_free_r+0x90>
 8004a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a0e:	9001      	str	r0, [sp, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f1a1 0404 	sub.w	r4, r1, #4
 8004a16:	bfb8      	it	lt
 8004a18:	18e4      	addlt	r4, r4, r3
 8004a1a:	f7ff fc4d 	bl	80042b8 <__malloc_lock>
 8004a1e:	4a1e      	ldr	r2, [pc, #120]	; (8004a98 <_free_r+0x94>)
 8004a20:	9801      	ldr	r0, [sp, #4]
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	b933      	cbnz	r3, 8004a34 <_free_r+0x30>
 8004a26:	6063      	str	r3, [r4, #4]
 8004a28:	6014      	str	r4, [r2, #0]
 8004a2a:	b003      	add	sp, #12
 8004a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a30:	f7ff bc48 	b.w	80042c4 <__malloc_unlock>
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d908      	bls.n	8004a4a <_free_r+0x46>
 8004a38:	6825      	ldr	r5, [r4, #0]
 8004a3a:	1961      	adds	r1, r4, r5
 8004a3c:	428b      	cmp	r3, r1
 8004a3e:	bf01      	itttt	eq
 8004a40:	6819      	ldreq	r1, [r3, #0]
 8004a42:	685b      	ldreq	r3, [r3, #4]
 8004a44:	1949      	addeq	r1, r1, r5
 8004a46:	6021      	streq	r1, [r4, #0]
 8004a48:	e7ed      	b.n	8004a26 <_free_r+0x22>
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	b10b      	cbz	r3, 8004a54 <_free_r+0x50>
 8004a50:	42a3      	cmp	r3, r4
 8004a52:	d9fa      	bls.n	8004a4a <_free_r+0x46>
 8004a54:	6811      	ldr	r1, [r2, #0]
 8004a56:	1855      	adds	r5, r2, r1
 8004a58:	42a5      	cmp	r5, r4
 8004a5a:	d10b      	bne.n	8004a74 <_free_r+0x70>
 8004a5c:	6824      	ldr	r4, [r4, #0]
 8004a5e:	4421      	add	r1, r4
 8004a60:	1854      	adds	r4, r2, r1
 8004a62:	42a3      	cmp	r3, r4
 8004a64:	6011      	str	r1, [r2, #0]
 8004a66:	d1e0      	bne.n	8004a2a <_free_r+0x26>
 8004a68:	681c      	ldr	r4, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	6053      	str	r3, [r2, #4]
 8004a6e:	4421      	add	r1, r4
 8004a70:	6011      	str	r1, [r2, #0]
 8004a72:	e7da      	b.n	8004a2a <_free_r+0x26>
 8004a74:	d902      	bls.n	8004a7c <_free_r+0x78>
 8004a76:	230c      	movs	r3, #12
 8004a78:	6003      	str	r3, [r0, #0]
 8004a7a:	e7d6      	b.n	8004a2a <_free_r+0x26>
 8004a7c:	6825      	ldr	r5, [r4, #0]
 8004a7e:	1961      	adds	r1, r4, r5
 8004a80:	428b      	cmp	r3, r1
 8004a82:	bf04      	itt	eq
 8004a84:	6819      	ldreq	r1, [r3, #0]
 8004a86:	685b      	ldreq	r3, [r3, #4]
 8004a88:	6063      	str	r3, [r4, #4]
 8004a8a:	bf04      	itt	eq
 8004a8c:	1949      	addeq	r1, r1, r5
 8004a8e:	6021      	streq	r1, [r4, #0]
 8004a90:	6054      	str	r4, [r2, #4]
 8004a92:	e7ca      	b.n	8004a2a <_free_r+0x26>
 8004a94:	b003      	add	sp, #12
 8004a96:	bd30      	pop	{r4, r5, pc}
 8004a98:	20000358 	.word	0x20000358

08004a9c <__ssputs_r>:
 8004a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	688e      	ldr	r6, [r1, #8]
 8004aa2:	429e      	cmp	r6, r3
 8004aa4:	4682      	mov	sl, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	4690      	mov	r8, r2
 8004aaa:	461f      	mov	r7, r3
 8004aac:	d838      	bhi.n	8004b20 <__ssputs_r+0x84>
 8004aae:	898a      	ldrh	r2, [r1, #12]
 8004ab0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ab4:	d032      	beq.n	8004b1c <__ssputs_r+0x80>
 8004ab6:	6825      	ldr	r5, [r4, #0]
 8004ab8:	6909      	ldr	r1, [r1, #16]
 8004aba:	eba5 0901 	sub.w	r9, r5, r1
 8004abe:	6965      	ldr	r5, [r4, #20]
 8004ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ac8:	3301      	adds	r3, #1
 8004aca:	444b      	add	r3, r9
 8004acc:	106d      	asrs	r5, r5, #1
 8004ace:	429d      	cmp	r5, r3
 8004ad0:	bf38      	it	cc
 8004ad2:	461d      	movcc	r5, r3
 8004ad4:	0553      	lsls	r3, r2, #21
 8004ad6:	d531      	bpl.n	8004b3c <__ssputs_r+0xa0>
 8004ad8:	4629      	mov	r1, r5
 8004ada:	f7fd ff0f 	bl	80028fc <_malloc_r>
 8004ade:	4606      	mov	r6, r0
 8004ae0:	b950      	cbnz	r0, 8004af8 <__ssputs_r+0x5c>
 8004ae2:	230c      	movs	r3, #12
 8004ae4:	f8ca 3000 	str.w	r3, [sl]
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af8:	6921      	ldr	r1, [r4, #16]
 8004afa:	464a      	mov	r2, r9
 8004afc:	f7ff fbce 	bl	800429c <memcpy>
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	6126      	str	r6, [r4, #16]
 8004b0e:	6165      	str	r5, [r4, #20]
 8004b10:	444e      	add	r6, r9
 8004b12:	eba5 0509 	sub.w	r5, r5, r9
 8004b16:	6026      	str	r6, [r4, #0]
 8004b18:	60a5      	str	r5, [r4, #8]
 8004b1a:	463e      	mov	r6, r7
 8004b1c:	42be      	cmp	r6, r7
 8004b1e:	d900      	bls.n	8004b22 <__ssputs_r+0x86>
 8004b20:	463e      	mov	r6, r7
 8004b22:	6820      	ldr	r0, [r4, #0]
 8004b24:	4632      	mov	r2, r6
 8004b26:	4641      	mov	r1, r8
 8004b28:	f000 f968 	bl	8004dfc <memmove>
 8004b2c:	68a3      	ldr	r3, [r4, #8]
 8004b2e:	1b9b      	subs	r3, r3, r6
 8004b30:	60a3      	str	r3, [r4, #8]
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	4433      	add	r3, r6
 8004b36:	6023      	str	r3, [r4, #0]
 8004b38:	2000      	movs	r0, #0
 8004b3a:	e7db      	b.n	8004af4 <__ssputs_r+0x58>
 8004b3c:	462a      	mov	r2, r5
 8004b3e:	f000 f977 	bl	8004e30 <_realloc_r>
 8004b42:	4606      	mov	r6, r0
 8004b44:	2800      	cmp	r0, #0
 8004b46:	d1e1      	bne.n	8004b0c <__ssputs_r+0x70>
 8004b48:	6921      	ldr	r1, [r4, #16]
 8004b4a:	4650      	mov	r0, sl
 8004b4c:	f7ff ff5a 	bl	8004a04 <_free_r>
 8004b50:	e7c7      	b.n	8004ae2 <__ssputs_r+0x46>
	...

08004b54 <_svfiprintf_r>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	4698      	mov	r8, r3
 8004b5a:	898b      	ldrh	r3, [r1, #12]
 8004b5c:	061b      	lsls	r3, r3, #24
 8004b5e:	b09d      	sub	sp, #116	; 0x74
 8004b60:	4607      	mov	r7, r0
 8004b62:	460d      	mov	r5, r1
 8004b64:	4614      	mov	r4, r2
 8004b66:	d50e      	bpl.n	8004b86 <_svfiprintf_r+0x32>
 8004b68:	690b      	ldr	r3, [r1, #16]
 8004b6a:	b963      	cbnz	r3, 8004b86 <_svfiprintf_r+0x32>
 8004b6c:	2140      	movs	r1, #64	; 0x40
 8004b6e:	f7fd fec5 	bl	80028fc <_malloc_r>
 8004b72:	6028      	str	r0, [r5, #0]
 8004b74:	6128      	str	r0, [r5, #16]
 8004b76:	b920      	cbnz	r0, 8004b82 <_svfiprintf_r+0x2e>
 8004b78:	230c      	movs	r3, #12
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	e0d1      	b.n	8004d26 <_svfiprintf_r+0x1d2>
 8004b82:	2340      	movs	r3, #64	; 0x40
 8004b84:	616b      	str	r3, [r5, #20]
 8004b86:	2300      	movs	r3, #0
 8004b88:	9309      	str	r3, [sp, #36]	; 0x24
 8004b8a:	2320      	movs	r3, #32
 8004b8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b94:	2330      	movs	r3, #48	; 0x30
 8004b96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d40 <_svfiprintf_r+0x1ec>
 8004b9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b9e:	f04f 0901 	mov.w	r9, #1
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	469a      	mov	sl, r3
 8004ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004baa:	b10a      	cbz	r2, 8004bb0 <_svfiprintf_r+0x5c>
 8004bac:	2a25      	cmp	r2, #37	; 0x25
 8004bae:	d1f9      	bne.n	8004ba4 <_svfiprintf_r+0x50>
 8004bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8004bb4:	d00b      	beq.n	8004bce <_svfiprintf_r+0x7a>
 8004bb6:	465b      	mov	r3, fp
 8004bb8:	4622      	mov	r2, r4
 8004bba:	4629      	mov	r1, r5
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	f7ff ff6d 	bl	8004a9c <__ssputs_r>
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	f000 80aa 	beq.w	8004d1c <_svfiprintf_r+0x1c8>
 8004bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bca:	445a      	add	r2, fp
 8004bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8004bce:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80a2 	beq.w	8004d1c <_svfiprintf_r+0x1c8>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f04f 32ff 	mov.w	r2, #4294967295
 8004bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004be2:	f10a 0a01 	add.w	sl, sl, #1
 8004be6:	9304      	str	r3, [sp, #16]
 8004be8:	9307      	str	r3, [sp, #28]
 8004bea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bee:	931a      	str	r3, [sp, #104]	; 0x68
 8004bf0:	4654      	mov	r4, sl
 8004bf2:	2205      	movs	r2, #5
 8004bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf8:	4851      	ldr	r0, [pc, #324]	; (8004d40 <_svfiprintf_r+0x1ec>)
 8004bfa:	f7fb fb11 	bl	8000220 <memchr>
 8004bfe:	9a04      	ldr	r2, [sp, #16]
 8004c00:	b9d8      	cbnz	r0, 8004c3a <_svfiprintf_r+0xe6>
 8004c02:	06d0      	lsls	r0, r2, #27
 8004c04:	bf44      	itt	mi
 8004c06:	2320      	movmi	r3, #32
 8004c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c0c:	0711      	lsls	r1, r2, #28
 8004c0e:	bf44      	itt	mi
 8004c10:	232b      	movmi	r3, #43	; 0x2b
 8004c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c16:	f89a 3000 	ldrb.w	r3, [sl]
 8004c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c1c:	d015      	beq.n	8004c4a <_svfiprintf_r+0xf6>
 8004c1e:	9a07      	ldr	r2, [sp, #28]
 8004c20:	4654      	mov	r4, sl
 8004c22:	2000      	movs	r0, #0
 8004c24:	f04f 0c0a 	mov.w	ip, #10
 8004c28:	4621      	mov	r1, r4
 8004c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c2e:	3b30      	subs	r3, #48	; 0x30
 8004c30:	2b09      	cmp	r3, #9
 8004c32:	d94e      	bls.n	8004cd2 <_svfiprintf_r+0x17e>
 8004c34:	b1b0      	cbz	r0, 8004c64 <_svfiprintf_r+0x110>
 8004c36:	9207      	str	r2, [sp, #28]
 8004c38:	e014      	b.n	8004c64 <_svfiprintf_r+0x110>
 8004c3a:	eba0 0308 	sub.w	r3, r0, r8
 8004c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c42:	4313      	orrs	r3, r2
 8004c44:	9304      	str	r3, [sp, #16]
 8004c46:	46a2      	mov	sl, r4
 8004c48:	e7d2      	b.n	8004bf0 <_svfiprintf_r+0x9c>
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	1d19      	adds	r1, r3, #4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	9103      	str	r1, [sp, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bfbb      	ittet	lt
 8004c56:	425b      	neglt	r3, r3
 8004c58:	f042 0202 	orrlt.w	r2, r2, #2
 8004c5c:	9307      	strge	r3, [sp, #28]
 8004c5e:	9307      	strlt	r3, [sp, #28]
 8004c60:	bfb8      	it	lt
 8004c62:	9204      	strlt	r2, [sp, #16]
 8004c64:	7823      	ldrb	r3, [r4, #0]
 8004c66:	2b2e      	cmp	r3, #46	; 0x2e
 8004c68:	d10c      	bne.n	8004c84 <_svfiprintf_r+0x130>
 8004c6a:	7863      	ldrb	r3, [r4, #1]
 8004c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c6e:	d135      	bne.n	8004cdc <_svfiprintf_r+0x188>
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	1d1a      	adds	r2, r3, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	9203      	str	r2, [sp, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bfb8      	it	lt
 8004c7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c80:	3402      	adds	r4, #2
 8004c82:	9305      	str	r3, [sp, #20]
 8004c84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d50 <_svfiprintf_r+0x1fc>
 8004c88:	7821      	ldrb	r1, [r4, #0]
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	4650      	mov	r0, sl
 8004c8e:	f7fb fac7 	bl	8000220 <memchr>
 8004c92:	b140      	cbz	r0, 8004ca6 <_svfiprintf_r+0x152>
 8004c94:	2340      	movs	r3, #64	; 0x40
 8004c96:	eba0 000a 	sub.w	r0, r0, sl
 8004c9a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c9e:	9b04      	ldr	r3, [sp, #16]
 8004ca0:	4303      	orrs	r3, r0
 8004ca2:	3401      	adds	r4, #1
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004caa:	4826      	ldr	r0, [pc, #152]	; (8004d44 <_svfiprintf_r+0x1f0>)
 8004cac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cb0:	2206      	movs	r2, #6
 8004cb2:	f7fb fab5 	bl	8000220 <memchr>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d038      	beq.n	8004d2c <_svfiprintf_r+0x1d8>
 8004cba:	4b23      	ldr	r3, [pc, #140]	; (8004d48 <_svfiprintf_r+0x1f4>)
 8004cbc:	bb1b      	cbnz	r3, 8004d06 <_svfiprintf_r+0x1b2>
 8004cbe:	9b03      	ldr	r3, [sp, #12]
 8004cc0:	3307      	adds	r3, #7
 8004cc2:	f023 0307 	bic.w	r3, r3, #7
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	9303      	str	r3, [sp, #12]
 8004cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ccc:	4433      	add	r3, r6
 8004cce:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd0:	e767      	b.n	8004ba2 <_svfiprintf_r+0x4e>
 8004cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	2001      	movs	r0, #1
 8004cda:	e7a5      	b.n	8004c28 <_svfiprintf_r+0xd4>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	3401      	adds	r4, #1
 8004ce0:	9305      	str	r3, [sp, #20]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f04f 0c0a 	mov.w	ip, #10
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cee:	3a30      	subs	r2, #48	; 0x30
 8004cf0:	2a09      	cmp	r2, #9
 8004cf2:	d903      	bls.n	8004cfc <_svfiprintf_r+0x1a8>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0c5      	beq.n	8004c84 <_svfiprintf_r+0x130>
 8004cf8:	9105      	str	r1, [sp, #20]
 8004cfa:	e7c3      	b.n	8004c84 <_svfiprintf_r+0x130>
 8004cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d00:	4604      	mov	r4, r0
 8004d02:	2301      	movs	r3, #1
 8004d04:	e7f0      	b.n	8004ce8 <_svfiprintf_r+0x194>
 8004d06:	ab03      	add	r3, sp, #12
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	462a      	mov	r2, r5
 8004d0c:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <_svfiprintf_r+0x1f8>)
 8004d0e:	a904      	add	r1, sp, #16
 8004d10:	4638      	mov	r0, r7
 8004d12:	f7fd ff07 	bl	8002b24 <_printf_float>
 8004d16:	1c42      	adds	r2, r0, #1
 8004d18:	4606      	mov	r6, r0
 8004d1a:	d1d6      	bne.n	8004cca <_svfiprintf_r+0x176>
 8004d1c:	89ab      	ldrh	r3, [r5, #12]
 8004d1e:	065b      	lsls	r3, r3, #25
 8004d20:	f53f af2c 	bmi.w	8004b7c <_svfiprintf_r+0x28>
 8004d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d26:	b01d      	add	sp, #116	; 0x74
 8004d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2c:	ab03      	add	r3, sp, #12
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	462a      	mov	r2, r5
 8004d32:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <_svfiprintf_r+0x1f8>)
 8004d34:	a904      	add	r1, sp, #16
 8004d36:	4638      	mov	r0, r7
 8004d38:	f7fe f998 	bl	800306c <_printf_i>
 8004d3c:	e7eb      	b.n	8004d16 <_svfiprintf_r+0x1c2>
 8004d3e:	bf00      	nop
 8004d40:	0800577c 	.word	0x0800577c
 8004d44:	08005786 	.word	0x08005786
 8004d48:	08002b25 	.word	0x08002b25
 8004d4c:	08004a9d 	.word	0x08004a9d
 8004d50:	08005782 	.word	0x08005782

08004d54 <_read_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	4d07      	ldr	r5, [pc, #28]	; (8004d74 <_read_r+0x20>)
 8004d58:	4604      	mov	r4, r0
 8004d5a:	4608      	mov	r0, r1
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	2200      	movs	r2, #0
 8004d60:	602a      	str	r2, [r5, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f7fd fb4b 	bl	80023fe <_read>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d102      	bne.n	8004d72 <_read_r+0x1e>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	b103      	cbz	r3, 8004d72 <_read_r+0x1e>
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	20000360 	.word	0x20000360

08004d78 <__assert_func>:
 8004d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d7a:	4614      	mov	r4, r2
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <__assert_func+0x2c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4605      	mov	r5, r0
 8004d84:	68d8      	ldr	r0, [r3, #12]
 8004d86:	b14c      	cbz	r4, 8004d9c <__assert_func+0x24>
 8004d88:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <__assert_func+0x30>)
 8004d8a:	9100      	str	r1, [sp, #0]
 8004d8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d90:	4906      	ldr	r1, [pc, #24]	; (8004dac <__assert_func+0x34>)
 8004d92:	462b      	mov	r3, r5
 8004d94:	f000 f80e 	bl	8004db4 <fiprintf>
 8004d98:	f000 faa0 	bl	80052dc <abort>
 8004d9c:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <__assert_func+0x38>)
 8004d9e:	461c      	mov	r4, r3
 8004da0:	e7f3      	b.n	8004d8a <__assert_func+0x12>
 8004da2:	bf00      	nop
 8004da4:	20000010 	.word	0x20000010
 8004da8:	0800578d 	.word	0x0800578d
 8004dac:	0800579a 	.word	0x0800579a
 8004db0:	080057c8 	.word	0x080057c8

08004db4 <fiprintf>:
 8004db4:	b40e      	push	{r1, r2, r3}
 8004db6:	b503      	push	{r0, r1, lr}
 8004db8:	4601      	mov	r1, r0
 8004dba:	ab03      	add	r3, sp, #12
 8004dbc:	4805      	ldr	r0, [pc, #20]	; (8004dd4 <fiprintf+0x20>)
 8004dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dc2:	6800      	ldr	r0, [r0, #0]
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	f000 f88b 	bl	8004ee0 <_vfiprintf_r>
 8004dca:	b002      	add	sp, #8
 8004dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dd0:	b003      	add	sp, #12
 8004dd2:	4770      	bx	lr
 8004dd4:	20000010 	.word	0x20000010

08004dd8 <__ascii_mbtowc>:
 8004dd8:	b082      	sub	sp, #8
 8004dda:	b901      	cbnz	r1, 8004dde <__ascii_mbtowc+0x6>
 8004ddc:	a901      	add	r1, sp, #4
 8004dde:	b142      	cbz	r2, 8004df2 <__ascii_mbtowc+0x1a>
 8004de0:	b14b      	cbz	r3, 8004df6 <__ascii_mbtowc+0x1e>
 8004de2:	7813      	ldrb	r3, [r2, #0]
 8004de4:	600b      	str	r3, [r1, #0]
 8004de6:	7812      	ldrb	r2, [r2, #0]
 8004de8:	1e10      	subs	r0, r2, #0
 8004dea:	bf18      	it	ne
 8004dec:	2001      	movne	r0, #1
 8004dee:	b002      	add	sp, #8
 8004df0:	4770      	bx	lr
 8004df2:	4610      	mov	r0, r2
 8004df4:	e7fb      	b.n	8004dee <__ascii_mbtowc+0x16>
 8004df6:	f06f 0001 	mvn.w	r0, #1
 8004dfa:	e7f8      	b.n	8004dee <__ascii_mbtowc+0x16>

08004dfc <memmove>:
 8004dfc:	4288      	cmp	r0, r1
 8004dfe:	b510      	push	{r4, lr}
 8004e00:	eb01 0402 	add.w	r4, r1, r2
 8004e04:	d902      	bls.n	8004e0c <memmove+0x10>
 8004e06:	4284      	cmp	r4, r0
 8004e08:	4623      	mov	r3, r4
 8004e0a:	d807      	bhi.n	8004e1c <memmove+0x20>
 8004e0c:	1e43      	subs	r3, r0, #1
 8004e0e:	42a1      	cmp	r1, r4
 8004e10:	d008      	beq.n	8004e24 <memmove+0x28>
 8004e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e1a:	e7f8      	b.n	8004e0e <memmove+0x12>
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4601      	mov	r1, r0
 8004e20:	428a      	cmp	r2, r1
 8004e22:	d100      	bne.n	8004e26 <memmove+0x2a>
 8004e24:	bd10      	pop	{r4, pc}
 8004e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e2e:	e7f7      	b.n	8004e20 <memmove+0x24>

08004e30 <_realloc_r>:
 8004e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e34:	4680      	mov	r8, r0
 8004e36:	4614      	mov	r4, r2
 8004e38:	460e      	mov	r6, r1
 8004e3a:	b921      	cbnz	r1, 8004e46 <_realloc_r+0x16>
 8004e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e40:	4611      	mov	r1, r2
 8004e42:	f7fd bd5b 	b.w	80028fc <_malloc_r>
 8004e46:	b92a      	cbnz	r2, 8004e54 <_realloc_r+0x24>
 8004e48:	f7ff fddc 	bl	8004a04 <_free_r>
 8004e4c:	4625      	mov	r5, r4
 8004e4e:	4628      	mov	r0, r5
 8004e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e54:	f000 faae 	bl	80053b4 <_malloc_usable_size_r>
 8004e58:	4284      	cmp	r4, r0
 8004e5a:	4607      	mov	r7, r0
 8004e5c:	d802      	bhi.n	8004e64 <_realloc_r+0x34>
 8004e5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e62:	d812      	bhi.n	8004e8a <_realloc_r+0x5a>
 8004e64:	4621      	mov	r1, r4
 8004e66:	4640      	mov	r0, r8
 8004e68:	f7fd fd48 	bl	80028fc <_malloc_r>
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d0ed      	beq.n	8004e4e <_realloc_r+0x1e>
 8004e72:	42bc      	cmp	r4, r7
 8004e74:	4622      	mov	r2, r4
 8004e76:	4631      	mov	r1, r6
 8004e78:	bf28      	it	cs
 8004e7a:	463a      	movcs	r2, r7
 8004e7c:	f7ff fa0e 	bl	800429c <memcpy>
 8004e80:	4631      	mov	r1, r6
 8004e82:	4640      	mov	r0, r8
 8004e84:	f7ff fdbe 	bl	8004a04 <_free_r>
 8004e88:	e7e1      	b.n	8004e4e <_realloc_r+0x1e>
 8004e8a:	4635      	mov	r5, r6
 8004e8c:	e7df      	b.n	8004e4e <_realloc_r+0x1e>

08004e8e <__sfputc_r>:
 8004e8e:	6893      	ldr	r3, [r2, #8]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	b410      	push	{r4}
 8004e96:	6093      	str	r3, [r2, #8]
 8004e98:	da08      	bge.n	8004eac <__sfputc_r+0x1e>
 8004e9a:	6994      	ldr	r4, [r2, #24]
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	db01      	blt.n	8004ea4 <__sfputc_r+0x16>
 8004ea0:	290a      	cmp	r1, #10
 8004ea2:	d103      	bne.n	8004eac <__sfputc_r+0x1e>
 8004ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea8:	f000 b94a 	b.w	8005140 <__swbuf_r>
 8004eac:	6813      	ldr	r3, [r2, #0]
 8004eae:	1c58      	adds	r0, r3, #1
 8004eb0:	6010      	str	r0, [r2, #0]
 8004eb2:	7019      	strb	r1, [r3, #0]
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <__sfputs_r>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	460f      	mov	r7, r1
 8004ec2:	4614      	mov	r4, r2
 8004ec4:	18d5      	adds	r5, r2, r3
 8004ec6:	42ac      	cmp	r4, r5
 8004ec8:	d101      	bne.n	8004ece <__sfputs_r+0x12>
 8004eca:	2000      	movs	r0, #0
 8004ecc:	e007      	b.n	8004ede <__sfputs_r+0x22>
 8004ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed2:	463a      	mov	r2, r7
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	f7ff ffda 	bl	8004e8e <__sfputc_r>
 8004eda:	1c43      	adds	r3, r0, #1
 8004edc:	d1f3      	bne.n	8004ec6 <__sfputs_r+0xa>
 8004ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ee0 <_vfiprintf_r>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	460d      	mov	r5, r1
 8004ee6:	b09d      	sub	sp, #116	; 0x74
 8004ee8:	4614      	mov	r4, r2
 8004eea:	4698      	mov	r8, r3
 8004eec:	4606      	mov	r6, r0
 8004eee:	b118      	cbz	r0, 8004ef8 <_vfiprintf_r+0x18>
 8004ef0:	6983      	ldr	r3, [r0, #24]
 8004ef2:	b90b      	cbnz	r3, 8004ef8 <_vfiprintf_r+0x18>
 8004ef4:	f7fd fc14 	bl	8002720 <__sinit>
 8004ef8:	4b89      	ldr	r3, [pc, #548]	; (8005120 <_vfiprintf_r+0x240>)
 8004efa:	429d      	cmp	r5, r3
 8004efc:	d11b      	bne.n	8004f36 <_vfiprintf_r+0x56>
 8004efe:	6875      	ldr	r5, [r6, #4]
 8004f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f02:	07d9      	lsls	r1, r3, #31
 8004f04:	d405      	bmi.n	8004f12 <_vfiprintf_r+0x32>
 8004f06:	89ab      	ldrh	r3, [r5, #12]
 8004f08:	059a      	lsls	r2, r3, #22
 8004f0a:	d402      	bmi.n	8004f12 <_vfiprintf_r+0x32>
 8004f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f0e:	f7fd fcca 	bl	80028a6 <__retarget_lock_acquire_recursive>
 8004f12:	89ab      	ldrh	r3, [r5, #12]
 8004f14:	071b      	lsls	r3, r3, #28
 8004f16:	d501      	bpl.n	8004f1c <_vfiprintf_r+0x3c>
 8004f18:	692b      	ldr	r3, [r5, #16]
 8004f1a:	b9eb      	cbnz	r3, 8004f58 <_vfiprintf_r+0x78>
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f000 f96e 	bl	8005200 <__swsetup_r>
 8004f24:	b1c0      	cbz	r0, 8004f58 <_vfiprintf_r+0x78>
 8004f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f28:	07dc      	lsls	r4, r3, #31
 8004f2a:	d50e      	bpl.n	8004f4a <_vfiprintf_r+0x6a>
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	b01d      	add	sp, #116	; 0x74
 8004f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f36:	4b7b      	ldr	r3, [pc, #492]	; (8005124 <_vfiprintf_r+0x244>)
 8004f38:	429d      	cmp	r5, r3
 8004f3a:	d101      	bne.n	8004f40 <_vfiprintf_r+0x60>
 8004f3c:	68b5      	ldr	r5, [r6, #8]
 8004f3e:	e7df      	b.n	8004f00 <_vfiprintf_r+0x20>
 8004f40:	4b79      	ldr	r3, [pc, #484]	; (8005128 <_vfiprintf_r+0x248>)
 8004f42:	429d      	cmp	r5, r3
 8004f44:	bf08      	it	eq
 8004f46:	68f5      	ldreq	r5, [r6, #12]
 8004f48:	e7da      	b.n	8004f00 <_vfiprintf_r+0x20>
 8004f4a:	89ab      	ldrh	r3, [r5, #12]
 8004f4c:	0598      	lsls	r0, r3, #22
 8004f4e:	d4ed      	bmi.n	8004f2c <_vfiprintf_r+0x4c>
 8004f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f52:	f7fd fca9 	bl	80028a8 <__retarget_lock_release_recursive>
 8004f56:	e7e9      	b.n	8004f2c <_vfiprintf_r+0x4c>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f5c:	2320      	movs	r3, #32
 8004f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f66:	2330      	movs	r3, #48	; 0x30
 8004f68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800512c <_vfiprintf_r+0x24c>
 8004f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f70:	f04f 0901 	mov.w	r9, #1
 8004f74:	4623      	mov	r3, r4
 8004f76:	469a      	mov	sl, r3
 8004f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f7c:	b10a      	cbz	r2, 8004f82 <_vfiprintf_r+0xa2>
 8004f7e:	2a25      	cmp	r2, #37	; 0x25
 8004f80:	d1f9      	bne.n	8004f76 <_vfiprintf_r+0x96>
 8004f82:	ebba 0b04 	subs.w	fp, sl, r4
 8004f86:	d00b      	beq.n	8004fa0 <_vfiprintf_r+0xc0>
 8004f88:	465b      	mov	r3, fp
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f7ff ff94 	bl	8004ebc <__sfputs_r>
 8004f94:	3001      	adds	r0, #1
 8004f96:	f000 80aa 	beq.w	80050ee <_vfiprintf_r+0x20e>
 8004f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f9c:	445a      	add	r2, fp
 8004f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8004fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80a2 	beq.w	80050ee <_vfiprintf_r+0x20e>
 8004faa:	2300      	movs	r3, #0
 8004fac:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fb4:	f10a 0a01 	add.w	sl, sl, #1
 8004fb8:	9304      	str	r3, [sp, #16]
 8004fba:	9307      	str	r3, [sp, #28]
 8004fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8004fc2:	4654      	mov	r4, sl
 8004fc4:	2205      	movs	r2, #5
 8004fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fca:	4858      	ldr	r0, [pc, #352]	; (800512c <_vfiprintf_r+0x24c>)
 8004fcc:	f7fb f928 	bl	8000220 <memchr>
 8004fd0:	9a04      	ldr	r2, [sp, #16]
 8004fd2:	b9d8      	cbnz	r0, 800500c <_vfiprintf_r+0x12c>
 8004fd4:	06d1      	lsls	r1, r2, #27
 8004fd6:	bf44      	itt	mi
 8004fd8:	2320      	movmi	r3, #32
 8004fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fde:	0713      	lsls	r3, r2, #28
 8004fe0:	bf44      	itt	mi
 8004fe2:	232b      	movmi	r3, #43	; 0x2b
 8004fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8004fec:	2b2a      	cmp	r3, #42	; 0x2a
 8004fee:	d015      	beq.n	800501c <_vfiprintf_r+0x13c>
 8004ff0:	9a07      	ldr	r2, [sp, #28]
 8004ff2:	4654      	mov	r4, sl
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f04f 0c0a 	mov.w	ip, #10
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005000:	3b30      	subs	r3, #48	; 0x30
 8005002:	2b09      	cmp	r3, #9
 8005004:	d94e      	bls.n	80050a4 <_vfiprintf_r+0x1c4>
 8005006:	b1b0      	cbz	r0, 8005036 <_vfiprintf_r+0x156>
 8005008:	9207      	str	r2, [sp, #28]
 800500a:	e014      	b.n	8005036 <_vfiprintf_r+0x156>
 800500c:	eba0 0308 	sub.w	r3, r0, r8
 8005010:	fa09 f303 	lsl.w	r3, r9, r3
 8005014:	4313      	orrs	r3, r2
 8005016:	9304      	str	r3, [sp, #16]
 8005018:	46a2      	mov	sl, r4
 800501a:	e7d2      	b.n	8004fc2 <_vfiprintf_r+0xe2>
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	1d19      	adds	r1, r3, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	9103      	str	r1, [sp, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	bfbb      	ittet	lt
 8005028:	425b      	neglt	r3, r3
 800502a:	f042 0202 	orrlt.w	r2, r2, #2
 800502e:	9307      	strge	r3, [sp, #28]
 8005030:	9307      	strlt	r3, [sp, #28]
 8005032:	bfb8      	it	lt
 8005034:	9204      	strlt	r2, [sp, #16]
 8005036:	7823      	ldrb	r3, [r4, #0]
 8005038:	2b2e      	cmp	r3, #46	; 0x2e
 800503a:	d10c      	bne.n	8005056 <_vfiprintf_r+0x176>
 800503c:	7863      	ldrb	r3, [r4, #1]
 800503e:	2b2a      	cmp	r3, #42	; 0x2a
 8005040:	d135      	bne.n	80050ae <_vfiprintf_r+0x1ce>
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	1d1a      	adds	r2, r3, #4
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	9203      	str	r2, [sp, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	bfb8      	it	lt
 800504e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005052:	3402      	adds	r4, #2
 8005054:	9305      	str	r3, [sp, #20]
 8005056:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800513c <_vfiprintf_r+0x25c>
 800505a:	7821      	ldrb	r1, [r4, #0]
 800505c:	2203      	movs	r2, #3
 800505e:	4650      	mov	r0, sl
 8005060:	f7fb f8de 	bl	8000220 <memchr>
 8005064:	b140      	cbz	r0, 8005078 <_vfiprintf_r+0x198>
 8005066:	2340      	movs	r3, #64	; 0x40
 8005068:	eba0 000a 	sub.w	r0, r0, sl
 800506c:	fa03 f000 	lsl.w	r0, r3, r0
 8005070:	9b04      	ldr	r3, [sp, #16]
 8005072:	4303      	orrs	r3, r0
 8005074:	3401      	adds	r4, #1
 8005076:	9304      	str	r3, [sp, #16]
 8005078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800507c:	482c      	ldr	r0, [pc, #176]	; (8005130 <_vfiprintf_r+0x250>)
 800507e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005082:	2206      	movs	r2, #6
 8005084:	f7fb f8cc 	bl	8000220 <memchr>
 8005088:	2800      	cmp	r0, #0
 800508a:	d03f      	beq.n	800510c <_vfiprintf_r+0x22c>
 800508c:	4b29      	ldr	r3, [pc, #164]	; (8005134 <_vfiprintf_r+0x254>)
 800508e:	bb1b      	cbnz	r3, 80050d8 <_vfiprintf_r+0x1f8>
 8005090:	9b03      	ldr	r3, [sp, #12]
 8005092:	3307      	adds	r3, #7
 8005094:	f023 0307 	bic.w	r3, r3, #7
 8005098:	3308      	adds	r3, #8
 800509a:	9303      	str	r3, [sp, #12]
 800509c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509e:	443b      	add	r3, r7
 80050a0:	9309      	str	r3, [sp, #36]	; 0x24
 80050a2:	e767      	b.n	8004f74 <_vfiprintf_r+0x94>
 80050a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80050a8:	460c      	mov	r4, r1
 80050aa:	2001      	movs	r0, #1
 80050ac:	e7a5      	b.n	8004ffa <_vfiprintf_r+0x11a>
 80050ae:	2300      	movs	r3, #0
 80050b0:	3401      	adds	r4, #1
 80050b2:	9305      	str	r3, [sp, #20]
 80050b4:	4619      	mov	r1, r3
 80050b6:	f04f 0c0a 	mov.w	ip, #10
 80050ba:	4620      	mov	r0, r4
 80050bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050c0:	3a30      	subs	r2, #48	; 0x30
 80050c2:	2a09      	cmp	r2, #9
 80050c4:	d903      	bls.n	80050ce <_vfiprintf_r+0x1ee>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0c5      	beq.n	8005056 <_vfiprintf_r+0x176>
 80050ca:	9105      	str	r1, [sp, #20]
 80050cc:	e7c3      	b.n	8005056 <_vfiprintf_r+0x176>
 80050ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80050d2:	4604      	mov	r4, r0
 80050d4:	2301      	movs	r3, #1
 80050d6:	e7f0      	b.n	80050ba <_vfiprintf_r+0x1da>
 80050d8:	ab03      	add	r3, sp, #12
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	462a      	mov	r2, r5
 80050de:	4b16      	ldr	r3, [pc, #88]	; (8005138 <_vfiprintf_r+0x258>)
 80050e0:	a904      	add	r1, sp, #16
 80050e2:	4630      	mov	r0, r6
 80050e4:	f7fd fd1e 	bl	8002b24 <_printf_float>
 80050e8:	4607      	mov	r7, r0
 80050ea:	1c78      	adds	r0, r7, #1
 80050ec:	d1d6      	bne.n	800509c <_vfiprintf_r+0x1bc>
 80050ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050f0:	07d9      	lsls	r1, r3, #31
 80050f2:	d405      	bmi.n	8005100 <_vfiprintf_r+0x220>
 80050f4:	89ab      	ldrh	r3, [r5, #12]
 80050f6:	059a      	lsls	r2, r3, #22
 80050f8:	d402      	bmi.n	8005100 <_vfiprintf_r+0x220>
 80050fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050fc:	f7fd fbd4 	bl	80028a8 <__retarget_lock_release_recursive>
 8005100:	89ab      	ldrh	r3, [r5, #12]
 8005102:	065b      	lsls	r3, r3, #25
 8005104:	f53f af12 	bmi.w	8004f2c <_vfiprintf_r+0x4c>
 8005108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800510a:	e711      	b.n	8004f30 <_vfiprintf_r+0x50>
 800510c:	ab03      	add	r3, sp, #12
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	462a      	mov	r2, r5
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <_vfiprintf_r+0x258>)
 8005114:	a904      	add	r1, sp, #16
 8005116:	4630      	mov	r0, r6
 8005118:	f7fd ffa8 	bl	800306c <_printf_i>
 800511c:	e7e4      	b.n	80050e8 <_vfiprintf_r+0x208>
 800511e:	bf00      	nop
 8005120:	0800551c 	.word	0x0800551c
 8005124:	0800553c 	.word	0x0800553c
 8005128:	080054fc 	.word	0x080054fc
 800512c:	0800577c 	.word	0x0800577c
 8005130:	08005786 	.word	0x08005786
 8005134:	08002b25 	.word	0x08002b25
 8005138:	08004ebd 	.word	0x08004ebd
 800513c:	08005782 	.word	0x08005782

08005140 <__swbuf_r>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	460e      	mov	r6, r1
 8005144:	4614      	mov	r4, r2
 8005146:	4605      	mov	r5, r0
 8005148:	b118      	cbz	r0, 8005152 <__swbuf_r+0x12>
 800514a:	6983      	ldr	r3, [r0, #24]
 800514c:	b90b      	cbnz	r3, 8005152 <__swbuf_r+0x12>
 800514e:	f7fd fae7 	bl	8002720 <__sinit>
 8005152:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <__swbuf_r+0x98>)
 8005154:	429c      	cmp	r4, r3
 8005156:	d12b      	bne.n	80051b0 <__swbuf_r+0x70>
 8005158:	686c      	ldr	r4, [r5, #4]
 800515a:	69a3      	ldr	r3, [r4, #24]
 800515c:	60a3      	str	r3, [r4, #8]
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	071a      	lsls	r2, r3, #28
 8005162:	d52f      	bpl.n	80051c4 <__swbuf_r+0x84>
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	b36b      	cbz	r3, 80051c4 <__swbuf_r+0x84>
 8005168:	6923      	ldr	r3, [r4, #16]
 800516a:	6820      	ldr	r0, [r4, #0]
 800516c:	1ac0      	subs	r0, r0, r3
 800516e:	6963      	ldr	r3, [r4, #20]
 8005170:	b2f6      	uxtb	r6, r6
 8005172:	4283      	cmp	r3, r0
 8005174:	4637      	mov	r7, r6
 8005176:	dc04      	bgt.n	8005182 <__swbuf_r+0x42>
 8005178:	4621      	mov	r1, r4
 800517a:	4628      	mov	r0, r5
 800517c:	f7ff f834 	bl	80041e8 <_fflush_r>
 8005180:	bb30      	cbnz	r0, 80051d0 <__swbuf_r+0x90>
 8005182:	68a3      	ldr	r3, [r4, #8]
 8005184:	3b01      	subs	r3, #1
 8005186:	60a3      	str	r3, [r4, #8]
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	6022      	str	r2, [r4, #0]
 800518e:	701e      	strb	r6, [r3, #0]
 8005190:	6963      	ldr	r3, [r4, #20]
 8005192:	3001      	adds	r0, #1
 8005194:	4283      	cmp	r3, r0
 8005196:	d004      	beq.n	80051a2 <__swbuf_r+0x62>
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	07db      	lsls	r3, r3, #31
 800519c:	d506      	bpl.n	80051ac <__swbuf_r+0x6c>
 800519e:	2e0a      	cmp	r6, #10
 80051a0:	d104      	bne.n	80051ac <__swbuf_r+0x6c>
 80051a2:	4621      	mov	r1, r4
 80051a4:	4628      	mov	r0, r5
 80051a6:	f7ff f81f 	bl	80041e8 <_fflush_r>
 80051aa:	b988      	cbnz	r0, 80051d0 <__swbuf_r+0x90>
 80051ac:	4638      	mov	r0, r7
 80051ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b0:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <__swbuf_r+0x9c>)
 80051b2:	429c      	cmp	r4, r3
 80051b4:	d101      	bne.n	80051ba <__swbuf_r+0x7a>
 80051b6:	68ac      	ldr	r4, [r5, #8]
 80051b8:	e7cf      	b.n	800515a <__swbuf_r+0x1a>
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <__swbuf_r+0xa0>)
 80051bc:	429c      	cmp	r4, r3
 80051be:	bf08      	it	eq
 80051c0:	68ec      	ldreq	r4, [r5, #12]
 80051c2:	e7ca      	b.n	800515a <__swbuf_r+0x1a>
 80051c4:	4621      	mov	r1, r4
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 f81a 	bl	8005200 <__swsetup_r>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d0cb      	beq.n	8005168 <__swbuf_r+0x28>
 80051d0:	f04f 37ff 	mov.w	r7, #4294967295
 80051d4:	e7ea      	b.n	80051ac <__swbuf_r+0x6c>
 80051d6:	bf00      	nop
 80051d8:	0800551c 	.word	0x0800551c
 80051dc:	0800553c 	.word	0x0800553c
 80051e0:	080054fc 	.word	0x080054fc

080051e4 <__ascii_wctomb>:
 80051e4:	b149      	cbz	r1, 80051fa <__ascii_wctomb+0x16>
 80051e6:	2aff      	cmp	r2, #255	; 0xff
 80051e8:	bf85      	ittet	hi
 80051ea:	238a      	movhi	r3, #138	; 0x8a
 80051ec:	6003      	strhi	r3, [r0, #0]
 80051ee:	700a      	strbls	r2, [r1, #0]
 80051f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80051f4:	bf98      	it	ls
 80051f6:	2001      	movls	r0, #1
 80051f8:	4770      	bx	lr
 80051fa:	4608      	mov	r0, r1
 80051fc:	4770      	bx	lr
	...

08005200 <__swsetup_r>:
 8005200:	4b32      	ldr	r3, [pc, #200]	; (80052cc <__swsetup_r+0xcc>)
 8005202:	b570      	push	{r4, r5, r6, lr}
 8005204:	681d      	ldr	r5, [r3, #0]
 8005206:	4606      	mov	r6, r0
 8005208:	460c      	mov	r4, r1
 800520a:	b125      	cbz	r5, 8005216 <__swsetup_r+0x16>
 800520c:	69ab      	ldr	r3, [r5, #24]
 800520e:	b913      	cbnz	r3, 8005216 <__swsetup_r+0x16>
 8005210:	4628      	mov	r0, r5
 8005212:	f7fd fa85 	bl	8002720 <__sinit>
 8005216:	4b2e      	ldr	r3, [pc, #184]	; (80052d0 <__swsetup_r+0xd0>)
 8005218:	429c      	cmp	r4, r3
 800521a:	d10f      	bne.n	800523c <__swsetup_r+0x3c>
 800521c:	686c      	ldr	r4, [r5, #4]
 800521e:	89a3      	ldrh	r3, [r4, #12]
 8005220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005224:	0719      	lsls	r1, r3, #28
 8005226:	d42c      	bmi.n	8005282 <__swsetup_r+0x82>
 8005228:	06dd      	lsls	r5, r3, #27
 800522a:	d411      	bmi.n	8005250 <__swsetup_r+0x50>
 800522c:	2309      	movs	r3, #9
 800522e:	6033      	str	r3, [r6, #0]
 8005230:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005234:	81a3      	strh	r3, [r4, #12]
 8005236:	f04f 30ff 	mov.w	r0, #4294967295
 800523a:	e03e      	b.n	80052ba <__swsetup_r+0xba>
 800523c:	4b25      	ldr	r3, [pc, #148]	; (80052d4 <__swsetup_r+0xd4>)
 800523e:	429c      	cmp	r4, r3
 8005240:	d101      	bne.n	8005246 <__swsetup_r+0x46>
 8005242:	68ac      	ldr	r4, [r5, #8]
 8005244:	e7eb      	b.n	800521e <__swsetup_r+0x1e>
 8005246:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <__swsetup_r+0xd8>)
 8005248:	429c      	cmp	r4, r3
 800524a:	bf08      	it	eq
 800524c:	68ec      	ldreq	r4, [r5, #12]
 800524e:	e7e6      	b.n	800521e <__swsetup_r+0x1e>
 8005250:	0758      	lsls	r0, r3, #29
 8005252:	d512      	bpl.n	800527a <__swsetup_r+0x7a>
 8005254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005256:	b141      	cbz	r1, 800526a <__swsetup_r+0x6a>
 8005258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800525c:	4299      	cmp	r1, r3
 800525e:	d002      	beq.n	8005266 <__swsetup_r+0x66>
 8005260:	4630      	mov	r0, r6
 8005262:	f7ff fbcf 	bl	8004a04 <_free_r>
 8005266:	2300      	movs	r3, #0
 8005268:	6363      	str	r3, [r4, #52]	; 0x34
 800526a:	89a3      	ldrh	r3, [r4, #12]
 800526c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	2300      	movs	r3, #0
 8005274:	6063      	str	r3, [r4, #4]
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	f043 0308 	orr.w	r3, r3, #8
 8005280:	81a3      	strh	r3, [r4, #12]
 8005282:	6923      	ldr	r3, [r4, #16]
 8005284:	b94b      	cbnz	r3, 800529a <__swsetup_r+0x9a>
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800528c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005290:	d003      	beq.n	800529a <__swsetup_r+0x9a>
 8005292:	4621      	mov	r1, r4
 8005294:	4630      	mov	r0, r6
 8005296:	f000 f84d 	bl	8005334 <__smakebuf_r>
 800529a:	89a0      	ldrh	r0, [r4, #12]
 800529c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052a0:	f010 0301 	ands.w	r3, r0, #1
 80052a4:	d00a      	beq.n	80052bc <__swsetup_r+0xbc>
 80052a6:	2300      	movs	r3, #0
 80052a8:	60a3      	str	r3, [r4, #8]
 80052aa:	6963      	ldr	r3, [r4, #20]
 80052ac:	425b      	negs	r3, r3
 80052ae:	61a3      	str	r3, [r4, #24]
 80052b0:	6923      	ldr	r3, [r4, #16]
 80052b2:	b943      	cbnz	r3, 80052c6 <__swsetup_r+0xc6>
 80052b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052b8:	d1ba      	bne.n	8005230 <__swsetup_r+0x30>
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	0781      	lsls	r1, r0, #30
 80052be:	bf58      	it	pl
 80052c0:	6963      	ldrpl	r3, [r4, #20]
 80052c2:	60a3      	str	r3, [r4, #8]
 80052c4:	e7f4      	b.n	80052b0 <__swsetup_r+0xb0>
 80052c6:	2000      	movs	r0, #0
 80052c8:	e7f7      	b.n	80052ba <__swsetup_r+0xba>
 80052ca:	bf00      	nop
 80052cc:	20000010 	.word	0x20000010
 80052d0:	0800551c 	.word	0x0800551c
 80052d4:	0800553c 	.word	0x0800553c
 80052d8:	080054fc 	.word	0x080054fc

080052dc <abort>:
 80052dc:	b508      	push	{r3, lr}
 80052de:	2006      	movs	r0, #6
 80052e0:	f000 f898 	bl	8005414 <raise>
 80052e4:	2001      	movs	r0, #1
 80052e6:	f000 f8db 	bl	80054a0 <_exit>

080052ea <__swhatbuf_r>:
 80052ea:	b570      	push	{r4, r5, r6, lr}
 80052ec:	460e      	mov	r6, r1
 80052ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f2:	2900      	cmp	r1, #0
 80052f4:	b096      	sub	sp, #88	; 0x58
 80052f6:	4614      	mov	r4, r2
 80052f8:	461d      	mov	r5, r3
 80052fa:	da08      	bge.n	800530e <__swhatbuf_r+0x24>
 80052fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	602a      	str	r2, [r5, #0]
 8005304:	061a      	lsls	r2, r3, #24
 8005306:	d410      	bmi.n	800532a <__swhatbuf_r+0x40>
 8005308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800530c:	e00e      	b.n	800532c <__swhatbuf_r+0x42>
 800530e:	466a      	mov	r2, sp
 8005310:	f000 f89c 	bl	800544c <_fstat_r>
 8005314:	2800      	cmp	r0, #0
 8005316:	dbf1      	blt.n	80052fc <__swhatbuf_r+0x12>
 8005318:	9a01      	ldr	r2, [sp, #4]
 800531a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800531e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005322:	425a      	negs	r2, r3
 8005324:	415a      	adcs	r2, r3
 8005326:	602a      	str	r2, [r5, #0]
 8005328:	e7ee      	b.n	8005308 <__swhatbuf_r+0x1e>
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	2000      	movs	r0, #0
 800532e:	6023      	str	r3, [r4, #0]
 8005330:	b016      	add	sp, #88	; 0x58
 8005332:	bd70      	pop	{r4, r5, r6, pc}

08005334 <__smakebuf_r>:
 8005334:	898b      	ldrh	r3, [r1, #12]
 8005336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005338:	079d      	lsls	r5, r3, #30
 800533a:	4606      	mov	r6, r0
 800533c:	460c      	mov	r4, r1
 800533e:	d507      	bpl.n	8005350 <__smakebuf_r+0x1c>
 8005340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	6123      	str	r3, [r4, #16]
 8005348:	2301      	movs	r3, #1
 800534a:	6163      	str	r3, [r4, #20]
 800534c:	b002      	add	sp, #8
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	ab01      	add	r3, sp, #4
 8005352:	466a      	mov	r2, sp
 8005354:	f7ff ffc9 	bl	80052ea <__swhatbuf_r>
 8005358:	9900      	ldr	r1, [sp, #0]
 800535a:	4605      	mov	r5, r0
 800535c:	4630      	mov	r0, r6
 800535e:	f7fd facd 	bl	80028fc <_malloc_r>
 8005362:	b948      	cbnz	r0, 8005378 <__smakebuf_r+0x44>
 8005364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005368:	059a      	lsls	r2, r3, #22
 800536a:	d4ef      	bmi.n	800534c <__smakebuf_r+0x18>
 800536c:	f023 0303 	bic.w	r3, r3, #3
 8005370:	f043 0302 	orr.w	r3, r3, #2
 8005374:	81a3      	strh	r3, [r4, #12]
 8005376:	e7e3      	b.n	8005340 <__smakebuf_r+0xc>
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <__smakebuf_r+0x7c>)
 800537a:	62b3      	str	r3, [r6, #40]	; 0x28
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	6020      	str	r0, [r4, #0]
 8005380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	9b00      	ldr	r3, [sp, #0]
 8005388:	6163      	str	r3, [r4, #20]
 800538a:	9b01      	ldr	r3, [sp, #4]
 800538c:	6120      	str	r0, [r4, #16]
 800538e:	b15b      	cbz	r3, 80053a8 <__smakebuf_r+0x74>
 8005390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005394:	4630      	mov	r0, r6
 8005396:	f000 f86b 	bl	8005470 <_isatty_r>
 800539a:	b128      	cbz	r0, 80053a8 <__smakebuf_r+0x74>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	89a0      	ldrh	r0, [r4, #12]
 80053aa:	4305      	orrs	r5, r0
 80053ac:	81a5      	strh	r5, [r4, #12]
 80053ae:	e7cd      	b.n	800534c <__smakebuf_r+0x18>
 80053b0:	080026b9 	.word	0x080026b9

080053b4 <_malloc_usable_size_r>:
 80053b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b8:	1f18      	subs	r0, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bfbc      	itt	lt
 80053be:	580b      	ldrlt	r3, [r1, r0]
 80053c0:	18c0      	addlt	r0, r0, r3
 80053c2:	4770      	bx	lr

080053c4 <_raise_r>:
 80053c4:	291f      	cmp	r1, #31
 80053c6:	b538      	push	{r3, r4, r5, lr}
 80053c8:	4604      	mov	r4, r0
 80053ca:	460d      	mov	r5, r1
 80053cc:	d904      	bls.n	80053d8 <_raise_r+0x14>
 80053ce:	2316      	movs	r3, #22
 80053d0:	6003      	str	r3, [r0, #0]
 80053d2:	f04f 30ff 	mov.w	r0, #4294967295
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80053da:	b112      	cbz	r2, 80053e2 <_raise_r+0x1e>
 80053dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053e0:	b94b      	cbnz	r3, 80053f6 <_raise_r+0x32>
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 f830 	bl	8005448 <_getpid_r>
 80053e8:	462a      	mov	r2, r5
 80053ea:	4601      	mov	r1, r0
 80053ec:	4620      	mov	r0, r4
 80053ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053f2:	f000 b817 	b.w	8005424 <_kill_r>
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d00a      	beq.n	8005410 <_raise_r+0x4c>
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	d103      	bne.n	8005406 <_raise_r+0x42>
 80053fe:	2316      	movs	r3, #22
 8005400:	6003      	str	r3, [r0, #0]
 8005402:	2001      	movs	r0, #1
 8005404:	e7e7      	b.n	80053d6 <_raise_r+0x12>
 8005406:	2400      	movs	r4, #0
 8005408:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800540c:	4628      	mov	r0, r5
 800540e:	4798      	blx	r3
 8005410:	2000      	movs	r0, #0
 8005412:	e7e0      	b.n	80053d6 <_raise_r+0x12>

08005414 <raise>:
 8005414:	4b02      	ldr	r3, [pc, #8]	; (8005420 <raise+0xc>)
 8005416:	4601      	mov	r1, r0
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	f7ff bfd3 	b.w	80053c4 <_raise_r>
 800541e:	bf00      	nop
 8005420:	20000010 	.word	0x20000010

08005424 <_kill_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4d07      	ldr	r5, [pc, #28]	; (8005444 <_kill_r+0x20>)
 8005428:	2300      	movs	r3, #0
 800542a:	4604      	mov	r4, r0
 800542c:	4608      	mov	r0, r1
 800542e:	4611      	mov	r1, r2
 8005430:	602b      	str	r3, [r5, #0]
 8005432:	f000 f82d 	bl	8005490 <_kill>
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	d102      	bne.n	8005440 <_kill_r+0x1c>
 800543a:	682b      	ldr	r3, [r5, #0]
 800543c:	b103      	cbz	r3, 8005440 <_kill_r+0x1c>
 800543e:	6023      	str	r3, [r4, #0]
 8005440:	bd38      	pop	{r3, r4, r5, pc}
 8005442:	bf00      	nop
 8005444:	20000360 	.word	0x20000360

08005448 <_getpid_r>:
 8005448:	f7fd b89a 	b.w	8002580 <_getpid>

0800544c <_fstat_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d07      	ldr	r5, [pc, #28]	; (800546c <_fstat_r+0x20>)
 8005450:	2300      	movs	r3, #0
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	602b      	str	r3, [r5, #0]
 800545a:	f7fd f8d8 	bl	800260e <_fstat>
 800545e:	1c43      	adds	r3, r0, #1
 8005460:	d102      	bne.n	8005468 <_fstat_r+0x1c>
 8005462:	682b      	ldr	r3, [r5, #0]
 8005464:	b103      	cbz	r3, 8005468 <_fstat_r+0x1c>
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	bd38      	pop	{r3, r4, r5, pc}
 800546a:	bf00      	nop
 800546c:	20000360 	.word	0x20000360

08005470 <_isatty_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d06      	ldr	r5, [pc, #24]	; (800548c <_isatty_r+0x1c>)
 8005474:	2300      	movs	r3, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	f7fd f8d5 	bl	800262a <_isatty>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_isatty_r+0x1a>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_isatty_r+0x1a>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	20000360 	.word	0x20000360

08005490 <_kill>:
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <_kill+0xc>)
 8005492:	2258      	movs	r2, #88	; 0x58
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f04f 30ff 	mov.w	r0, #4294967295
 800549a:	4770      	bx	lr
 800549c:	20000360 	.word	0x20000360

080054a0 <_exit>:
 80054a0:	e7fe      	b.n	80054a0 <_exit>
	...

080054a4 <_init>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr

080054b0 <_fini>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr
