
SPI_SaveBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000920  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ae4  08000aec  00010aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ae4  08000ae4  00010aec  2**0
                  CONTENTS
  4 .ARM          00000000  08000ae4  08000ae4  00010aec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ae4  08000aec  00010aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ae4  08000ae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae8  08000ae8  00010ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000aec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000aec  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010aec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001565  00000000  00000000  00010b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000050a  00000000  00000000  0001207b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  00012588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000120  00000000  00000000  000126f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000244e  00000000  00000000  00012810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a97  00000000  00000000  00014c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008f63  00000000  00000000  000166f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001f658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004a4  00000000  00000000  0001f6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000acc 	.word	0x08000acc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000acc 	.word	0x08000acc

08000204 <SPI2_GPIOInit>:
SysTick ->CSR |= (1 << 0);
SysTick ->CSR |= (1 << 1);
SysTick ->CSR |= (1 << 2);
}

void SPI2_GPIOInit(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t ALTFN_Mode){
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
 8000210:	4613      	mov	r3, r2
 8000212:	70bb      	strb	r3, [r7, #2]
GPIO_Handle_t SPIPins;
SPIPins.pGPIOx = pGPIOx;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	60fb      	str	r3, [r7, #12]
/*configuring pin 9 to be NSS*/
SPIPins.GPIO_PinConfig.GPIO_PinNumber =  PinNumber;
 8000218:	78fb      	ldrb	r3, [r7, #3]
 800021a:	743b      	strb	r3, [r7, #16]
SPIPins.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_ALTFN;
 800021c:	2302      	movs	r3, #2
 800021e:	747b      	strb	r3, [r7, #17]
SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode   =  ALTFN_Mode;
 8000220:	78bb      	ldrb	r3, [r7, #2]
 8000222:	757b      	strb	r3, [r7, #21]
SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000224:	2300      	movs	r3, #0
 8000226:	753b      	strb	r3, [r7, #20]
SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 8000228:	2300      	movs	r3, #0
 800022a:	74fb      	strb	r3, [r7, #19]
GPIO_Init(&SPIPins);
 800022c:	f107 030c 	add.w	r3, r7, #12
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f8f5 	bl	8000420 <GPIO_Init>
}
 8000236:	bf00      	nop
 8000238:	3718      	adds	r7, #24
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <SysTick_Handler>:
void SysTick_Handler(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 8000244:	2105      	movs	r1, #5
 8000246:	4802      	ldr	r0, [pc, #8]	; (8000250 <SysTick_Handler+0x10>)
 8000248:	f000 fa3c 	bl	80006c4 <GPIO_ToggleOutputPin>
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40020000 	.word	0x40020000

08000254 <GPIO_CLKCNT>:
 *
 * @Note              -  none

 */
void GPIO_CLKCNT(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	460b      	mov	r3, r1
 800025e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000260:	78fb      	ldrb	r3, [r7, #3]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d157      	bne.n	8000316 <GPIO_CLKCNT+0xc2>
	{
	  if(pGPIOx == GPIOA){GPIOA_CLKEN;}
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4a59      	ldr	r2, [pc, #356]	; (80003d0 <GPIO_CLKCNT+0x17c>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d106      	bne.n	800027c <GPIO_CLKCNT+0x28>
 800026e:	4b59      	ldr	r3, [pc, #356]	; (80003d4 <GPIO_CLKCNT+0x180>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000272:	4a58      	ldr	r2, [pc, #352]	; (80003d4 <GPIO_CLKCNT+0x180>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6313      	str	r3, [r2, #48]	; 0x30
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
	}
}
 800027a:	e0a3      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKEN;}
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4a56      	ldr	r2, [pc, #344]	; (80003d8 <GPIO_CLKCNT+0x184>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d106      	bne.n	8000292 <GPIO_CLKCNT+0x3e>
 8000284:	4b53      	ldr	r3, [pc, #332]	; (80003d4 <GPIO_CLKCNT+0x180>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a52      	ldr	r2, [pc, #328]	; (80003d4 <GPIO_CLKCNT+0x180>)
 800028a:	f043 0302 	orr.w	r3, r3, #2
 800028e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000290:	e098      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKEN;}
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a51      	ldr	r2, [pc, #324]	; (80003dc <GPIO_CLKCNT+0x188>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d106      	bne.n	80002a8 <GPIO_CLKCNT+0x54>
 800029a:	4b4e      	ldr	r3, [pc, #312]	; (80003d4 <GPIO_CLKCNT+0x180>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029e:	4a4d      	ldr	r2, [pc, #308]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80002a0:	f043 0304 	orr.w	r3, r3, #4
 80002a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a6:	e08d      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKEN;}
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a4d      	ldr	r2, [pc, #308]	; (80003e0 <GPIO_CLKCNT+0x18c>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d106      	bne.n	80002be <GPIO_CLKCNT+0x6a>
 80002b0:	4b48      	ldr	r3, [pc, #288]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b4:	4a47      	ldr	r2, [pc, #284]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002bc:	e082      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKEN;}
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a48      	ldr	r2, [pc, #288]	; (80003e4 <GPIO_CLKCNT+0x190>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d106      	bne.n	80002d4 <GPIO_CLKCNT+0x80>
 80002c6:	4b43      	ldr	r3, [pc, #268]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ca:	4a42      	ldr	r2, [pc, #264]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80002cc:	f043 0310 	orr.w	r3, r3, #16
 80002d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d2:	e077      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKEN;}
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a44      	ldr	r2, [pc, #272]	; (80003e8 <GPIO_CLKCNT+0x194>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d106      	bne.n	80002ea <GPIO_CLKCNT+0x96>
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80002de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e0:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e8:	e06c      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKEN;}
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a3f      	ldr	r2, [pc, #252]	; (80003ec <GPIO_CLKCNT+0x198>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <GPIO_CLKCNT+0xac>
 80002f2:	4b38      	ldr	r3, [pc, #224]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f6:	4a37      	ldr	r2, [pc, #220]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80002f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fe:	e061      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKEN;}
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a3b      	ldr	r2, [pc, #236]	; (80003f0 <GPIO_CLKCNT+0x19c>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d15d      	bne.n	80003c4 <GPIO_CLKCNT+0x170>
 8000308:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <GPIO_CLKCNT+0x180>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030c:	4a31      	ldr	r2, [pc, #196]	; (80003d4 <GPIO_CLKCNT+0x180>)
 800030e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000312:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000314:	e056      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  if(pGPIOx == GPIOA){GPIOA_CLKDI;}
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a2d      	ldr	r2, [pc, #180]	; (80003d0 <GPIO_CLKCNT+0x17c>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_CLKCNT+0xd8>
 800031e:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <GPIO_CLKCNT+0x180>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000322:	4a2c      	ldr	r2, [pc, #176]	; (80003d4 <GPIO_CLKCNT+0x180>)
 8000324:	f023 0301 	bic.w	r3, r3, #1
 8000328:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032a:	e04b      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKDI;}
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a2a      	ldr	r2, [pc, #168]	; (80003d8 <GPIO_CLKCNT+0x184>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_CLKCNT+0xee>
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <GPIO_CLKCNT+0x180>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000338:	4a26      	ldr	r2, [pc, #152]	; (80003d4 <GPIO_CLKCNT+0x180>)
 800033a:	f023 0302 	bic.w	r3, r3, #2
 800033e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000340:	e040      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKDI;}
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a25      	ldr	r2, [pc, #148]	; (80003dc <GPIO_CLKCNT+0x188>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_CLKCNT+0x104>
 800034a:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <GPIO_CLKCNT+0x180>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a21      	ldr	r2, [pc, #132]	; (80003d4 <GPIO_CLKCNT+0x180>)
 8000350:	f023 0304 	bic.w	r3, r3, #4
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000356:	e035      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKDI;}
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <GPIO_CLKCNT+0x18c>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_CLKCNT+0x11a>
 8000360:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <GPIO_CLKCNT+0x180>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a1b      	ldr	r2, [pc, #108]	; (80003d4 <GPIO_CLKCNT+0x180>)
 8000366:	f023 0308 	bic.w	r3, r3, #8
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036c:	e02a      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <GPIO_CLKCNT+0x190>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_CLKCNT+0x130>
 8000376:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <GPIO_CLKCNT+0x180>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	4a16      	ldr	r2, [pc, #88]	; (80003d4 <GPIO_CLKCNT+0x180>)
 800037c:	f023 0310 	bic.w	r3, r3, #16
 8000380:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000382:	e01f      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <GPIO_CLKCNT+0x194>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_CLKCNT+0x146>
 800038c:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <GPIO_CLKCNT+0x180>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <GPIO_CLKCNT+0x180>)
 8000392:	f023 0320 	bic.w	r3, r3, #32
 8000396:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000398:	e014      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <GPIO_CLKCNT+0x198>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_CLKCNT+0x15c>
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80003a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ae:	e009      	b.n	80003c4 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a0f      	ldr	r2, [pc, #60]	; (80003f0 <GPIO_CLKCNT+0x19c>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d105      	bne.n	80003c4 <GPIO_CLKCNT+0x170>
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <GPIO_CLKCNT+0x180>)
 80003be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40020000 	.word	0x40020000
 80003d4:	40023800 	.word	0x40023800
 80003d8:	40020400 	.word	0x40020400
 80003dc:	40020800 	.word	0x40020800
 80003e0:	40020c00 	.word	0x40020c00
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40021400 	.word	0x40021400
 80003ec:	40021800 	.word	0x40021800
 80003f0:	40021c00 	.word	0x40021c00

080003f4 <GPIO_PORTCODE>:
 * @return            - the code of the given port
 *
 * @Note              -

 */
uint8_t GPIO_PORTCODE(GPIO_RegDef_t *pGPIOx){
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	uint8_t volatile portcode;
	uint32_t offset = (uint32_t)((uint32_t)pGPIOx - GPIOA_BASEADDR); /*calculate the offset from the base address*/
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000402:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000406:	60fb      	str	r3, [r7, #12]
	portcode = offset / 0x400;   /*portcode will range from 0 to 8 since the offset is a multiply of 400*/
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	0a9b      	lsrs	r3, r3, #10
 800040c:	b2db      	uxtb	r3, r3
 800040e:	72fb      	strb	r3, [r7, #11]
	return portcode;
 8000410:	7afb      	ldrb	r3, [r7, #11]
 8000412:	b2db      	uxtb	r3, r3
}
 8000414:	4618      	mov	r0, r3
 8000416:	3714      	adds	r7, #20
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
	...

08000420 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_CLKCNT(pGPIOHandle->pGPIOx, ENABLE);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2101      	movs	r1, #1
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff0e 	bl	8000254 <GPIO_CLKCNT>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	2b03      	cmp	r3, #3
 800043e:	d820      	bhi.n	8000482 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	795b      	ldrb	r3, [r3, #5]
 8000444:	461a      	mov	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	791b      	ldrb	r3, [r3, #4]
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	2103      	movs	r1, #3
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	43db      	mvns	r3, r3
 8000466:	4619      	mov	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	400a      	ands	r2, r1
 800046e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	6819      	ldr	r1, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	697a      	ldr	r2, [r7, #20]
 800047c:	430a      	orrs	r2, r1
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	e084      	b.n	800058c <GPIO_Init+0x16c>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	795b      	ldrb	r3, [r3, #5]
 8000486:	2b04      	cmp	r3, #4
 8000488:	d11d      	bne.n	80004c6 <GPIO_Init+0xa6>
			/*configure the falling edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6812      	ldr	r2, [r2, #0]
 8000494:	601a      	str	r2, [r3, #0]
			EXTI ->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000496:	4b89      	ldr	r3, [pc, #548]	; (80006bc <GPIO_Init+0x29c>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	7912      	ldrb	r2, [r2, #4]
 800049e:	4611      	mov	r1, r2
 80004a0:	2201      	movs	r2, #1
 80004a2:	408a      	lsls	r2, r1
 80004a4:	43d2      	mvns	r2, r2
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a84      	ldr	r2, [pc, #528]	; (80006bc <GPIO_Init+0x29c>)
 80004aa:	400b      	ands	r3, r1
 80004ac:	6093      	str	r3, [r2, #8]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ae:	4b83      	ldr	r3, [pc, #524]	; (80006bc <GPIO_Init+0x29c>)
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	7912      	ldrb	r2, [r2, #4]
 80004b6:	4611      	mov	r1, r2
 80004b8:	2201      	movs	r2, #1
 80004ba:	408a      	lsls	r2, r1
 80004bc:	4611      	mov	r1, r2
 80004be:	4a7f      	ldr	r2, [pc, #508]	; (80006bc <GPIO_Init+0x29c>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	60d3      	str	r3, [r2, #12]
 80004c4:	e03d      	b.n	8000542 <GPIO_Init+0x122>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	795b      	ldrb	r3, [r3, #5]
 80004ca:	2b05      	cmp	r3, #5
 80004cc:	d11d      	bne.n	800050a <GPIO_Init+0xea>
			/*configure the rising edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	6812      	ldr	r2, [r2, #0]
 80004d8:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004da:	4b78      	ldr	r3, [pc, #480]	; (80006bc <GPIO_Init+0x29c>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	7912      	ldrb	r2, [r2, #4]
 80004e2:	4611      	mov	r1, r2
 80004e4:	2201      	movs	r2, #1
 80004e6:	408a      	lsls	r2, r1
 80004e8:	43d2      	mvns	r2, r2
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a73      	ldr	r2, [pc, #460]	; (80006bc <GPIO_Init+0x29c>)
 80004ee:	400b      	ands	r3, r1
 80004f0:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f2:	4b72      	ldr	r3, [pc, #456]	; (80006bc <GPIO_Init+0x29c>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	4611      	mov	r1, r2
 8000502:	4a6e      	ldr	r2, [pc, #440]	; (80006bc <GPIO_Init+0x29c>)
 8000504:	430b      	orrs	r3, r1
 8000506:	6093      	str	r3, [r2, #8]
 8000508:	e01b      	b.n	8000542 <GPIO_Init+0x122>
		}
		else{
			/*configure the falling and rising edge trigger registers*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	6812      	ldr	r2, [r2, #0]
 8000514:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000516:	4b69      	ldr	r3, [pc, #420]	; (80006bc <GPIO_Init+0x29c>)
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	7912      	ldrb	r2, [r2, #4]
 800051e:	4611      	mov	r1, r2
 8000520:	2201      	movs	r2, #1
 8000522:	408a      	lsls	r2, r1
 8000524:	4611      	mov	r1, r2
 8000526:	4a65      	ldr	r2, [pc, #404]	; (80006bc <GPIO_Init+0x29c>)
 8000528:	430b      	orrs	r3, r1
 800052a:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052c:	4b63      	ldr	r3, [pc, #396]	; (80006bc <GPIO_Init+0x29c>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	4611      	mov	r1, r2
 800053c:	4a5f      	ldr	r2, [pc, #380]	; (80006bc <GPIO_Init+0x29c>)
 800053e:	430b      	orrs	r3, r1
 8000540:	6093      	str	r3, [r2, #8]
		}

		/*configure the gpio port selection(SYSCONFIG_EXTI register)*/
		uint8_t tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	089b      	lsrs	r3, r3, #2
 8000548:	74fb      	strb	r3, [r7, #19]
		uint8_t tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	f003 0303 	and.w	r3, r3, #3
 8000552:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_PORTCODE(pGPIOHandle->pGPIOx);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff4b 	bl	80003f4 <GPIO_PORTCODE>
 800055e:	4603      	mov	r3, r0
 8000560:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[tmp1] = (portcode << tmp2 * 4);
 8000562:	7c7a      	ldrb	r2, [r7, #17]
 8000564:	7cbb      	ldrb	r3, [r7, #18]
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	fa02 f103 	lsl.w	r1, r2, r3
 800056c:	4a54      	ldr	r2, [pc, #336]	; (80006c0 <GPIO_Init+0x2a0>)
 800056e:	7cfb      	ldrb	r3, [r7, #19]
 8000570:	3302      	adds	r3, #2
 8000572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/*configure the exti interrupt delivery(interrupt mask register)*/
		EXTI ->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000576:	4b51      	ldr	r3, [pc, #324]	; (80006bc <GPIO_Init+0x29c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a4d      	ldr	r2, [pc, #308]	; (80006bc <GPIO_Init+0x29c>)
 8000588:	430b      	orrs	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	799b      	ldrb	r3, [r3, #6]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	689a      	ldr	r2, [r3, #8]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2103      	movs	r1, #3
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	400a      	ands	r2, r1
 80005ba:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6899      	ldr	r1, [r3, #8]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	79db      	ldrb	r3, [r3, #7]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68da      	ldr	r2, [r3, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	2103      	movs	r1, #3
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	400a      	ands	r2, r1
 80005fa:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	68d9      	ldr	r1, [r3, #12]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	430a      	orrs	r2, r1
 800060a:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7a1b      	ldrb	r3, [r3, #8]
 8000610:	461a      	mov	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	4619      	mov	r1, r3
 8000628:	2301      	movs	r3, #1
 800062a:	408b      	lsls	r3, r1
 800062c:	43db      	mvns	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	400a      	ands	r2, r1
 8000636:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6859      	ldr	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	430a      	orrs	r2, r1
 8000646:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	795b      	ldrb	r3, [r3, #5]
 800064c:	2b02      	cmp	r3, #2
 800064e:	d131      	bne.n	80006b4 <GPIO_Init+0x294>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	f003 0307 	and.w	r3, r3, #7
 8000660:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	7c3a      	ldrb	r2, [r7, #16]
 8000668:	3208      	adds	r2, #8
 800066a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	220f      	movs	r2, #15
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	43db      	mvns	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	7c3a      	ldrb	r2, [r7, #16]
 8000682:	4001      	ands	r1, r0
 8000684:	3208      	adds	r2, #8
 8000686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	7c3a      	ldrb	r2, [r7, #16]
 8000690:	3208      	adds	r2, #8
 8000692:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7a5b      	ldrb	r3, [r3, #9]
 800069a:	461a      	mov	r2, r3
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7c3a      	ldrb	r2, [r7, #16]
 80006ac:	4301      	orrs	r1, r0
 80006ae:	3208      	adds	r2, #8
 80006b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40013c00 	.word	0x40013c00
 80006c0:	40013800 	.word	0x40013800

080006c4 <GPIO_ToggleOutputPin>:
 *
 * @Note              -

 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	78fa      	ldrb	r2, [r7, #3]
 80006d6:	2101      	movs	r1, #1
 80006d8:	fa01 f202 	lsl.w	r2, r1, r2
 80006dc:	405a      	eors	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	615a      	str	r2, [r3, #20]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <SPI_CLKCNT>:
 * @return            -  none
 *
 * @Note              -  none

 */
void SPI_CLKCNT(SPI_type *pSPIx, uint8_t EnorDi){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d12b      	bne.n	8000756 <SPI_CLKCNT+0x6a>
	{
	  if(pSPIx == SPI1){SPI1_CLKEN;}
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a2d      	ldr	r2, [pc, #180]	; (80007b8 <SPI_CLKCNT+0xcc>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d106      	bne.n	8000714 <SPI_CLKCNT+0x28>
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <SPI_CLKCNT+0xd0>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	4a2c      	ldr	r2, [pc, #176]	; (80007bc <SPI_CLKCNT+0xd0>)
 800070c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000710:	6453      	str	r3, [r2, #68]	; 0x44
	  if(pSPIx == SPI1){SPI1_CLKDI;}
	  else if (pSPIx == SPI2){SPI2_CLKDI;}
	  else if (pSPIx == SPI3){SPI3_CLKDI;}
	  else if (pSPIx == SPI4){SPI4_CLKDI;}
	}
}
 8000712:	e04b      	b.n	80007ac <SPI_CLKCNT+0xc0>
	  else if (pSPIx == SPI2){SPI2_CLKEN;}
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a2a      	ldr	r2, [pc, #168]	; (80007c0 <SPI_CLKCNT+0xd4>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d106      	bne.n	800072a <SPI_CLKCNT+0x3e>
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <SPI_CLKCNT+0xd0>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a26      	ldr	r2, [pc, #152]	; (80007bc <SPI_CLKCNT+0xd0>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000728:	e040      	b.n	80007ac <SPI_CLKCNT+0xc0>
	  else if (pSPIx == SPI3){SPI3_CLKEN;}
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a25      	ldr	r2, [pc, #148]	; (80007c4 <SPI_CLKCNT+0xd8>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <SPI_CLKCNT+0x54>
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <SPI_CLKCNT+0xd0>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SPI_CLKCNT+0xd0>)
 8000738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800073c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800073e:	e035      	b.n	80007ac <SPI_CLKCNT+0xc0>
	  else if (pSPIx == SPI4){SPI4_CLKEN;}
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SPI_CLKCNT+0xdc>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d131      	bne.n	80007ac <SPI_CLKCNT+0xc0>
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <SPI_CLKCNT+0xd0>)
 800074a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074c:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <SPI_CLKCNT+0xd0>)
 800074e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000752:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000754:	e02a      	b.n	80007ac <SPI_CLKCNT+0xc0>
	  if(pSPIx == SPI1){SPI1_CLKDI;}
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <SPI_CLKCNT+0xcc>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <SPI_CLKCNT+0x80>
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <SPI_CLKCNT+0xd0>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a16      	ldr	r2, [pc, #88]	; (80007bc <SPI_CLKCNT+0xd0>)
 8000764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
}
 800076a:	e01f      	b.n	80007ac <SPI_CLKCNT+0xc0>
	  else if (pSPIx == SPI2){SPI2_CLKDI;}
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <SPI_CLKCNT+0xd4>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d106      	bne.n	8000782 <SPI_CLKCNT+0x96>
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SPI_CLKCNT+0xd0>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	4a10      	ldr	r2, [pc, #64]	; (80007bc <SPI_CLKCNT+0xd0>)
 800077a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800077e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000780:	e014      	b.n	80007ac <SPI_CLKCNT+0xc0>
	  else if (pSPIx == SPI3){SPI3_CLKDI;}
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <SPI_CLKCNT+0xd8>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <SPI_CLKCNT+0xac>
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <SPI_CLKCNT+0xd0>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <SPI_CLKCNT+0xd0>)
 8000790:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000796:	e009      	b.n	80007ac <SPI_CLKCNT+0xc0>
	  else if (pSPIx == SPI4){SPI4_CLKDI;}
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <SPI_CLKCNT+0xdc>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d105      	bne.n	80007ac <SPI_CLKCNT+0xc0>
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <SPI_CLKCNT+0xd0>)
 80007a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a4:	4a05      	ldr	r2, [pc, #20]	; (80007bc <SPI_CLKCNT+0xd0>)
 80007a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007aa:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40013000 	.word	0x40013000
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40003800 	.word	0x40003800
 80007c4:	40003c00 	.word	0x40003c00
 80007c8:	40013400 	.word	0x40013400

080007cc <SPI_Init>:
 * @return            -  none
 *
 * @Note              -  none

 */
void SPI_Init(SPI_Handle *pSPIHandle){
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
uint32_t temp = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
             /*configure SPI_Mode*/
temp |= (pSPIHandle->config.SPI_ModeConfig << SPI_CR1_MSTR);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]

             /*configure SPI_Bus*/
if(pSPIHandle ->config.SPI_BusConfig == SPI_BUS_FD){ /*full duplex*/
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	795b      	ldrb	r3, [r3, #5]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d104      	bne.n	80007f8 <SPI_Init+0x2c>
/*clear the bi-directional bit*/
	temp &= ~(1 << SPI_CR1_BIDIMODE);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	e010      	b.n	800081a <SPI_Init+0x4e>
}
else if(pSPIHandle ->config.SPI_BusConfig == SPI_BUS_HD){/*full duplex*/
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	795b      	ldrb	r3, [r3, #5]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d104      	bne.n	800080a <SPI_Init+0x3e>
	/*set the bi-directional bit*/
	temp |= (1 << SPI_CR1_BIDIMODE);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	e007      	b.n	800081a <SPI_Init+0x4e>
}
else{ /*simplex mode*/
	/*clear the bi-directional bit*/
	temp &= ~(1 << SPI_CR1_BIDIMODE);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000810:	60fb      	str	r3, [r7, #12]
	/*set the receive only bit*/
	temp |= (1 << SPI_CR1_RXONLY);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000818:	60fb      	str	r3, [r7, #12]

}
             /*configure SPI Clock speed (baud rate)*/
temp |= (pSPIHandle ->config.SPI_SclkSpeed << SPI_CR1_BR);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	799b      	ldrb	r3, [r3, #6]
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	461a      	mov	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	4313      	orrs	r3, r2
 8000826:	60fb      	str	r3, [r7, #12]

	        /*configure SPI DFF (Data frame format)*/
temp |= (pSPIHandle ->config.SPI_DFF << SPI_CR1_DFF);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	79db      	ldrb	r3, [r3, #7]
 800082c:	02db      	lsls	r3, r3, #11
 800082e:	461a      	mov	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4313      	orrs	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]

            /*configure SPI CPOL (polarity)*/
temp |= (pSPIHandle ->config.SPI_COPL << SPI_CR1_CPOL);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7a1b      	ldrb	r3, [r3, #8]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	461a      	mov	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	4313      	orrs	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]

            /*configure SPI CPHA (phase)*/
temp |= (pSPIHandle ->config.SPI_CPHA << SPI_CR1_CPHA);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a5b      	ldrb	r3, [r3, #9]
 8000848:	461a      	mov	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4313      	orrs	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]

             /*configure SPI SSM (Software slave management)*/
temp |= (pSPIHandle ->config.SPI_SSM << SPI_CR1_SSM);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7a9b      	ldrb	r3, [r3, #10]
 8000854:	025b      	lsls	r3, r3, #9
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4313      	orrs	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
            /*pass the configurations to the CR1 register*/
pSPIHandle ->pSPIx->CR1 = temp;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	601a      	str	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <GetFlagStatus>:
 * @return            -  none
 *
 * @Note              -  this is a blocking method

 */
uint8_t GetFlagStatus(SPI_type *pSPIx ,uint8_t FlagName){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
	if(pSPIx->SR & FlagName){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	4013      	ands	r3, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <GetFlagStatus+0x1c>
		return SET;
 8000888:	2301      	movs	r3, #1
 800088a:	e000      	b.n	800088e <GetFlagStatus+0x1e>
	}
	return RESET;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <SPI_ReceiveData>:
 * @return            -  none
 *
 * @Note              -  none

 */
void SPI_ReceiveData(SPI_type *pSPIx, uint8_t *pRXBuffer, uint32_t Len){
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 80008a4:	e02f      	b.n	8000906 <SPI_ReceiveData+0x6e>
		/*wait for busy bit to reset*/
		while(GetFlagStatus(pSPIx, SPI_BSY_FLAG) == SET);
 80008a6:	bf00      	nop
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f7ff ffe0 	bl	8000870 <GetFlagStatus>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d0f8      	beq.n	80008a8 <SPI_ReceiveData+0x10>
		/*write some dummy data*/
		pSPIx ->DR = 0xf;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	220f      	movs	r2, #15
 80008ba:	60da      	str	r2, [r3, #12]
		/*wait until the RX is not embty*/
		while(GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == RESET);
 80008bc:	bf00      	nop
 80008be:	2101      	movs	r1, #1
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f7ff ffd5 	bl	8000870 <GetFlagStatus>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d0f8      	beq.n	80008be <SPI_ReceiveData+0x26>
		/*check DFF (frame format)*/
		if((pSPIx ->CR1 & (1 << SPI_CR1_DFF))){ /*16bit format*/
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d00b      	beq.n	80008f0 <SPI_ReceiveData+0x58>
			*((uint16_t *)pRXBuffer) = pSPIx ->DR;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	b29a      	uxth	r2, r3
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	801a      	strh	r2, [r3, #0]
			Len -=2;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3b02      	subs	r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
			(uint16_t *)pRXBuffer++;
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	3301      	adds	r3, #1
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	e00a      	b.n	8000906 <SPI_ReceiveData+0x6e>
		}
		else{ /*8bit format*/
			*pRXBuffer = pSPIx ->DR;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	701a      	strb	r2, [r3, #0]
			Len --;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
			pRXBuffer++;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	3301      	adds	r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1cc      	bne.n	80008a6 <SPI_ReceiveData+0xe>
		}
	}
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <SPI_Enable>:

void SPI_IRQHandling(SPI_Handle *pSPI_Handle){

}

void SPI_Enable(SPI_type *pSPIx, uint8_t EnorDi){
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	460b      	mov	r3, r1
 8000920:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d106      	bne.n	8000936 <SPI_Enable+0x20>
	  pSPIx ->CR1 |= (1 << SPI_CR1_SPE);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	601a      	str	r2, [r3, #0]
	}else{
	  pSPIx ->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000934:	e005      	b.n	8000942 <SPI_Enable+0x2c>
	  pSPIx ->CR1 &= ~(1 << SPI_CR1_SPE);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	601a      	str	r2, [r3, #0]
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <main>:
#include <string.h>
#include "GPIO_driver.h"
#include "SPI_driver.h"
#include "bsp.h"

int main(void){
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0

	/*configuring the LED*/
	GPIO_Handle_t GPIOLed;
	GPIOLed.pGPIOx = GPIOA;
 8000952:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <main+0xd8>)
 8000954:	617b      	str	r3, [r7, #20]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber =  GPIO_PIN_NO_5;
 8000956:	2305      	movs	r3, #5
 8000958:	763b      	strb	r3, [r7, #24]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_OUT;
 800095a:	2301      	movs	r3, #1
 800095c:	767b      	strb	r3, [r7, #25]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed  =  GPIO_SPEED_FAST;
 800095e:	2302      	movs	r3, #2
 8000960:	76bb      	strb	r3, [r7, #26]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000962:	2300      	movs	r3, #0
 8000964:	773b      	strb	r3, [r7, #28]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 8000966:	2300      	movs	r3, #0
 8000968:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(&GPIOLed);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fd56 	bl	8000420 <GPIO_Init>

	/*configuring the Pins alternate function as SPI2*/
	SPI2_GPIOInit(GPIOB, GPIO_PIN_NO_9,  5); /*NSS*/
 8000974:	2205      	movs	r2, #5
 8000976:	2109      	movs	r1, #9
 8000978:	482b      	ldr	r0, [pc, #172]	; (8000a28 <main+0xdc>)
 800097a:	f7ff fc43 	bl	8000204 <SPI2_GPIOInit>
	SPI2_GPIOInit(GPIOB, GPIO_PIN_NO_10, 5); /*SCK*/
 800097e:	2205      	movs	r2, #5
 8000980:	210a      	movs	r1, #10
 8000982:	4829      	ldr	r0, [pc, #164]	; (8000a28 <main+0xdc>)
 8000984:	f7ff fc3e 	bl	8000204 <SPI2_GPIOInit>
	SPI2_GPIOInit(GPIOB, GPIO_PIN_NO_14, 5); /*MISO*/
 8000988:	2205      	movs	r2, #5
 800098a:	210e      	movs	r1, #14
 800098c:	4826      	ldr	r0, [pc, #152]	; (8000a28 <main+0xdc>)
 800098e:	f7ff fc39 	bl	8000204 <SPI2_GPIOInit>
	SPI2_GPIOInit(GPIOB, GPIO_PIN_NO_15, 5); /*MOSI*/
 8000992:	2205      	movs	r2, #5
 8000994:	210f      	movs	r1, #15
 8000996:	4824      	ldr	r0, [pc, #144]	; (8000a28 <main+0xdc>)
 8000998:	f7ff fc34 	bl	8000204 <SPI2_GPIOInit>

	/*configuring the SPI2 registers*/
	SPI_Handle test;
	test.pSPIx = SPI2;
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <main+0xe0>)
 800099e:	60bb      	str	r3, [r7, #8]
	test.config.SPI_BusConfig = SPI_BUS_FD;
 80009a0:	2301      	movs	r3, #1
 80009a2:	737b      	strb	r3, [r7, #13]
	test.config.SPI_ModeConfig = SPI_MODE_SLAVE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	733b      	strb	r3, [r7, #12]
	test.config.SPI_SclkSpeed = SPI_ClckSPeed_DIV8;
 80009a8:	2303      	movs	r3, #3
 80009aa:	73bb      	strb	r3, [r7, #14]
	test.config.SPI_DFF = SPI_DFF_8;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
	test.config.SPI_COPL = SPI_CPOL_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	743b      	strb	r3, [r7, #16]
	test.config.SPI_CPHA = SPI_CPHA_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	747b      	strb	r3, [r7, #17]
	test.config.SPI_SSM = SPI_SSM_DI;
 80009b8:	2300      	movs	r3, #0
 80009ba:	74bb      	strb	r3, [r7, #18]
	SPI_CLKCNT(test.pSPIx, ENABLE);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	2101      	movs	r1, #1
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe93 	bl	80006ec <SPI_CLKCNT>
	SPI_Init(&test);
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fefe 	bl	80007cc <SPI_Init>

	/*enabling the SPI*/
	SPI_Enable(test.pSPIx, ENABLE);
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	2101      	movs	r1, #1
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff9e 	bl	8000916 <SPI_Enable>

		/*wait until bsy flag is 0*/
		//while(GetFlagStatus(test.pSPIx, SPI_BSY_FLAG) && !(GetFlagStatus(test.pSPIx, SPI_RXNE_FLAG)));

		/*read the data and store it in RData*/
		SPI_ReceiveData(test.pSPIx, &RData, 1);
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1df9      	adds	r1, r7, #7
 80009de:	2201      	movs	r2, #1
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff59 	bl	8000898 <SPI_ReceiveData>

		/*wait for BSY flag to sit since there is 2 ABP clocks between writing and the BSY flag bit to sit*/
		while(GetFlagStatus(test.pSPIx, SPI_RXNE_FLAG));
 80009e6:	bf00      	nop
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	2101      	movs	r1, #1
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff3f 	bl	8000870 <GetFlagStatus>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f7      	bne.n	80009e8 <main+0x9c>
		while(GetFlagStatus(test.pSPIx, SPI_BSY_FLAG));
 80009f8:	bf00      	nop
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff36 	bl	8000870 <GetFlagStatus>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f7      	bne.n	80009fa <main+0xae>

		/*if button in master is pressed, toggle the LED*/
		if(RData & 1U){
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0e2      	beq.n	80009da <main+0x8e>
			GPIO_ToggleOutputPin(GPIOLed.pGPIOx, GPIOLed.GPIO_PinConfig.GPIO_PinNumber);
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	7e3a      	ldrb	r2, [r7, #24]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe52 	bl	80006c4 <GPIO_ToggleOutputPin>
		SPI_ReceiveData(test.pSPIx, &RData, 1);
 8000a20:	e7db      	b.n	80009da <main+0x8e>
 8000a22:	bf00      	nop
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40003800 	.word	0x40003800

08000a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a5e:	f000 f811 	bl	8000a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff ff73 	bl	800094c <main>

08000a66 <LoopForever>:

LoopForever:
  b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   r0, =_estack
 8000a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a74:	08000aec 	.word	0x08000aec
  ldr r2, =_sbss
 8000a78:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a7c:	2000001c 	.word	0x2000001c

08000a80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC_IRQHandler>
	...

08000a84 <__libc_init_array>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4d0d      	ldr	r5, [pc, #52]	; (8000abc <__libc_init_array+0x38>)
 8000a88:	4c0d      	ldr	r4, [pc, #52]	; (8000ac0 <__libc_init_array+0x3c>)
 8000a8a:	1b64      	subs	r4, r4, r5
 8000a8c:	10a4      	asrs	r4, r4, #2
 8000a8e:	2600      	movs	r6, #0
 8000a90:	42a6      	cmp	r6, r4
 8000a92:	d109      	bne.n	8000aa8 <__libc_init_array+0x24>
 8000a94:	4d0b      	ldr	r5, [pc, #44]	; (8000ac4 <__libc_init_array+0x40>)
 8000a96:	4c0c      	ldr	r4, [pc, #48]	; (8000ac8 <__libc_init_array+0x44>)
 8000a98:	f000 f818 	bl	8000acc <_init>
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	10a4      	asrs	r4, r4, #2
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	42a6      	cmp	r6, r4
 8000aa4:	d105      	bne.n	8000ab2 <__libc_init_array+0x2e>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aac:	4798      	blx	r3
 8000aae:	3601      	adds	r6, #1
 8000ab0:	e7ee      	b.n	8000a90 <__libc_init_array+0xc>
 8000ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab6:	4798      	blx	r3
 8000ab8:	3601      	adds	r6, #1
 8000aba:	e7f2      	b.n	8000aa2 <__libc_init_array+0x1e>
 8000abc:	08000ae4 	.word	0x08000ae4
 8000ac0:	08000ae4 	.word	0x08000ae4
 8000ac4:	08000ae4 	.word	0x08000ae4
 8000ac8:	08000ae8 	.word	0x08000ae8

08000acc <_init>:
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	bf00      	nop
 8000ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad2:	bc08      	pop	{r3}
 8000ad4:	469e      	mov	lr, r3
 8000ad6:	4770      	bx	lr

08000ad8 <_fini>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr
