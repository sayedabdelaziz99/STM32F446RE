
LedDimmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000088c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a50  08000a50  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a50  08000a50  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000a50  08000a50  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a50  08000a50  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a50  08000a50  00010a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a54  08000a54  00010a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000a5c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000a5c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000145c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c2  00000000  00000000  00021490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00021958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000128  00000000  00000000  00021ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027c4  00000000  00000000  00021be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001615  00000000  00000000  000243a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a215  00000000  00000000  000259b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002fbce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c0  00000000  00000000  0002fc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000a38 	.word	0x08000a38

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000a38 	.word	0x08000a38

08000204 <systick_init>:
 */
#include "GPIO_driver.h"
#include "bsp.h"
#include "SPI_driver.h"

void systick_init(uint16_t Ticks_PerSecond){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	80fb      	strh	r3, [r7, #6]
SysTick -> CVR = 0x1U;
 800020e:	4b10      	ldr	r3, [pc, #64]	; (8000250 <systick_init+0x4c>)
 8000210:	2201      	movs	r2, #1
 8000212:	609a      	str	r2, [r3, #8]
SysTick ->RVR = SysClock / Ticks_PerSecond;
 8000214:	88fb      	ldrh	r3, [r7, #6]
 8000216:	4a0e      	ldr	r2, [pc, #56]	; (8000250 <systick_init+0x4c>)
 8000218:	490e      	ldr	r1, [pc, #56]	; (8000254 <systick_init+0x50>)
 800021a:	fbb1 f3f3 	udiv	r3, r1, r3
 800021e:	6053      	str	r3, [r2, #4]
SysTick ->CSR |= (1 << 0);
 8000220:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <systick_init+0x4c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <systick_init+0x4c>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]
SysTick ->CSR |= (1 << 1);
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <systick_init+0x4c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <systick_init+0x4c>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	6013      	str	r3, [r2, #0]
SysTick ->CSR |= (1 << 2);
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <systick_init+0x4c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a04      	ldr	r2, [pc, #16]	; (8000250 <systick_init+0x4c>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e010 	.word	0xe000e010
 8000254:	00f42400 	.word	0x00f42400

08000258 <GPIO_TIM2Init>:
	  GPIO_Init(&SW);
}



void GPIO_TIM2Init(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t ALTFN_Mode){
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	460b      	mov	r3, r1
 8000262:	70fb      	strb	r3, [r7, #3]
 8000264:	4613      	mov	r3, r2
 8000266:	70bb      	strb	r3, [r7, #2]
	GPIO_Handle_t CH;
	CH.pGPIOx = pGPIOx;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	60fb      	str	r3, [r7, #12]
	CH.GPIO_PinConfig.GPIO_PinNumber =  GPIO_PIN_NO_5;
 800026c:	2305      	movs	r3, #5
 800026e:	743b      	strb	r3, [r7, #16]
	CH.GPIO_PinConfig.GPIO_PinMode   =  GPIO_MODE_ALTFN;
 8000270:	2302      	movs	r3, #2
 8000272:	747b      	strb	r3, [r7, #17]
	CH.GPIO_PinConfig.GPIO_PinAltFunMode = ALTFN_Mode;
 8000274:	78bb      	ldrb	r3, [r7, #2]
 8000276:	757b      	strb	r3, [r7, #21]
	CH.GPIO_PinConfig.GPIO_PinSpeed  =  GPIO_SPEED_FAST;
 8000278:	2302      	movs	r3, #2
 800027a:	74bb      	strb	r3, [r7, #18]
	CH.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800027c:	2300      	movs	r3, #0
 800027e:	753b      	strb	r3, [r7, #20]
	CH.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_NO_PUPD;
 8000280:	2300      	movs	r3, #0
 8000282:	74fb      	strb	r3, [r7, #19]
	GPIO_CLKCNT(pGPIOx, ENABLE);
 8000284:	2101      	movs	r1, #1
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f000 f814 	bl	80002b4 <GPIO_CLKCNT>
	pGPIOx->LCKR &= ~(1 << PinNumber);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
 8000290:	78fa      	ldrb	r2, [r7, #3]
 8000292:	2101      	movs	r1, #1
 8000294:	fa01 f202 	lsl.w	r2, r1, r2
 8000298:	43d2      	mvns	r2, r2
 800029a:	401a      	ands	r2, r3
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	61da      	str	r2, [r3, #28]
	GPIO_Init(&CH);
 80002a0:	f107 030c 	add.w	r3, r7, #12
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f8eb 	bl	8000480 <GPIO_Init>
}
 80002aa:	bf00      	nop
 80002ac:	3718      	adds	r7, #24
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <GPIO_CLKCNT>:
 *
 * @Note              -  none

 */
void GPIO_CLKCNT(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d157      	bne.n	8000376 <GPIO_CLKCNT+0xc2>
	{
	  if(pGPIOx == GPIOA){GPIOA_CLKEN;}
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a59      	ldr	r2, [pc, #356]	; (8000430 <GPIO_CLKCNT+0x17c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_CLKCNT+0x28>
 80002ce:	4b59      	ldr	r3, [pc, #356]	; (8000434 <GPIO_CLKCNT+0x180>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a58      	ldr	r2, [pc, #352]	; (8000434 <GPIO_CLKCNT+0x180>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
	}
}
 80002da:	e0a3      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKEN;}
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a56      	ldr	r2, [pc, #344]	; (8000438 <GPIO_CLKCNT+0x184>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_CLKCNT+0x3e>
 80002e4:	4b53      	ldr	r3, [pc, #332]	; (8000434 <GPIO_CLKCNT+0x180>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a52      	ldr	r2, [pc, #328]	; (8000434 <GPIO_CLKCNT+0x180>)
 80002ea:	f043 0302 	orr.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e098      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKEN;}
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a51      	ldr	r2, [pc, #324]	; (800043c <GPIO_CLKCNT+0x188>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_CLKCNT+0x54>
 80002fa:	4b4e      	ldr	r3, [pc, #312]	; (8000434 <GPIO_CLKCNT+0x180>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a4d      	ldr	r2, [pc, #308]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000300:	f043 0304 	orr.w	r3, r3, #4
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e08d      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKEN;}
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a4d      	ldr	r2, [pc, #308]	; (8000440 <GPIO_CLKCNT+0x18c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_CLKCNT+0x6a>
 8000310:	4b48      	ldr	r3, [pc, #288]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a47      	ldr	r2, [pc, #284]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000316:	f043 0308 	orr.w	r3, r3, #8
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e082      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKEN;}
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a48      	ldr	r2, [pc, #288]	; (8000444 <GPIO_CLKCNT+0x190>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_CLKCNT+0x80>
 8000326:	4b43      	ldr	r3, [pc, #268]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a42      	ldr	r2, [pc, #264]	; (8000434 <GPIO_CLKCNT+0x180>)
 800032c:	f043 0310 	orr.w	r3, r3, #16
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e077      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKEN;}
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a44      	ldr	r2, [pc, #272]	; (8000448 <GPIO_CLKCNT+0x194>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_CLKCNT+0x96>
 800033c:	4b3d      	ldr	r3, [pc, #244]	; (8000434 <GPIO_CLKCNT+0x180>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a3c      	ldr	r2, [pc, #240]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e06c      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKEN;}
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a3f      	ldr	r2, [pc, #252]	; (800044c <GPIO_CLKCNT+0x198>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_CLKCNT+0xac>
 8000352:	4b38      	ldr	r3, [pc, #224]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a37      	ldr	r2, [pc, #220]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e061      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKEN;}
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a3b      	ldr	r2, [pc, #236]	; (8000450 <GPIO_CLKCNT+0x19c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d15d      	bne.n	8000424 <GPIO_CLKCNT+0x170>
 8000368:	4b32      	ldr	r3, [pc, #200]	; (8000434 <GPIO_CLKCNT+0x180>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a31      	ldr	r2, [pc, #196]	; (8000434 <GPIO_CLKCNT+0x180>)
 800036e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e056      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  if(pGPIOx == GPIOA){GPIOA_CLKDI;}
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a2d      	ldr	r2, [pc, #180]	; (8000430 <GPIO_CLKCNT+0x17c>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_CLKCNT+0xd8>
 800037e:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a2c      	ldr	r2, [pc, #176]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000384:	f023 0301 	bic.w	r3, r3, #1
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	e04b      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOB){GPIOB_CLKDI;}
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a2a      	ldr	r2, [pc, #168]	; (8000438 <GPIO_CLKCNT+0x184>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_CLKCNT+0xee>
 8000394:	4b27      	ldr	r3, [pc, #156]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a26      	ldr	r2, [pc, #152]	; (8000434 <GPIO_CLKCNT+0x180>)
 800039a:	f023 0302 	bic.w	r3, r3, #2
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e040      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOC){GPIOC_CLKDI;}
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a25      	ldr	r2, [pc, #148]	; (800043c <GPIO_CLKCNT+0x188>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_CLKCNT+0x104>
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <GPIO_CLKCNT+0x180>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a21      	ldr	r2, [pc, #132]	; (8000434 <GPIO_CLKCNT+0x180>)
 80003b0:	f023 0304 	bic.w	r3, r3, #4
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e035      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOD){GPIOD_CLKDI;}
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a21      	ldr	r2, [pc, #132]	; (8000440 <GPIO_CLKCNT+0x18c>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_CLKCNT+0x11a>
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <GPIO_CLKCNT+0x180>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <GPIO_CLKCNT+0x180>)
 80003c6:	f023 0308 	bic.w	r3, r3, #8
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e02a      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOE){GPIOE_CLKDI;}
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a1c      	ldr	r2, [pc, #112]	; (8000444 <GPIO_CLKCNT+0x190>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_CLKCNT+0x130>
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <GPIO_CLKCNT+0x180>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a16      	ldr	r2, [pc, #88]	; (8000434 <GPIO_CLKCNT+0x180>)
 80003dc:	f023 0310 	bic.w	r3, r3, #16
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	e01f      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOF){GPIOF_CLKDI;}
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a18      	ldr	r2, [pc, #96]	; (8000448 <GPIO_CLKCNT+0x194>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_CLKCNT+0x146>
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <GPIO_CLKCNT+0x180>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a10      	ldr	r2, [pc, #64]	; (8000434 <GPIO_CLKCNT+0x180>)
 80003f2:	f023 0320 	bic.w	r3, r3, #32
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e014      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOG){GPIOG_CLKDI;}
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a13      	ldr	r2, [pc, #76]	; (800044c <GPIO_CLKCNT+0x198>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_CLKCNT+0x15c>
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <GPIO_CLKCNT+0x180>)
 8000408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040e:	e009      	b.n	8000424 <GPIO_CLKCNT+0x170>
	  else if (pGPIOx == GPIOH){GPIOH_CLKDI;}
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <GPIO_CLKCNT+0x19c>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d105      	bne.n	8000424 <GPIO_CLKCNT+0x170>
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <GPIO_CLKCNT+0x180>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <GPIO_CLKCNT+0x180>)
 800041e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000422:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40020000 	.word	0x40020000
 8000434:	40023800 	.word	0x40023800
 8000438:	40020400 	.word	0x40020400
 800043c:	40020800 	.word	0x40020800
 8000440:	40020c00 	.word	0x40020c00
 8000444:	40021000 	.word	0x40021000
 8000448:	40021400 	.word	0x40021400
 800044c:	40021800 	.word	0x40021800
 8000450:	40021c00 	.word	0x40021c00

08000454 <GPIO_PORTCODE>:
 * @return            - the code of the given port
 *
 * @Note              -

 */
static uint8_t GPIO_PORTCODE(GPIO_RegDef_t *pGPIOx){
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	uint8_t volatile portcode;
	uint32_t offset = (uint32_t)((uint32_t)pGPIOx - GPIOA_BASEADDR); /*calculate the offset from the base address*/
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000462:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000466:	60fb      	str	r3, [r7, #12]
	portcode = offset / 0x400;   /*portcode will range from 0 to 8 since the offset is a multiply of 400*/
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	0a9b      	lsrs	r3, r3, #10
 800046c:	b2db      	uxtb	r3, r3
 800046e:	72fb      	strb	r3, [r7, #11]
	return portcode;
 8000470:	7afb      	ldrb	r3, [r7, #11]
 8000472:	b2db      	uxtb	r3, r3
}
 8000474:	4618      	mov	r0, r3
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	795b      	ldrb	r3, [r3, #5]
 8000490:	2b03      	cmp	r3, #3
 8000492:	d820      	bhi.n	80004d6 <GPIO_Init+0x56>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	461a      	mov	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	fa02 f303 	lsl.w	r3, r2, r3
 80004a4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	2103      	movs	r1, #3
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	400a      	ands	r2, r1
 80004c2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6819      	ldr	r1, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	697a      	ldr	r2, [r7, #20]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	e084      	b.n	80005e0 <GPIO_Init+0x160>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	795b      	ldrb	r3, [r3, #5]
 80004da:	2b04      	cmp	r3, #4
 80004dc:	d11d      	bne.n	800051a <GPIO_Init+0x9a>
			/*configure the falling edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	6812      	ldr	r2, [r2, #0]
 80004e8:	601a      	str	r2, [r3, #0]
			EXTI ->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ea:	4b89      	ldr	r3, [pc, #548]	; (8000710 <GPIO_Init+0x290>)
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	7912      	ldrb	r2, [r2, #4]
 80004f2:	4611      	mov	r1, r2
 80004f4:	2201      	movs	r2, #1
 80004f6:	408a      	lsls	r2, r1
 80004f8:	43d2      	mvns	r2, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a84      	ldr	r2, [pc, #528]	; (8000710 <GPIO_Init+0x290>)
 80004fe:	400b      	ands	r3, r1
 8000500:	6093      	str	r3, [r2, #8]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000502:	4b83      	ldr	r3, [pc, #524]	; (8000710 <GPIO_Init+0x290>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	7912      	ldrb	r2, [r2, #4]
 800050a:	4611      	mov	r1, r2
 800050c:	2201      	movs	r2, #1
 800050e:	408a      	lsls	r2, r1
 8000510:	4611      	mov	r1, r2
 8000512:	4a7f      	ldr	r2, [pc, #508]	; (8000710 <GPIO_Init+0x290>)
 8000514:	430b      	orrs	r3, r1
 8000516:	60d3      	str	r3, [r2, #12]
 8000518:	e03d      	b.n	8000596 <GPIO_Init+0x116>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	795b      	ldrb	r3, [r3, #5]
 800051e:	2b05      	cmp	r3, #5
 8000520:	d11d      	bne.n	800055e <GPIO_Init+0xde>
			/*configure the rising edge trigger register*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	6812      	ldr	r2, [r2, #0]
 800052c:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052e:	4b78      	ldr	r3, [pc, #480]	; (8000710 <GPIO_Init+0x290>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	7912      	ldrb	r2, [r2, #4]
 8000536:	4611      	mov	r1, r2
 8000538:	2201      	movs	r2, #1
 800053a:	408a      	lsls	r2, r1
 800053c:	43d2      	mvns	r2, r2
 800053e:	4611      	mov	r1, r2
 8000540:	4a73      	ldr	r2, [pc, #460]	; (8000710 <GPIO_Init+0x290>)
 8000542:	400b      	ands	r3, r1
 8000544:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000546:	4b72      	ldr	r3, [pc, #456]	; (8000710 <GPIO_Init+0x290>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	7912      	ldrb	r2, [r2, #4]
 800054e:	4611      	mov	r1, r2
 8000550:	2201      	movs	r2, #1
 8000552:	408a      	lsls	r2, r1
 8000554:	4611      	mov	r1, r2
 8000556:	4a6e      	ldr	r2, [pc, #440]	; (8000710 <GPIO_Init+0x290>)
 8000558:	430b      	orrs	r3, r1
 800055a:	6093      	str	r3, [r2, #8]
 800055c:	e01b      	b.n	8000596 <GPIO_Init+0x116>
		}
		else{
			/*configure the falling and rising edge trigger registers*/
			pGPIOHandle->pGPIOx->MODER &= ~( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	6812      	ldr	r2, [r2, #0]
 8000568:	601a      	str	r2, [r3, #0]
			EXTI ->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056a:	4b69      	ldr	r3, [pc, #420]	; (8000710 <GPIO_Init+0x290>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7912      	ldrb	r2, [r2, #4]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	4611      	mov	r1, r2
 800057a:	4a65      	ldr	r2, [pc, #404]	; (8000710 <GPIO_Init+0x290>)
 800057c:	430b      	orrs	r3, r1
 800057e:	60d3      	str	r3, [r2, #12]
			EXTI ->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000580:	4b63      	ldr	r3, [pc, #396]	; (8000710 <GPIO_Init+0x290>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a5f      	ldr	r2, [pc, #380]	; (8000710 <GPIO_Init+0x290>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6093      	str	r3, [r2, #8]
		}

		/*configure the gpio port selection(SYSCONFIG_EXTI register)*/
		uint8_t tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;  /*which EXTICR to configure*/
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	089b      	lsrs	r3, r3, #2
 800059c:	74fb      	strb	r3, [r7, #19]
		uint8_t tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;  /*which Field of the EXTICR to configure*/
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	f003 0303 	and.w	r3, r3, #3
 80005a6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_PORTCODE(pGPIOHandle->pGPIOx);          /*the code that represents the port whoes pin is goning to trigger the interrupt*/
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ff51 	bl	8000454 <GPIO_PORTCODE>
 80005b2:	4603      	mov	r3, r0
 80005b4:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[tmp1] = (portcode << tmp2 * 4);                  /*every field is four bits wide so  we multiply by 4*/
 80005b6:	7c7a      	ldrb	r2, [r7, #17]
 80005b8:	7cbb      	ldrb	r3, [r7, #18]
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	fa02 f103 	lsl.w	r1, r2, r3
 80005c0:	4a54      	ldr	r2, [pc, #336]	; (8000714 <GPIO_Init+0x294>)
 80005c2:	7cfb      	ldrb	r3, [r7, #19]
 80005c4:	3302      	adds	r3, #2
 80005c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/*configure the exti interrupt delivery(interrupt mask register)*/
		EXTI ->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ca:	4b51      	ldr	r3, [pc, #324]	; (8000710 <GPIO_Init+0x290>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	7912      	ldrb	r2, [r2, #4]
 80005d2:	4611      	mov	r1, r2
 80005d4:	2201      	movs	r2, #1
 80005d6:	408a      	lsls	r2, r1
 80005d8:	4611      	mov	r1, r2
 80005da:	4a4d      	ldr	r2, [pc, #308]	; (8000710 <GPIO_Init+0x290>)
 80005dc:	430b      	orrs	r3, r1
 80005de:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	799b      	ldrb	r3, [r3, #6]
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	2103      	movs	r1, #3
 8000600:	fa01 f303 	lsl.w	r3, r1, r3
 8000604:	43db      	mvns	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	400a      	ands	r2, r1
 800060e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6899      	ldr	r1, [r3, #8]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	430a      	orrs	r2, r1
 800061e:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	79db      	ldrb	r3, [r3, #7]
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	68da      	ldr	r2, [r3, #12]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	2103      	movs	r1, #3
 8000640:	fa01 f303 	lsl.w	r3, r1, r3
 8000644:	43db      	mvns	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	400a      	ands	r2, r1
 800064e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68d9      	ldr	r1, [r3, #12]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	430a      	orrs	r2, r1
 800065e:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7a1b      	ldrb	r3, [r3, #8]
 8000664:	461a      	mov	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	791b      	ldrb	r3, [r3, #4]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	4619      	mov	r1, r3
 800067c:	2301      	movs	r3, #1
 800067e:	408b      	lsls	r3, r1
 8000680:	43db      	mvns	r3, r3
 8000682:	4619      	mov	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	400a      	ands	r2, r1
 800068a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6859      	ldr	r1, [r3, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	430a      	orrs	r2, r1
 800069a:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	795b      	ldrb	r3, [r3, #5]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d131      	bne.n	8000708 <GPIO_Init+0x288>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	7c3a      	ldrb	r2, [r7, #16]
 80006bc:	3208      	adds	r2, #8
 80006be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	220f      	movs	r2, #15
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	43db      	mvns	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	7c3a      	ldrb	r2, [r7, #16]
 80006d6:	4001      	ands	r1, r0
 80006d8:	3208      	adds	r2, #8
 80006da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	7c3a      	ldrb	r2, [r7, #16]
 80006e4:	3208      	adds	r2, #8
 80006e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7a5b      	ldrb	r3, [r3, #9]
 80006ee:	461a      	mov	r2, r3
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	7c3a      	ldrb	r2, [r7, #16]
 8000700:	4301      	orrs	r1, r0
 8000702:	3208      	adds	r2, #8
 8000704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40013c00 	.word	0x40013c00
 8000714:	40013800 	.word	0x40013800

08000718 <main>:
static void timer_setup(void);

uint32_t Ticks = 0U;
uint32_t TicksPerSecond = 1000U;

int main(void){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
	//enable floating point full access
	SCB ->CPACR |= ((3UL << 20U)|(3UL << 22U));
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <main+0x88>)
 8000720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000724:	4a1e      	ldr	r2, [pc, #120]	; (80007a0 <main+0x88>)
 8000726:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800072a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	GPIO_TIM2Init(GPIOA, GPIO_PIN_NO_5, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	2105      	movs	r1, #5
 8000732:	481c      	ldr	r0, [pc, #112]	; (80007a4 <main+0x8c>)
 8000734:	f7ff fd90 	bl	8000258 <GPIO_TIM2Init>
	timer_setup();
 8000738:	f000 f84a 	bl	80007d0 <timer_setup>
	/*initialize SysTick*/
	systick_init(TicksPerSecond);
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <main+0x90>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	b29b      	uxth	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fd5e 	bl	8000204 <systick_init>

/*Code starts here*/
	float DutyCycle = 0.0f;
 8000748:	f04f 0300 	mov.w	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
	uint32_t StartTime = Ticks;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <main+0x94>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	603b      	str	r3, [r7, #0]
	SetDuty(DutyCycle);
 8000754:	ed97 0a01 	vldr	s0, [r7, #4]
 8000758:	f000 f8ee 	bl	8000938 <SetDuty>
	while(1){
		if((Ticks - StartTime) >= 10){
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <main+0x94>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	2b09      	cmp	r3, #9
 8000766:	d9f9      	bls.n	800075c <main+0x44>
		DutyCycle += 1.0f;
 8000768:	edd7 7a01 	vldr	s15, [r7, #4]
 800076c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000774:	edc7 7a01 	vstr	s15, [r7, #4]
			if(DutyCycle >= 100){
 8000778:	edd7 7a01 	vldr	s15, [r7, #4]
 800077c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80007b0 <main+0x98>
 8000780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000788:	db02      	blt.n	8000790 <main+0x78>
				DutyCycle = 0.0f;
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
			}
			SetDuty(DutyCycle);
 8000790:	ed97 0a01 	vldr	s0, [r7, #4]
 8000794:	f000 f8d0 	bl	8000938 <SetDuty>
			StartTime = Ticks;
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <main+0x94>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	603b      	str	r3, [r7, #0]
		if((Ticks - StartTime) >= 10){
 800079e:	e7dd      	b.n	800075c <main+0x44>
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	40020000 	.word	0x40020000
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000020 	.word	0x20000020
 80007b0:	42c80000 	.word	0x42c80000

080007b4 <SysTick_Handler>:
	}

/*Code ends here*/
}

void SysTick_Handler(void){
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	Ticks++;
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Handler+0x18>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	4a03      	ldr	r2, [pc, #12]	; (80007cc <SysTick_Handler+0x18>)
 80007c0:	6013      	str	r3, [r2, #0]
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	20000020 	.word	0x20000020

080007d0 <timer_setup>:

static void timer_setup(void){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	//enable clock for the timer
	TIM2_CLKEN();
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <timer_setup+0x38>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <timer_setup+0x38>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6413      	str	r3, [r2, #64]	; 0x40

	// Setup frequency and resolution
	timer_set_prescaler(PRESCALER - 1);
 80007e0:	200f      	movs	r0, #15
 80007e2:	f000 f89a 	bl	800091a <timer_set_prescaler>
	timer_set_period(ARR_VALUE - 1);
 80007e6:	f240 30e7 	movw	r0, #999	; 0x3e7
 80007ea:	f000 f888 	bl	80008fe <timer_set_period>

	// High level timer configuration
	timer_set_mode(1, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 f80a 	bl	800080c <timer_set_mode>

	// Setup PWM mode
	timer_set_oc_mode();
 80007f8:	f000 f830 	bl	800085c <timer_set_oc_mode>

	// Enable PWM output
	timer_enable_counter();
 80007fc:	f000 f863 	bl	80008c6 <timer_enable_counter>
	timer_enable_oc_output();
 8000800:	f000 f86e 	bl	80008e0 <timer_enable_oc_output>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800

0800080c <timer_set_mode>:

static void timer_set_mode(uint32_t clock_div,uint32_t alignment, uint32_t direction){
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	TIM2 ->CR1 &= ~(1);
 8000818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000822:	f023 0301 	bic.w	r3, r3, #1
 8000826:	6013      	str	r3, [r2, #0]
	TIM2 ->CR1 |= clock_div | alignment | direction;
 8000828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	68f9      	ldr	r1, [r7, #12]
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4319      	orrs	r1, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	430b      	orrs	r3, r1
 8000838:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800083c:	4313      	orrs	r3, r2
 800083e:	600b      	str	r3, [r1, #0]
	TIM2->CR1  |= (0x1 << TIM_CR1_ARPE);
 8000840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <timer_set_oc_mode>:

static void timer_set_oc_mode(){
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
	TIM2->CCMR1 &= ~(0x3U << 0);
 8000860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086a:	f023 0303 	bic.w	r3, r3, #3
 800086e:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (0x0U << 0); //output mode
 8000870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000874:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &= ~(0x7U << 4);
 800087c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800088a:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (0x6U << 4); //PWM1 mode
 800088c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000896:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800089a:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (0x1U << 3); //PreLoad
 800089c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a6:	f043 0308 	orr.w	r3, r3, #8
 80008aa:	6193      	str	r3, [r2, #24]
	TIM2->BDTR |= (0x1 << 15); //MOE
 80008ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ba:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <timer_enable_counter>:

inline static void timer_enable_counter(void){
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
	TIM2 ->CR1 |= TIM_CR1_CEN;
 80008ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6013      	str	r3, [r2, #0]
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <timer_enable_oc_output>:


inline static void timer_enable_oc_output(void){
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
	TIM2->CCER |= (0x1U << 0);
 80008e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e8:	6a1b      	ldr	r3, [r3, #32]
 80008ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6213      	str	r3, [r2, #32]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <timer_set_period>:

inline static void timer_set_period(uint32_t period){
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	TIM2 ->ARR = period;
 8000906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <timer_set_prescaler>:
inline static void timer_set_prescaler(uint32_t value){
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
	TIM2 ->PSC = value;
 8000922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6293      	str	r3, [r2, #40]	; 0x28
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <SetDuty>:

static void SetDuty(float DutyCycle){
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	ed87 0a01 	vstr	s0, [r7, #4]
	const float raw_value = (float)ARR_VALUE * (DutyCycle / 100.0f);
 8000942:	ed97 7a01 	vldr	s14, [r7, #4]
 8000946:	eddf 6a09 	vldr	s13, [pc, #36]	; 800096c <SetDuty+0x34>
 800094a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800094e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000970 <SetDuty+0x38>
 8000952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000956:	edc7 7a03 	vstr	s15, [r7, #12]
	timer_set_oc_value(raw_value);
 800095a:	ed97 0a03 	vldr	s0, [r7, #12]
 800095e:	f000 f809 	bl	8000974 <timer_set_oc_value>
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	42c80000 	.word	0x42c80000
 8000970:	447a0000 	.word	0x447a0000

08000974 <timer_set_oc_value>:

inline static void timer_set_oc_value(float value){
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	ed87 0a01 	vstr	s0, [r7, #4]
	TIM2 ->CCR1 = (uint32_t)value;
 800097e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000982:	edd7 7a01 	vldr	s15, [r7, #4]
 8000986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800098a:	ee17 2a90 	vmov	r2, s15
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	; (80009dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <LoopForever+0xe>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	; (80009e8 <LoopForever+0x16>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ca:	f000 f811 	bl	80009f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff fea3 	bl	8000718 <main>

080009d2 <LoopForever>:

LoopForever:
  b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
  ldr   r0, =_estack
 80009d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80009e0:	08000a58 	.word	0x08000a58
  ldr r2, =_sbss
 80009e4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80009e8:	20000024 	.word	0x20000024

080009ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC_IRQHandler>
	...

080009f0 <__libc_init_array>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	4d0d      	ldr	r5, [pc, #52]	; (8000a28 <__libc_init_array+0x38>)
 80009f4:	4c0d      	ldr	r4, [pc, #52]	; (8000a2c <__libc_init_array+0x3c>)
 80009f6:	1b64      	subs	r4, r4, r5
 80009f8:	10a4      	asrs	r4, r4, #2
 80009fa:	2600      	movs	r6, #0
 80009fc:	42a6      	cmp	r6, r4
 80009fe:	d109      	bne.n	8000a14 <__libc_init_array+0x24>
 8000a00:	4d0b      	ldr	r5, [pc, #44]	; (8000a30 <__libc_init_array+0x40>)
 8000a02:	4c0c      	ldr	r4, [pc, #48]	; (8000a34 <__libc_init_array+0x44>)
 8000a04:	f000 f818 	bl	8000a38 <_init>
 8000a08:	1b64      	subs	r4, r4, r5
 8000a0a:	10a4      	asrs	r4, r4, #2
 8000a0c:	2600      	movs	r6, #0
 8000a0e:	42a6      	cmp	r6, r4
 8000a10:	d105      	bne.n	8000a1e <__libc_init_array+0x2e>
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a18:	4798      	blx	r3
 8000a1a:	3601      	adds	r6, #1
 8000a1c:	e7ee      	b.n	80009fc <__libc_init_array+0xc>
 8000a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a22:	4798      	blx	r3
 8000a24:	3601      	adds	r6, #1
 8000a26:	e7f2      	b.n	8000a0e <__libc_init_array+0x1e>
 8000a28:	08000a50 	.word	0x08000a50
 8000a2c:	08000a50 	.word	0x08000a50
 8000a30:	08000a50 	.word	0x08000a50
 8000a34:	08000a54 	.word	0x08000a54

08000a38 <_init>:
 8000a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3a:	bf00      	nop
 8000a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a3e:	bc08      	pop	{r3}
 8000a40:	469e      	mov	lr, r3
 8000a42:	4770      	bx	lr

08000a44 <_fini>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	bf00      	nop
 8000a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4a:	bc08      	pop	{r3}
 8000a4c:	469e      	mov	lr, r3
 8000a4e:	4770      	bx	lr
